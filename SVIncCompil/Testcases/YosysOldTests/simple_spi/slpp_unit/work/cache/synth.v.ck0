module #~@$paramod\fifo4\dw=8#~@(clk, rst, clr, din, we, dout, re, full, empty);
  wire _000_;
  wire [1:0] _001_;
  wire [1:0] _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire [7:0] _064_;
  wire [7:0] _065_;
  wire [7:0] _066_;
  wire [7:0] _067_;
  input clk;
  input clr;
  input [8:1] din;
  output [8:1] dout;
  output empty;
  output full;
  reg gb;
  reg [8:1] #~@mem[0]#~@;
  reg [8:1] #~@mem[1]#~@;
  reg [8:1] #~@mem[2]#~@;
  reg [8:1] #~@mem[3]#~@;
  input re;
  reg [1:0] rp;
  input rst;
  input we;
  reg [1:0] wp;
  assign _060_ = ~gb;
  assign _061_ = ~rp[1];
  assign _062_ = _061_ ^ wp[1];
  assign _063_ = ~wp[0];
  assign _003_ = rp[0] ^ _063_;
  assign _004_ = _003_ & _062_;
  assign empty = _004_ & _060_;
  assign full = _004_ & gb;
  assign _005_ = rp[0] ? #~@mem[3]#~@[1] : #~@mem[2]#~@[1];
  assign _006_ = rp[0] ? #~@mem[1]#~@[1] : #~@mem[0]#~@[1];
  assign dout[1] = rp[1] ? _005_ : _006_;
  assign _007_ = rp[0] ? #~@mem[3]#~@[2] : #~@mem[2]#~@[2];
  assign _008_ = rp[0] ? #~@mem[1]#~@[2] : #~@mem[0]#~@[2];
  assign dout[2] = rp[1] ? _007_ : _008_;
  assign _009_ = rp[0] ? #~@mem[3]#~@[3] : #~@mem[2]#~@[3];
  assign _010_ = rp[0] ? #~@mem[1]#~@[3] : #~@mem[0]#~@[3];
  assign dout[3] = rp[1] ? _009_ : _010_;
  assign _011_ = rp[0] ? #~@mem[3]#~@[4] : #~@mem[2]#~@[4];
  assign _012_ = rp[0] ? #~@mem[1]#~@[4] : #~@mem[0]#~@[4];
  assign dout[4] = rp[1] ? _011_ : _012_;
  assign _013_ = rp[0] ? #~@mem[3]#~@[5] : #~@mem[2]#~@[5];
  assign _014_ = rp[0] ? #~@mem[1]#~@[5] : #~@mem[0]#~@[5];
  assign dout[5] = rp[1] ? _013_ : _014_;
  assign _015_ = rp[0] ? #~@mem[3]#~@[6] : #~@mem[2]#~@[6];
  assign _016_ = rp[0] ? #~@mem[1]#~@[6] : #~@mem[0]#~@[6];
  assign dout[6] = rp[1] ? _015_ : _016_;
  assign _017_ = rp[0] ? #~@mem[3]#~@[7] : #~@mem[2]#~@[7];
  assign _018_ = rp[0] ? #~@mem[1]#~@[7] : #~@mem[0]#~@[7];
  assign dout[7] = rp[1] ? _017_ : _018_;
  assign _019_ = rp[0] ? #~@mem[3]#~@[8] : #~@mem[2]#~@[8];
  assign _020_ = rp[0] ? #~@mem[1]#~@[8] : #~@mem[0]#~@[8];
  assign dout[8] = rp[1] ? _019_ : _020_;
  assign _021_ = we & wp[0];
  assign _022_ = ~we;
  assign _023_ = _022_ | wp[1];
  assign _024_ = _023_ | _021_;
  assign _025_ = din[1] & we;
  assign _064_[0] = _024_ ? #~@mem[0]#~@[1] : _025_;
  assign _026_ = din[2] & we;
  assign _064_[1] = _024_ ? #~@mem[0]#~@[2] : _026_;
  assign _027_ = din[3] & we;
  assign _064_[2] = _024_ ? #~@mem[0]#~@[3] : _027_;
  assign _028_ = din[4] & we;
  assign _064_[3] = _024_ ? #~@mem[0]#~@[4] : _028_;
  assign _029_ = din[5] & we;
  assign _064_[4] = _024_ ? #~@mem[0]#~@[5] : _029_;
  assign _030_ = din[6] & we;
  assign _064_[5] = _024_ ? #~@mem[0]#~@[6] : _030_;
  assign _031_ = din[7] & we;
  assign _064_[6] = _024_ ? #~@mem[0]#~@[7] : _031_;
  assign _032_ = din[8] & we;
  assign _064_[7] = _024_ ? #~@mem[0]#~@[8] : _032_;
  assign _033_ = ~_021_;
  assign _034_ = _023_ | _033_;
  assign _065_[0] = _034_ ? #~@mem[1]#~@[1] : _025_;
  assign _065_[1] = _034_ ? #~@mem[1]#~@[2] : _026_;
  assign _065_[2] = _034_ ? #~@mem[1]#~@[3] : _027_;
  assign _065_[3] = _034_ ? #~@mem[1]#~@[4] : _028_;
  assign _065_[4] = _034_ ? #~@mem[1]#~@[5] : _029_;
  assign _065_[5] = _034_ ? #~@mem[1]#~@[6] : _030_;
  assign _065_[6] = _034_ ? #~@mem[1]#~@[7] : _031_;
  assign _065_[7] = _034_ ? #~@mem[1]#~@[8] : _032_;
  assign _035_ = we & wp[1];
  assign _036_ = ~_035_;
  assign _037_ = _036_ | _021_;
  assign _066_[0] = _037_ ? #~@mem[2]#~@[1] : _025_;
  assign _066_[1] = _037_ ? #~@mem[2]#~@[2] : _026_;
  assign _066_[2] = _037_ ? #~@mem[2]#~@[3] : _027_;
  assign _066_[3] = _037_ ? #~@mem[2]#~@[4] : _028_;
  assign _066_[4] = _037_ ? #~@mem[2]#~@[5] : _029_;
  assign _066_[5] = _037_ ? #~@mem[2]#~@[6] : _030_;
  assign _066_[6] = _037_ ? #~@mem[2]#~@[7] : _031_;
  assign _066_[7] = _037_ ? #~@mem[2]#~@[8] : _032_;
  assign _038_ = _035_ & _021_;
  assign _067_[0] = _038_ ? _025_ : #~@mem[3]#~@[1];
  assign _067_[1] = _038_ ? _026_ : #~@mem[3]#~@[2];
  assign _067_[2] = _038_ ? _027_ : #~@mem[3]#~@[3];
  assign _067_[3] = _038_ ? _028_ : #~@mem[3]#~@[4];
  assign _067_[4] = _038_ ? _029_ : #~@mem[3]#~@[5];
  assign _067_[5] = _038_ ? _030_ : #~@mem[3]#~@[6];
  assign _067_[6] = _038_ ? _031_ : #~@mem[3]#~@[7];
  assign _067_[7] = _038_ ? _032_ : #~@mem[3]#~@[8];
  assign _039_ = ~clr;
  assign _040_ = re ^ rp[0];
  assign _001_[0] = _040_ & _039_;
  assign _041_ = ~re;
  assign _042_ = rp[1] ^ rp[0];
  assign _043_ = _041_ ? rp[1] : _042_;
  assign _001_[1] = _043_ & _039_;
  assign _044_ = wp[1] ^ wp[0];
  assign _045_ = ~_044_;
  assign _046_ = _045_ | rp[1];
  assign _047_ = _044_ | _061_;
  assign _048_ = rp[0] | wp[0];
  assign _049_ = ~rp[0];
  assign _050_ = _049_ | _063_;
  assign _051_ = _050_ & we;
  assign _052_ = _051_ & _048_;
  assign _053_ = _052_ & _047_;
  assign _054_ = _053_ & _046_;
  assign _055_ = _041_ & gb;
  assign _056_ = _055_ | _054_;
  assign _057_ = _039_ & rst;
  assign _000_ = _057_ & _056_;
  assign _058_ = we ^ wp[0];
  assign _002_[0] = _058_ & _039_;
  assign _059_ = _022_ ? wp[1] : _044_;
  assign _002_[1] = _059_ & _039_;
  always @(posedge clk)
      #~@mem[0]#~@[1] <= _064_[0];
  always @(posedge clk)
      #~@mem[0]#~@[2] <= _064_[1];
  always @(posedge clk)
      #~@mem[0]#~@[3] <= _064_[2];
  always @(posedge clk)
      #~@mem[0]#~@[4] <= _064_[3];
  always @(posedge clk)
      #~@mem[0]#~@[5] <= _064_[4];
  always @(posedge clk)
      #~@mem[0]#~@[6] <= _064_[5];
  always @(posedge clk)
      #~@mem[0]#~@[7] <= _064_[6];
  always @(posedge clk)
      #~@mem[0]#~@[8] <= _064_[7];
  always @(posedge clk)
      #~@mem[1]#~@[1] <= _065_[0];
  always @(posedge clk)
      #~@mem[1]#~@[2] <= _065_[1];
  always @(posedge clk)
      #~@mem[1]#~@[3] <= _065_[2];
  always @(posedge clk)
      #~@mem[1]#~@[4] <= _065_[3];
  always @(posedge clk)
      #~@mem[1]#~@[5] <= _065_[4];
  always @(posedge clk)
      #~@mem[1]#~@[6] <= _065_[5];
  always @(posedge clk)
      #~@mem[1]#~@[7] <= _065_[6];
  always @(posedge clk)
      #~@mem[1]#~@[8] <= _065_[7];
  always @(posedge clk)
      #~@mem[2]#~@[1] <= _066_[0];
  always @(posedge clk)
      #~@mem[2]#~@[2] <= _066_[1];
  always @(posedge clk)
      #~@mem[2]#~@[3] <= _066_[2];
  always @(posedge clk)
      #~@mem[2]#~@[4] <= _066_[3];
  always @(posedge clk)
      #~@mem[2]#~@[5] <= _066_[4];
  always @(posedge clk)
      #~@mem[2]#~@[6] <= _066_[5];
  always @(posedge clk)
      #~@mem[2]#~@[7] <= _066_[6];
  always @(posedge clk)
      #~@mem[2]#~@[8] <= _066_[7];
  always @(posedge clk)
      #~@mem[3]#~@[1] <= _067_[0];
  always @(posedge clk)
      #~@mem[3]#~@[2] <= _067_[1];
  always @(posedge clk)
      #~@mem[3]#~@[3] <= _067_[2];
  always @(posedge clk)
      #~@mem[3]#~@[4] <= _067_[3];
  always @(posedge clk)
      #~@mem[3]#~@[5] <= _067_[4];
  always @(posedge clk)
      #~@mem[3]#~@[6] <= _067_[5];
  always @(posedge clk)
      #~@mem[3]#~@[7] <= _067_[6];
  always @(posedge clk)
      #~@mem[3]#~@[8] <= _067_[7];
  always @(posedge clk or negedge rst)
    if (!rst)
      rp[0] <= 0;
    else
      rp[0] <= _001_[0];
  always @(posedge clk or negedge rst)
    if (!rst)
      rp[1] <= 0;
    else
      rp[1] <= _001_[1];
  always @(posedge clk)
      gb <= _000_;
  always @(posedge clk or negedge rst)
    if (!rst)
      wp[0] <= 0;
    else
      wp[0] <= _002_[0];
  always @(posedge clk or negedge rst)
    if (!rst)
      wp[1] <= 0;
    else
      wp[1] <= _002_[1];
endmodule