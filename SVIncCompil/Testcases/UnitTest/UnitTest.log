********************************************
*  SURELOG System Verilog Compiler/Linter  *
********************************************

[INFO :CM0023] Creating log file ./slpp_unit/surelog.log.

[INFO :CM0020] Separate compilation-unit mode is on.

PP PREPROCESS FILE: top.v
PP RECORDING MACRO: declare_bp_fe_be_if: | \
                                                                                             \
  typedef struct packed                                                                            \
  {                                                                                                \
    logic [`bp_fe_fetch_padding_width(vaddr_width_mp, branch_metadata_fwd_width_mp)-1:0]           \
                                              padding;                                             \
  }  bp_fe_fetch_s;                                                                                \
                                                                                                   \

 | 
PP RECORDING MACRO: BSG_MAX: | (((x)>(y)) ? (x) : (y))
 | 
PP RECORDING MACRO: fetch: | \
  (vaddr_width_mp + bp_instr_width_gp + branch_metadata_fwd_width_mp)
 | 
PP RECORDING MACRO: exception: | \
  (vaddr_width_mp + $bits(bp_fe_exception_code_e))
 | 
PP RECORDING MACRO: queue: | \
  (1 + `BSG_MAX(`fetch(vaddr_width_mp,branch_metadata_fwd_width_mp)         \
                , `exception(vaddr_width_mp)                                \
                )                                                                                  \
   )
 | 
PP CALL TO getMacro for queue
PP ARG: vaddr_width_p
PP ARG: branch_metadata_fwd_width_p
Trace:DontMute, EmptyMacro:DontMark, FileLineInfo:Filter , CheckLoop:CheckLoop, AsIsUndefMacro:ComplainUndefinedMacro
PP BODY EXPANSION FOR queue in : top.v
PP ARG: vaddr_width_p
PP ARG: branch_metadata_fwd_width_p
PP PREPROCESS MACRO: 
  (1 + `BSG_MAX(`fetch(vaddr_width_p,branch_metadata_fwd_width_p)         
                , `exception(vaddr_width_p)                                
                )                                                                                  
   )

PP CALL TO getMacro for BSG_MAX
PP ARG: `fetch(vaddr_width_p,branch_metadata_fwd_width_p)         
                
PP ARG: `exception(vaddr_width_p)                                
                
Trace:DontMute, EmptyMacro:DontMark, FileLineInfo:Filter , CheckLoop:CheckLoop, AsIsUndefMacro:ComplainUndefinedMacro
PP PREPROCESS MACRO: `fetch(vaddr_width_p,branch_metadata_fwd_width_p)         
                
PP CALL TO getMacro for fetch
PP ARG: vaddr_width_p
PP ARG: branch_metadata_fwd_width_p
Trace:Mute, EmptyMacro:Mark, FileLineInfo:Filter , CheckLoop:CheckLoop, AsIsUndefMacro:ComplainUndefinedMacro
FIND MACRO: fetch ARGS: vaddr_width_p,branch_metadata_fwd_width_p BODY: |
  (vaddr_width_p + bp_instr_width_gp + branch_metadata_fwd_width_p)
|
PP RESULT for macro `fetch(vaddr_width_p,branch_metadata_fwd_width_p)         
                 : 
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

  (vaddr_width_p + bp_instr_width_gp + branch_metadata_fwd_width_p)
         
                
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

PP PREPROCESS MACRO: `exception(vaddr_width_p)                                
                
PP CALL TO getMacro for exception
PP ARG: vaddr_width_p
Trace:Mute, EmptyMacro:Mark, FileLineInfo:Filter , CheckLoop:CheckLoop, AsIsUndefMacro:ComplainUndefinedMacro
FIND MACRO: exception ARGS: vaddr_width_p BODY: |
  (vaddr_width_p + $bits(bp_fe_exception_code_e))
|
PP RESULT for macro `exception(vaddr_width_p)                                
                 : 
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

  (vaddr_width_p + $bits(bp_fe_exception_code_e))
                                
                
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

FIND MACRO: BSG_MAX ARGS: `fetch(vaddr_width_p,branch_metadata_fwd_width_p)         
                , `exception(vaddr_width_p)                                
                 BODY: |(((
  (vaddr_width_p + bp_instr_width_gp + branch_metadata_fwd_width_p)
         
                )>(
  (vaddr_width_p + $bits(bp_fe_exception_code_e))
                                
                )) ? (
  (vaddr_width_p + bp_instr_width_gp + branch_metadata_fwd_width_p)
         
                ) : (
  (vaddr_width_p + $bits(bp_fe_exception_code_e))
                                
                ))
|
PP CALL TO getMacro for fetch
PP ARG: vaddr_width_p
PP ARG: branch_metadata_fwd_width_p
Trace:DontMute, EmptyMacro:DontMark, FileLineInfo:Filter , CheckLoop:CheckLoop, AsIsUndefMacro:ComplainUndefinedMacro
FIND MACRO: fetch ARGS: vaddr_width_p,branch_metadata_fwd_width_p BODY: |
  (vaddr_width_p + bp_instr_width_gp + branch_metadata_fwd_width_p)
|
PP CALL TO getMacro for exception
PP ARG: vaddr_width_p
Trace:DontMute, EmptyMacro:DontMark, FileLineInfo:Filter , CheckLoop:CheckLoop, AsIsUndefMacro:ComplainUndefinedMacro
FIND MACRO: exception ARGS: vaddr_width_p BODY: |
  (vaddr_width_p + $bits(bp_fe_exception_code_e))
|
PP RESULT for macro 
  (1 + `BSG_MAX(`fetch(vaddr_width_p,branch_metadata_fwd_width_p)         
                , `exception(vaddr_width_p)                                
                )                                                                                  
   )
 : 
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

  (1 + (((
  (vaddr_width_p + bp_instr_width_gp + branch_metadata_fwd_width_p)
         
                )>(
  (vaddr_width_p + $bits(bp_fe_exception_code_e))
                                
                )) ? (
  (vaddr_width_p + bp_instr_width_gp + branch_metadata_fwd_width_p)
         
                ) : (
  (vaddr_width_p + $bits(bp_fe_exception_code_e))
                                
                ))
                                                                                  
   )

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

FIND MACRO: queue ARGS: vaddr_width_p, branch_metadata_fwd_width_p BODY: |
  (1 + (((
  (vaddr_width_p + bp_instr_width_gp + branch_metadata_fwd_width_p)
         
                )>(
  (vaddr_width_p + $bits(bp_fe_exception_code_e))
                                
                )) ? (
  (vaddr_width_p + bp_instr_width_gp + branch_metadata_fwd_width_p)
         
                ) : (
  (vaddr_width_p + $bits(bp_fe_exception_code_e))
                                
                ))
                                                                                  
   )
|
[WARNI:PP0113] top.v:2 Unused macro argument "asid_width_mp".

[WARNI:PP0113] top.v:2 Unused macro argument "paddr_width_mp".

PP RESULT for file top.v : 
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv




   

   

class c2;

//`declare_bp_fe_be_if(vaddr_width_p, paddr_width_p, asid_width_p, branch_metadata_fwd_width_p);
   

  (1 + (((
  (vaddr_width_p + bp_instr_width_gp + branch_metadata_fwd_width_p)
         
                )>(
  (vaddr_width_p + $bits(bp_fe_exception_code_e))
                                
                )) ? (
  (vaddr_width_p + bp_instr_width_gp + branch_metadata_fwd_width_p)
         
                ) : (
  (vaddr_width_p + $bits(bp_fe_exception_code_e))
                                
                ))
                                                                                  
   )
;                          
 endclass




^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

[ERROR:PA0207] top.v:12 Syntax error: mismatched input '(' expecting {';', 'extern', 'virtual', 'class', 'endclass', 'type', 'const', 'function', 'new', 'static', 'protected', 'local', 'rand', 'randc', 'constraint', 'automatic', 'localparam', 'parameter', 'import', 'typedef', 'enum', 'struct', 'union', 'string', 'chandle', 'event', '[', 'byte', 'shortint', 'int', 'longint', 'integer', 'time', 'bit', 'logic', 'reg', 'shortreal', 'real', 'realtime', 'signed', 'unsigned', 'var', 'context', 'pure', DOLLAR_UNIT, '(*', 'expect', 'covergroup', 'soft', 'global', 'do', 'this', 'randomize', 'final', 'task', 'sample', 'nettype', Escaped_identifier, Simple_identifier, SURELOG_MACRO_NOT_DEFINED},
  (1 + (((
  ^-- ./slpp_unit/work/top.v:14 col:2.

[INFO :CP0300] Compilation...

[INFO :CP0302] top.v:9 Compile class "work@c2".

[INFO :EL0526] Design Elaboration...

[NOTE :EL0508] Nb Top level modules: 0.

[NOTE :EL0509] Max instance depth: 0.

[NOTE :EL0510] Nb instances: 0.

[NOTE :EL0511] Nb leaf instances: 0.

[  FATAL] : 0
[  ERROR] : 1
[WARNING] : 2
[   NOTE] : 4

********************************************
*   End SURELOG SVerilog Compiler/Linter   *
********************************************

0.23user 0.01system 0:00.24elapsed 100%CPU (0avgtext+0avgdata 45664maxresident)k
0inputs+16outputs (0major+10190minor)pagefaults 0swaps
