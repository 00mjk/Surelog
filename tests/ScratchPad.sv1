
module FullAdder(A,B,Cin,Sum,Cout);
   input [3:0]A,B;
   input Cin;
   output wire [3:0]Sum;
   output wire Cout;
   wire [4:0]temp;
   assign temp=A+B+Cin;
   assign Sum=temp[3:0];
   assign Cout=temp[4];
   endmodule


module bp_be_csr
   import bp_common_pkg::*;
   import bp_common_aviary_pkg::*;
   import bp_common_rv64_pkg::*;
   import bp_be_pkg::*;
   #(parameter bp_cfg_e cfg_p = e_bp_inv_cfg
     
   , localparam bp_proc_param_s proc_param_lp = all_cfgs_gp[cfg_p]                            
                                                                                                    
   , localparam num_core_p = proc_param_lp.num_core                                                 
   , localparam num_cce_p  = proc_param_lp.num_cce                                                  
   , localparam num_lce_p  = proc_param_lp.num_lce                                                  
                                                                                                    
   , localparam vaddr_width_p = proc_param_lp.vaddr_width                                           
   , localparam paddr_width_p = proc_param_lp.paddr_width                                           
   , localparam asid_width_p  = proc_param_lp.asid_width                                            
                                                                                                    
   , localparam branch_metadata_fwd_width_p = proc_param_lp.branch_metadata_fwd_width               
   , localparam btb_tag_width_p             = proc_param_lp.btb_tag_width                           
   , localparam btb_idx_width_p             = proc_param_lp.btb_idx_width                           
   , localparam bht_idx_width_p             = proc_param_lp.bht_idx_width                           
   , localparam ras_idx_width_p             = proc_param_lp.ras_idx_width                           
                                                                                                    
   , localparam itlb_els_p              = proc_param_lp.itlb_els                                    
   , localparam dtlb_els_p              = proc_param_lp.dtlb_els                                    
                                                                                                    
   , localparam lce_sets_p              = proc_param_lp.lce_sets                                    
   , localparam lce_assoc_p             = proc_param_lp.lce_assoc                                   
   , localparam cce_block_width_p       = proc_param_lp.cce_block_width                             
   , localparam num_cce_instr_ram_els_p = proc_param_lp.num_cce_instr_ram_els                       
                                                                                                    
   , localparam fe_queue_fifo_els_p = proc_param_lp.fe_queue_fifo_els                               
   , localparam fe_cmd_fifo_els_p   = proc_param_lp.fe_cmd_fifo_els                                 
                                                                                                    
   , localparam async_coh_clk_p        = proc_param_lp.async_coh_clk                                
   , localparam coh_noc_flit_width_p   = proc_param_lp.coh_noc_flit_width                           
   , localparam coh_noc_cid_width_p    = proc_param_lp.coh_noc_cid_width                            
   , localparam coh_noc_len_width_p    = proc_param_lp.coh_noc_len_width                            
   , localparam coh_noc_y_cord_width_p = proc_param_lp.coh_noc_y_cord_width                         
   , localparam coh_noc_x_cord_width_p = proc_param_lp.coh_noc_x_cord_width                         
   , localparam coh_noc_y_dim_p        = proc_param_lp.coh_noc_y_dim                                
   , localparam coh_noc_x_dim_p        = proc_param_lp.coh_noc_x_dim                                
   , localparam coh_noc_cord_width_p   = coh_noc_x_cord_width_p + coh_noc_y_cord_width_p            
   , localparam coh_noc_dims_p         = 2                                                          
   , localparam coh_noc_dirs_p         = coh_noc_dims_p*2 + 1                                       
   , localparam int coh_noc_cord_markers_pos_p[coh_noc_dims_p:0] =                                  
       '{coh_noc_cord_width_p, coh_noc_x_cord_width_p, 0}                                           
                                                                                                    
   , localparam cfg_core_width_p = proc_param_lp.cfg_core_width                                     
   , localparam cfg_addr_width_p = proc_param_lp.cfg_addr_width                                     
   , localparam cfg_data_width_p = proc_param_lp.cfg_data_width                                     
                                                                                                    
   , localparam async_mem_clk_p           = proc_param_lp.async_mem_clk                             
   , localparam mem_noc_max_credits_p     = proc_param_lp.mem_noc_max_credits                       
   , localparam mem_noc_flit_width_p      = proc_param_lp.mem_noc_flit_width                        
   , localparam mem_noc_reserved_width_p  = proc_param_lp.mem_noc_reserved_width                    
   , localparam mem_noc_cid_width_p       = proc_param_lp.mem_noc_cid_width                         
   , localparam mem_noc_len_width_p       = proc_param_lp.mem_noc_len_width                         
   , localparam mem_noc_y_cord_width_p    = proc_param_lp.mem_noc_y_cord_width                      
   , localparam mem_noc_x_cord_width_p    = proc_param_lp.mem_noc_x_cord_width                      
   , localparam mem_noc_y_dim_p           = proc_param_lp.mem_noc_y_dim                             
   , localparam mem_noc_x_dim_p           = proc_param_lp.mem_noc_x_dim                             
   , localparam mem_noc_cord_width_p      = mem_noc_x_cord_width_p + mem_noc_y_cord_width_p         
   , localparam mem_noc_dims_p            = 2                                                       
   , localparam mem_noc_dirs_p            = mem_noc_dims_p*2 + 1                                    
   , localparam int mem_noc_cord_markers_pos_p[mem_noc_dims_p:0] =                                  
       '{mem_noc_cord_width_p, mem_noc_x_cord_width_p, 0}                                           
                                                                                                    
   , localparam num_mem_p    = mem_noc_x_dim_p + 2                                                  
   , localparam mmio_x_pos_p = (mem_noc_x_dim_p+1)/2                                                
                                                                                                    
   , localparam dword_width_p       = 64                                                            
   , localparam instr_width_p       = 32                                                            
   , localparam reg_addr_width_p    = 5                                                             
   , localparam page_offset_width_p = 12                                                            
                                                                                                    
   , localparam vtag_width_p  = proc_param_lp.vaddr_width - page_offset_width_p                     
   , localparam ptag_width_p  = proc_param_lp.paddr_width - page_offset_width_p                     
 
 
     , localparam fu_op_width_lp = 
   (((($bits(bp_be_int_fu_op_e))>(((($bits(bp_be_mmu_fu_op_e))>($bits(bp_be_csr_fu_op_e))) ? ($bits(bp_be_mmu_fu_op_e)) : ($bits(bp_be_csr_fu_op_e))))) ? ($bits(bp_be_int_fu_op_e)) : (((($bits(bp_be_mmu_fu_op_e))>($bits(bp_be_csr_fu_op_e))) ? ($bits(bp_be_mmu_fu_op_e)) : ($bits(bp_be_csr_fu_op_e))))))
 
     , localparam csr_cmd_width_lp = 
   (
   (((($bits(bp_be_int_fu_op_e))>(((($bits(bp_be_mmu_fu_op_e))>($bits(bp_be_csr_fu_op_e))) ? ($bits(bp_be_mmu_fu_op_e)) : ($bits(bp_be_csr_fu_op_e))))) ? ($bits(bp_be_int_fu_op_e)) : (((($bits(bp_be_mmu_fu_op_e))>($bits(bp_be_csr_fu_op_e))) ? ($bits(bp_be_mmu_fu_op_e)) : ($bits(bp_be_csr_fu_op_e))))))
  + rv64_csr_addr_width_gp + rv64_reg_data_width_gp)
 
     , localparam ecode_dec_width_lp = 
   ($bits(bp_be_ecode_dec_s))
 
 
     , localparam satp_width_lp  = ($bits(bp_satp_s))
 
     , localparam hartid_width_lp = ( ((num_core_p)==1) ? 1 : $clog2((num_core_p)))
     )
    (input                            clk_i
     , input                          reset_i
 
     // CSR instruction interface
     , input [csr_cmd_width_lp-1:0]   csr_cmd_i
     , input                          csr_cmd_v_i
     , output                         csr_cmd_ready_o
 
     , output [dword_width_p-1:0]     data_o
     , output                         v_o
     , output logic                   illegal_instr_o
 
     // Misc interface
     , input [hartid_width_lp-1:0]    hartid_i
     , input                          instret_i
 
     , input                          exception_v_i
     , input [vaddr_width_p-1:0]      exception_pc_i
     , input [vaddr_width_p-1:0]      exception_vaddr_i
     , input [instr_width_p-1:0]      exception_instr_i
     , input [ecode_dec_width_lp-1:0] exception_ecode_dec_i
 
     , input                          timer_int_i
     , input                          software_int_i
     , input                          external_int_i
     , input [vaddr_width_p-1:0]      interrupt_pc_i
 
     , output [rv64_priv_width_gp-1:0]   priv_mode_o
     , output logic                      trap_v_o
     , output logic                      ret_v_o
     , output logic [vaddr_width_p-1:0]  epc_o
     , output logic [vaddr_width_p-1:0]  tvec_o
     , output [satp_width_lp-1:0]        satp_o
     , output                            translation_en_o
     , output logic                      tlb_fence_o
     );
 
 // Declare parameterizable structs
 
   typedef struct packed                                                                            
   {                                                                                                
     logic [vaddr_width_p-( ((lce_sets_p*cce_block_width_p/8)==1) ? 1 : $clog2((lce_sets_p*cce_block_width_p/8)))-1:0] tag;                
     logic [( ((lce_sets_p)==1) ? 1 : $clog2((lce_sets_p)))-1:0]                                       index;              
     logic [( ((cce_block_width_p/8)==1) ? 1 : $clog2((cce_block_width_p/8)))-1:0]                        offset;             
   }  bp_be_mmu_vaddr_s;                                                                            
                                                                                                    
   typedef struct packed                                                                            
   {                                                                                                
     bp_be_fu_op_s                      mem_op;                                                     
     bp_be_mmu_vaddr_s                  vaddr;                                                      
     logic [rv64_reg_data_width_gp-1:0] data;                                                       
   }  bp_be_mmu_cmd_s;                                                                              
                                                                                                    
   typedef struct packed                                                                            
   {                                                                                                
     bp_be_fu_op_s                      csr_op;                                                     
     logic [rv64_csr_addr_width_gp-1:0] csr_addr;                                                   
     logic [rv64_reg_data_width_gp-1:0] data;                                                       
   }  bp_be_csr_cmd_s;                                                                              
                                                                                                    
   typedef struct packed                                                                            
   {                                                                                                
     logic                              exc_v;                                                      
     logic                              miss_v;                                                     
     logic [rv64_reg_data_width_gp-1:0] data;                                                       
   }  bp_be_mem_resp_s;                                                                                                  
   
 
 
 // Casting input and output ports
 bp_be_csr_cmd_s csr_cmd;
 bp_be_ecode_dec_s exception_ecode_dec_cast_i;
 
 assign csr_cmd = csr_cmd_i;
 assign exception_ecode_dec_cast_i = exception_ecode_dec_i;
 
 // The muxed and demuxed CSR outputs
 logic [dword_width_p-1:0] csr_data_li, csr_data_lo;
 
 rv64_mstatus_s sstatus_wmask_li, sstatus_rmask_li;
 rv64_mie_s sie_wmask_li, sie_rmask_li;
 rv64_mip_s sip_wmask_li, sip_rmask_li;;
 
 logic [1:0] priv_mode_n, priv_mode_r;
 
 assign priv_mode_o = priv_mode_r;
 
 wire is_m_mode = (priv_mode_r == 2'b11);
 wire is_s_mode = (priv_mode_r == 2'b01);
 wire is_u_mode = (priv_mode_r == 1'b0);
 
 wire mti_v = mstatus_r.mie & mie_r.mtie & mip_r.mtip;
 wire msi_v = mstatus_r.mie & mie_r.msie & mip_r.msip;
 wire mei_v = mstatus_r.mie & mie_r.meie & mip_r.meip;
 
 wire sti_v = mstatus_r.sie & mie_r.stie & mip_r.stip;
 wire ssi_v = mstatus_r.sie & mie_r.ssie & mip_r.ssip;
 wire sei_v = mstatus_r.sie & mie_r.seie & mip_r.seip;
 
 wire [15:0] exception_icode_dec_li =
   {4'b0
 
    ,mei_v & ~mideleg_lo.mei
    ,1'b0
    ,sei_v &  mideleg_lo.sei
    ,1'b0
 
    ,mti_v & ~mideleg_lo.mti
    ,1'b0 // Reserved
    ,sti_v &  mideleg_lo.sei
    ,1'b0
 
    ,msi_v & ~mideleg_lo.msi
    ,1'b0 // Reserved
    ,ssi_v &  mideleg_lo.ssi
    ,1'b0
    };
 
 logic [3:0] exception_ecode_li;
 logic       exception_ecode_v_li;
 bsg_priority_encode 
  #(.width_p(ecode_dec_width_lp)
    ,.lo_to_hi_p(1)
    )
  mcause_exception_enc
   (.i(exception_ecode_dec_i)
    ,.addr_o(exception_ecode_li)
    ,.v_o(exception_ecode_v_li)
    );
 
 // TODO: This priority encoder needs to be swizzled, right now it is non-compliant with the spec...
 logic [3:0] exception_icode_li;
 logic       exception_icode_v_li;
 bsg_priority_encode
  #(.width_p(ecode_dec_width_lp)
    ,.lo_to_hi_p(1)
    )
  mcause_interrupt_enc
   (.i(exception_icode_dec_li)
    ,.addr_o(exception_icode_li)
    ,.v_o(exception_icode_v_li)
    );
 
 // Compute input CSR data
 wire [dword_width_p-1:0] csr_imm_li = dword_width_p'(csr_cmd.data[4:0]);
 always_comb 
   begin
     unique casez (csr_cmd.csr_op)
       e_csrrw : csr_data_li =  csr_cmd.data;
       e_csrrs : csr_data_li =  csr_cmd.data | csr_data_lo;
       e_csrrc : csr_data_li = ~csr_cmd.data & csr_data_lo;
 
       e_csrrwi: csr_data_li =  csr_imm_li;
       e_csrrsi: csr_data_li =  csr_imm_li | csr_data_lo;
       e_csrrci: csr_data_li = ~csr_imm_li & csr_data_lo;
       default : csr_data_li = '0;
     endcase
   end
 
 // sstatus subset of mstatus
 // sedeleg hardcoded to 0
 // sideleg hardcoded to 0
 // sie subset of mie
 
                                                    
   rv64_stvec_s stvec_li, stvec_lo;                                
   bp_stvec_s stvec_n, stvec_r;                                    
   bsg_dff_reset                                                                                 
    #(.width_p($bits(bp_stvec_s)))                                                     
   stvec_reg                                                                           
     (.clk_i(clk_i), .reset_i(reset_i), .data_i(stvec_n), .data_o(stvec_r)); 
   assign stvec_lo = 
   rv64_stvec_s'{base : {22'h0, stvec_r.base} 
                 ,mode: 2'b00                      
                 }
 ;                 
   assign stvec_n  = 
   bp_stvec_s'{base: stvec_li.base[0+:39]}
 ;                  
   
 
 
                                                 
   rv64_scounteren_s scounteren_li, scounteren_lo;                                
   bp_scounteren_s scounteren_n, scounteren_r;                                    
   bsg_dff_reset                                                                                 
    #(.width_p($bits(bp_scounteren_s)))                                                     
   scounteren_reg                                                                           
     (.clk_i(clk_i), .reset_i(reset_i), .data_i(scounteren_n), .data_o(scounteren_r)); 
   assign scounteren_lo = 
   rv64_scounteren_s'{ir : scounteren_r.ir 
                      ,cy: scounteren_r.cy 
                      ,default: '0         
                      };
 ;                 
   assign scounteren_n  = 
   bp_scounteren_s'{ir : scounteren_li.ir 
                    ,cy: scounteren_li.cy 
                    };
 ;                  
   
 
 
 
                                               
   rv64_sscratch_s sscratch_li, sscratch_lo;                                
   bp_sscratch_s sscratch_n, sscratch_r;                                    
   bsg_dff_reset                                                                                 
    #(.width_p($bits(bp_sscratch_s)))                                                     
   sscratch_reg                                                                           
     (.clk_i(clk_i), .reset_i(reset_i), .data_i(sscratch_n), .data_o(sscratch_r)); 
   assign sscratch_lo = 
   64'(sscratch_r)
 ;                 
   assign sscratch_n  = 
   sscratch_li[0+:64]
 ;                  
                                          
   rv64_sepc_s sepc_li, sepc_lo;                                
   bp_sepc_s sepc_n, sepc_r;                                    
   bsg_dff_reset                                                                                 
    #(.width_p($bits(bp_sepc_s)))                                                     
   sepc_reg                                                                           
     (.clk_i(clk_i), .reset_i(reset_i), .data_i(sepc_n), .data_o(sepc_r)); 
   assign sepc_lo = 
   64'(sepc_r)
 ;                 
   assign sepc_n  = 
   sepc_li[0+:39]
 ;                  
                                                               
   rv64_scause_s scause_li, scause_lo;                                
   bp_scause_s scause_n, scause_r;                                    
   bsg_dff_reset                                                                                 
    #(.width_p($bits(bp_scause_s)))                                                     
   scause_reg                                                                           
     (.clk_i(clk_i), .reset_i(reset_i), .data_i(scause_n), .data_o(scause_r)); 
   assign scause_lo = 
   rv64_scause_s'{_interrupt: scause_r._interrupt 
                  ,ecode: 63'(scause_r.ecode)   
                  }
 ;                 
   assign scause_n  = 
   bp_scause_s'{_interrupt: scause_li._interrupt 
                ,ecode: scause_li.ecode[0+:4]  
                }
 ;                  
                                                          
   rv64_stval_s stval_li, stval_lo;                                
   bp_stval_s stval_n, stval_r;                                    
   bsg_dff_reset                                                                                 
    #(.width_p($bits(bp_stval_s)))                                                     
   stval_reg                                                                           
     (.clk_i(clk_i), .reset_i(reset_i), .data_i(stval_n), .data_o(stval_r)); 
   assign stval_lo = 
   64'(stval_r)
 ;                 
   assign stval_n  = 
   stval_li[0+:39]
 ;                  
                                                              
   rv64_satp_s satp_li, satp_lo;                                
   bp_satp_s satp_n, satp_r;                                    
   bsg_dff_reset                                                                                 
    #(.width_p($bits(bp_satp_s)))                                                     
   satp_reg                                                                           
     (.clk_i(clk_i), .reset_i(reset_i), .data_i(satp_n), .data_o(satp_r)); 
   assign satp_lo = 
   rv64_satp_s'{mode: {satp_r.mode, 3'b000} 
                ,ppn: {16'h0, satp_r.ppn}   
                ,default: '0                      
                }
 ;                 
   assign satp_n  = 
   bp_satp_s'{mode: satp_li.mode[3]   
              ,ppn: satp_li.ppn[27:0] 
              }
 ;                  
                                                            
   rv64_mstatus_s mstatus_li, mstatus_lo;                                
   bp_mstatus_s mstatus_n, mstatus_r;                                    
   bsg_dff_reset                                                                                 
    #(.width_p($bits(bp_mstatus_s)))                                                     
   mstatus_reg                                                                           
     (.clk_i(clk_i), .reset_i(reset_i), .data_i(mstatus_n), .data_o(mstatus_r)); 
   assign mstatus_lo = 
   rv64_mstatus_s'{sxl  : 2'b10             
                   ,uxl : 2'b10             
                   ,mprv: mstatus_r.mprv 
                   ,mpp : mstatus_r.mpp  
                   ,spp : mstatus_r.spp  
                   ,mpie: mstatus_r.mpie 
                   ,spie: mstatus_r.spie 
                   ,mie : mstatus_r.mie  
                   ,sie : mstatus_r.sie  
                   ,default: '0             
                   }
 ;                 
   assign mstatus_n  = 
   bp_mstatus_s'{mprv : mstatus_li.mprv 
                 ,mpp : mstatus_li.mpp  
                 ,spp : mstatus_li.spp  
                 ,mpie: mstatus_li.mpie 
                 ,spie: mstatus_li.spie 
                 ,mie : mstatus_li.mie  
                 ,sie : mstatus_li.sie  
                 }
 ;                  
                                                          
   rv64_medeleg_s medeleg_li, medeleg_lo;                                
   bp_medeleg_s medeleg_n, medeleg_r;                                    
   bsg_dff_reset                                                                                 
    #(.width_p($bits(bp_medeleg_s)))                                                     
   medeleg_reg                                                                           
     (.clk_i(clk_i), .reset_i(reset_i), .data_i(medeleg_n), .data_o(medeleg_r)); 
   assign medeleg_lo = 
   rv64_medeleg_s'({medeleg_r.deleg_15      
                    ,1'b0                      
                    ,medeleg_r.deleg_13to12 
                    ,2'b0                      
                    ,medeleg_r.deleg_9to0   
                    });
 ;                 
   assign medeleg_n  = 
   bp_medeleg_s'{deleg_15     : medeleg_li[15]    
                 ,deleg_13to12: medeleg_li[13:12] 
                 ,deleg_9to0  : medeleg_li[9:0]   
                 };
 ;                  
                                                             
   rv64_mideleg_s mideleg_li, mideleg_lo;                                
   bp_mideleg_s mideleg_n, mideleg_r;                                    
   bsg_dff_reset                                                                                 
    #(.width_p($bits(bp_mideleg_s)))                                                     
   mideleg_reg                                                                           
     (.clk_i(clk_i), .reset_i(reset_i), .data_i(mideleg_n), .data_o(mideleg_r)); 
   assign mideleg_lo = 
   rv64_mideleg_s'{mei : mideleg_r.mei 
                   ,sei: mideleg_r.sei 
                                          
                   ,mti: mideleg_r.mti 
                   ,sti: mideleg_r.sti 
                                          
                   ,msi: mideleg_r.msi 
                   ,ssi: mideleg_r.ssi 
                   ,default: '0           
                   }
 ;                 
   assign mideleg_n  = 
   bp_mideleg_s'{mei : mideleg_li.mei 
                 ,sei: mideleg_li.sei 
                                        
                 ,mti: mideleg_li.mti 
                 ,sti: mideleg_li.sti 
                                        
                 ,msi: mideleg_li.msi 
                 ,ssi: mideleg_li.ssi 
                 }
 ;                  
                                                       
   rv64_mie_s mie_li, mie_lo;                                
   bp_mie_s mie_n, mie_r;                                    
   bsg_dff_reset                                                                                 
    #(.width_p($bits(bp_mie_s)))                                                     
   mie_reg                                                                           
     (.clk_i(clk_i), .reset_i(reset_i), .data_i(mie_n), .data_o(mie_r)); 
   assign mie_lo = 
   rv64_mie_s'{meie : mie_r.meie 
               ,seie: mie_r.seie 
                                        
               ,mtie: mie_r.mtie 
               ,stie: mie_r.stie 
                                        
               ,msie: mie_r.msie 
               ,ssie: mie_r.ssie 
               ,default: '0             
               }
 ;                 
   assign mie_n  = 
   bp_mie_s'{meie : mie_li.meie 
             ,seie: mie_li.seie 
                                      
             ,mtie: mie_li.mtie 
             ,stie: mie_li.stie 
                                      
             ,msie: mie_li.msie 
             ,ssie: mie_li.ssie 
             }
 ;                  
                                                               
   rv64_mtvec_s mtvec_li, mtvec_lo;                                
   bp_mtvec_s mtvec_n, mtvec_r;                                    
   bsg_dff_reset                                                                                 
    #(.width_p($bits(bp_mtvec_s)))                                                     
   mtvec_reg                                                                           
     (.clk_i(clk_i), .reset_i(reset_i), .data_i(mtvec_n), .data_o(mtvec_r)); 
   assign mtvec_lo = 
   rv64_mtvec_s'{base : {22'h0, mtvec_r.base} 
                 ,mode: 2'b00                      
                 }
 ;                 
   assign mtvec_n  = 
   bp_mtvec_s'{base: mtvec_li.base[0+:39]}
 ;                  
                                                         
   rv64_mcounteren_s mcounteren_li, mcounteren_lo;                                
   bp_mcounteren_s mcounteren_n, mcounteren_r;                                    
   bsg_dff_reset                                                                                 
    #(.width_p($bits(bp_mcounteren_s)))                                                     
   mcounteren_reg                                                                           
     (.clk_i(clk_i), .reset_i(reset_i), .data_i(mcounteren_n), .data_o(mcounteren_r)); 
   assign mcounteren_lo = 
   rv64_mcounteren_s'{ir : mcounteren_r.ir 
                      ,cy: mcounteren_r.cy 
                      ,default: '0         
                      };
 ;                 
   assign mcounteren_n  = 
   bp_mcounteren_s'{ir : mcounteren_li.ir 
                    ,cy: mcounteren_li.cy 
                    };
 ;                  
                                                            
   rv64_mscratch_s mscratch_li, mscratch_lo;                                
   bp_mscratch_s mscratch_n, mscratch_r;                                    
   bsg_dff_reset                                                                                 
    #(.width_p($bits(bp_mscratch_s)))                                                     
   mscratch_reg                                                                           
     (.clk_i(clk_i), .reset_i(reset_i), .data_i(mscratch_n), .data_o(mscratch_r)); 
   assign mscratch_lo = 
   64'(mscratch_r)
 ;                 
   assign mscratch_n  = 
   mscratch_li[0+:64]
 ;                  
                                                      
   rv64_mepc_s mepc_li, mepc_lo;                                
   bp_mepc_s mepc_n, mepc_r;                                    
   bsg_dff_reset                                                                                 
    #(.width_p($bits(bp_mepc_s)))                                                     
   mepc_reg                                                                           
     (.clk_i(clk_i), .reset_i(reset_i), .data_i(mepc_n), .data_o(mepc_r)); 
   assign mepc_lo = 
   64'($signed(mepc_r))
 ;                 
   assign mepc_n  = 
   bp_mepc_s'{sgn: mepc_li[39], addr: mepc_li[0+:40]} 
 ;                  
                                                                
   rv64_mcause_s mcause_li, mcause_lo;                                
   bp_mcause_s mcause_n, mcause_r;                                    
   bsg_dff_reset                                                                                 
    #(.width_p($bits(bp_mcause_s)))                                                     
   mcause_reg                                                                           
     (.clk_i(clk_i), .reset_i(reset_i), .data_i(mcause_n), .data_o(mcause_r)); 
   assign mcause_lo = 
   rv64_mcause_s'{_interrupt: mcause_r._interrupt 
                  ,ecode: 63'(mcause_r.ecode)   
                  }
 ;                 
   assign mcause_n  = 
   bp_mcause_s'{_interrupt: mcause_li._interrupt 
                ,ecode: mcause_li.ecode[0+:4]  
                }
 ;                  
                                                              
   rv64_mtval_s mtval_li, mtval_lo;                                
   bp_mtval_s mtval_n, mtval_r;                                    
   bsg_dff_reset                                                                                 
    #(.width_p($bits(bp_mtval_s)))                                                     
   mtval_reg                                                                           
     (.clk_i(clk_i), .reset_i(reset_i), .data_i(mtval_n), .data_o(mtval_r)); 
   assign mtval_lo = 
   64'($signed(mtval_r))
 ;                 
   assign mtval_n  = 
   bp_mtval_s'{sgn: mtval_li[39], addr: mtval_li[0+:40]}
 ;                  
                                                      
   rv64_mip_s mip_li, mip_lo;                                
   bp_mip_s mip_n, mip_r;                                    
   bsg_dff_reset                                                                                 
    #(.width_p($bits(bp_mip_s)))                                                     
   mip_reg                                                                           
     (.clk_i(clk_i), .reset_i(reset_i), .data_i(mip_n), .data_o(mip_r)); 
   assign mip_lo = 
   rv64_mip_s'{meip : mip_r.meip 
               ,seip: mip_r.seip 
                                        
               ,mtip: mip_r.mtip 
               ,stip: mip_r.stip 
                                        
               ,msip: mip_r.msip 
               ,ssip: mip_r.ssip 
               ,default: '0             
               }
 ;                 
   assign mip_n  = 
   bp_mip_s'{meip : mip_li.meip 
             ,seip: mip_li.seip 
                                      
             ,mtip: mip_li.mtip 
             ,stip: mip_li.stip 
                                      
             ,msip: mip_li.msip 
             ,ssip: mip_li.ssip 
             }
 ;                  
                                                     
   rv64_pmpcfg0_s pmpcfg0_li, pmpcfg0_lo;                                
   bp_pmpcfg0_s pmpcfg0_n, pmpcfg0_r;                                    
   bsg_dff_reset                                                                                 
    #(.width_p($bits(bp_pmpcfg0_s)))                                                     
   pmpcfg0_reg                                                                           
     (.clk_i(clk_i), .reset_i(reset_i), .data_i(pmpcfg0_n), .data_o(pmpcfg0_r)); 
   assign pmpcfg0_lo = 
   rv64_pmpcfg_s'{pmpcfg: ($bits(rv64_pmpcfg_entry_s)*8)'(pmpcfg0_r.pmpcfg)}
 ;                 
   assign pmpcfg0_n  = 
   bp_pmpcfg_s'{pmpcfg: pmpcfg0_li.pmpcfg[0+:4]}
 ;                  
                                                     
   rv64_pmpaddr0_s pmpaddr0_li, pmpaddr0_lo;                                
   bp_pmpaddr0_s pmpaddr0_n, pmpaddr0_r;                                    
   bsg_dff_reset                                                                                 
    #(.width_p($bits(bp_pmpaddr0_s)))                                                     
   pmpaddr0_reg                                                                           
     (.clk_i(clk_i), .reset_i(reset_i), .data_i(pmpaddr0_n), .data_o(pmpaddr0_r)); 
   assign pmpaddr0_lo = 
   rv64_pmpaddr_s'{addr_55_2: 54'(pmpaddr0_r.addr_39_2) 
                   ,default: '0                           
                   }
 ;                 
   assign pmpaddr0_n  = 
   bp_pmpaddr_s'{addr_39_2: pmpaddr0_li.addr_55_2[0+:38]}
 ;                  
                                                     
   rv64_pmpaddr1_s pmpaddr1_li, pmpaddr1_lo;                                
   bp_pmpaddr1_s pmpaddr1_n, pmpaddr1_r;                                    
   bsg_dff_reset                                                                                 
    #(.width_p($bits(bp_pmpaddr1_s)))                                                     
   pmpaddr1_reg                                                                           
     (.clk_i(clk_i), .reset_i(reset_i), .data_i(pmpaddr1_n), .data_o(pmpaddr1_r)); 
   assign pmpaddr1_lo = 
   rv64_pmpaddr_s'{addr_55_2: 54'(pmpaddr1_r.addr_39_2) 
                   ,default: '0                           
                   }
 ;                 
   assign pmpaddr1_n  = 
   bp_pmpaddr_s'{addr_39_2: pmpaddr1_li.addr_55_2[0+:38]}
 ;                  
                                            
   rv64_pmpaddr2_s pmpaddr2_li, pmpaddr2_lo;                                
   bp_pmpaddr2_s pmpaddr2_n, pmpaddr2_r;                                    
   bsg_dff_reset                                                                                 
    #(.width_p($bits(bp_pmpaddr2_s)))                                                     
   pmpaddr2_reg                                                                           
     (.clk_i(clk_i), .reset_i(reset_i), .data_i(pmpaddr2_n), .data_o(pmpaddr2_r)); 
   assign pmpaddr2_lo = 
   rv64_pmpaddr_s'{addr_55_2: 54'(pmpaddr2_r.addr_39_2) 
                   ,default: '0                           
                   }
 ;                 
   assign pmpaddr2_n  = 
   bp_pmpaddr_s'{addr_39_2: pmpaddr2_li.addr_55_2[0+:38]}
 ;                  
                                                      
   rv64_pmpaddr3_s pmpaddr3_li, pmpaddr3_lo;                                
   bp_pmpaddr3_s pmpaddr3_n, pmpaddr3_r;                                    
   bsg_dff_reset                                                                                 
    #(.width_p($bits(bp_pmpaddr3_s)))                                                     
   pmpaddr3_reg                                                                           
     (.clk_i(clk_i), .reset_i(reset_i), .data_i(pmpaddr3_n), .data_o(pmpaddr3_r)); 
   assign pmpaddr3_lo = 
   rv64_pmpaddr_s'{addr_55_2: 54'(pmpaddr3_r.addr_39_2) 
                   ,default: '0                           
                   }
 ;                 
   assign pmpaddr3_n  = 
   bp_pmpaddr_s'{addr_39_2: pmpaddr3_li.addr_55_2[0+:38]}
 ;                  
                                                            
   rv64_mcycle_s mcycle_li, mcycle_lo;                                
   bp_mcycle_s mcycle_n, mcycle_r;                                    
   bsg_dff_reset                                                                                 
    #(.width_p($bits(bp_mcycle_s)))                                                     
   mcycle_reg                                                                           
     (.clk_i(clk_i), .reset_i(reset_i), .data_i(mcycle_n), .data_o(mcycle_r)); 
   assign mcycle_lo = 
   rv64_mcounter_s'(mcycle_r)
 ;                 
   assign mcycle_n  = 
   bp_mcounter_s'(mcycle_li[0+:48])
 ;                  
                                                    
   rv64_minstret_s minstret_li, minstret_lo;                                
   bp_minstret_s minstret_n, minstret_r;                                    
   bsg_dff_reset                                                                                 
    #(.width_p($bits(bp_minstret_s)))                                                     
   minstret_reg                                                                           
     (.clk_i(clk_i), .reset_i(reset_i), .data_i(minstret_n), .data_o(minstret_r)); 
   assign minstret_lo = 
   rv64_mcounter_s'(minstret_r)
 ;                 
   assign minstret_n  = 
   bp_mcounter_s'(minstret_li[0+:48])
 ;                  
                                                                 
   rv64_mcountinhibit_s mcountinhibit_li, mcountinhibit_lo;                                
   bp_mcountinhibit_s mcountinhibit_n, mcountinhibit_r;                                    
   bsg_dff_reset                                                                                 
    #(.width_p($bits(bp_mcountinhibit_s)))                                                     
   mcountinhibit_reg                                                                           
     (.clk_i(clk_i), .reset_i(reset_i), .data_i(mcountinhibit_n), .data_o(mcountinhibit_r)); 
   assign mcountinhibit_lo = 
   rv64_mcountinhibit_s'{ir : mcountinhibit_r.ir 
                         ,cy: mcountinhibit_r.cy 
                         ,default: '0         
                         }
 ;                 
   assign mcountinhibit_n  = 
   bp_mcountinhibit_s'{ir : mcountinhibit_li.ir 
                       ,cy: mcountinhibit_li.cy 
                       }
 ;                  
   
 
 bsg_dff_reset
  #(.width_p(2) 
    ,.reset_val_p(2'b11)
    )
  priv_mode_reg
   (.clk_i(clk_i)
    ,.reset_i(reset_i)
 
    ,.data_i(priv_mode_n)
    ,.data_o(priv_mode_r)
    );
 
 // CSR data
 always_comb
   begin
     priv_mode_n = priv_mode_r;
 
     stvec_li      = stvec_lo;
     scounteren_li = scounteren_lo;
 
     sscratch_li = sscratch_lo;
     sepc_li     = sepc_lo;
     scause_li   = scause_lo;
     stval_li    = stval_lo;
 
     satp_li     = satp_lo;
 
     mstatus_li    = mstatus_lo;
     medeleg_li    = medeleg_lo;
     mideleg_li    = mideleg_lo;
     mie_li        = mie_lo;
     mtvec_li      = mtvec_lo;
     mcounteren_li = mcounteren_lo;
 
     mscratch_li = mscratch_lo;
     mepc_li     = mepc_lo;
     mcause_li   = mcause_lo;
     mtval_li    = mtval_lo;
     mip_li      = mip_lo;
 
     pmpcfg0_li  = pmpcfg0_lo;
     pmpaddr0_li = pmpaddr0_lo;
     pmpaddr1_li = pmpaddr1_lo;
     pmpaddr2_li = pmpaddr2_lo;
     pmpaddr3_li = pmpaddr3_lo;
 
     mcycle_li        = mcountinhibit_lo.cy ? mcycle_lo + dword_width_p'(1) : mcycle_lo;
     minstret_li      = mcountinhibit_lo.ir ? minstret_lo + dword_width_p'(instret_i) : minstret_lo;
     mcountinhibit_li = mcountinhibit_lo;
 
     trap_v_o        = '0;
     ret_v_o         = '0;
     illegal_instr_o = '0;
     csr_data_lo     = '0;
     tlb_fence_o     = '0;
 
     sstatus_wmask_li = '0;
     sstatus_rmask_li = '0;
     sie_wmask_li     = '0;
     sie_rmask_li     = '0;
     sip_wmask_li     = '0;
     sip_rmask_li     = '0;
         
     if (csr_cmd_v_i)
       if (csr_cmd.csr_op == e_sfence_vma)
         begin
           illegal_instr_o = (priv_mode_r < 2'b01);
           tlb_fence_o     = ~illegal_instr_o;
         end
       else if (csr_cmd.csr_op == e_mret)
         begin
           priv_mode_n      = mstatus_lo.mpp;
 
           mstatus_li.mpp   = 2'b11; // Should be U when U-mode is supported
           mstatus_li.mpie  = 1'b1;
           mstatus_li.mie   = mstatus_lo.mpie;
 
           illegal_instr_o  = (priv_mode_r < 2'b11);
           ret_v_o          = ~illegal_instr_o;
         end
       else if (csr_cmd.csr_op == e_sret)
         begin
           priv_mode_n      = {1'b0, mstatus_lo.spp};
           
           mstatus_li.spp   = 2'b11; // Should be U when U-mode is supported
           mstatus_li.spie  = 1'b1;
           mstatus_li.sie   = mstatus_lo.spie;
 
           illegal_instr_o  = (priv_mode_r < 2'b01);
           ret_v_o          = ~illegal_instr_o;
         end
       else if (csr_cmd.csr_op inside {e_ebreak, e_ecall, e_wfi})
         begin
           // NOPs for now. EBREAK and WFI are likely to remain a NOP for a while, whereas
           // ECALL is implemented as part of the exception cause vector
         end
       else 
         begin
           sstatus_wmask_li = '{mpp: 2'b00, spp: 2'b11
                                ,mpie: 1'b0, spie: 1'b1, upie: 1'b1
                                ,mie: 1'b0, sie: 1'b1, uie: 1'b1
                                ,default: '0
                                };
           sstatus_rmask_li = '{sd: 1'b1, uxl: 2'b11
                                ,mxr: 1'b1, sum: 1'b1
                                ,xs: 2'b11, fs: 2'b11
                                ,mpp: 2'b00, spp: 2'b11
                                ,mpie: 1'b0, spie: 1'b1, upie: 1'b1
                                ,mie: 1'b0, sie: 1'b1, uie: 1'b1
                                ,default: '0
                                };
           sie_wmask_li     = '{meie: mideleg_lo.mei, seie: 1'b1
                                ,mtie: mideleg_lo.mti, stie: 1'b1
                                ,msie: mideleg_lo.msi, ssie: 1'b1
                                ,default: '0
                                };
           sie_rmask_li     = '{meie: mideleg_lo.mei, seie: 1'b1
                                ,mtie: mideleg_lo.mti, stie: 1'b1
                                ,msie: mideleg_lo.msi, ssie: 1'b1
                                ,default: '0
                                };
           sip_wmask_li     = '{meip: 1'b0, seip: 1'b1
                                ,mtip: 1'b0, stip: 1'b1
                                ,msip: 1'b0, ssip: 1'b1
                                ,default: '0
                                };
           sip_rmask_li     = '{meip: mideleg_lo.mei, seip: 1'b1
                                ,mtip: mideleg_lo.mti, stip: 1'b1
                                ,msip: mideleg_lo.msi, ssip: 1'b1
                                ,default: '0};
 
           unique casez (csr_cmd.csr_addr)
             
                  
   12'hc00:                                        
     begin                                             
       csr_data_lo = dword_width_p'(mcycle_r);       
                                                       
       illegal_instr_o = (priv_mode_r < 1'b0); 
     end                                               
                  
   12'hc02:                                        
     begin                                             
       csr_data_lo = dword_width_p'(minstret_r);       
                                                       
       illegal_instr_o = (priv_mode_r < 1'b0); 
     end                                               
                                                         
   12'h100:                                                                                  
     begin                                                                                       
       mstatus_li = (mstatus_lo & ~sstatus_wmask_li) | (csr_data_li & sstatus_wmask_li); 
       csr_data_lo        = dword_width_p'(mstatus_lo & sstatus_rmask_li);                   
                                                                                                 
       illegal_instr_o = (priv_mode_r < 2'b01);                                           
     end                                                                                         
             
   12'h102:                                        
     begin                                             
       csr_data_lo = dword_width_p'('0);       
                                                       
       illegal_instr_o = (priv_mode_r < 2'b01); 
     end                                               
   /* verilator lint_on UNSIGNED */
 
             // Read-only because we don't support N-extension
             
   /* verilator lint_off UNSIGNED */                   
   12'h103:                                        
     begin                                             
       csr_data_lo = dword_width_p'('0);       
                                                       
       illegal_instr_o = (priv_mode_r < 2'b01); 
     end                                               
   /* verilator lint_on UNSIGNED */
 
             
   /* verilator lint_off UNSIGNED */                                                             
   12'h104:                                                                                  
     begin                                                                                       
       mie_li = (mie_lo & ~sie_wmask_li) | (csr_data_li & sie_wmask_li); 
       csr_data_lo        = dword_width_p'(mie_lo & sie_rmask_li);                   
                                                                                                 
       illegal_instr_o = (priv_mode_r < 2'b01);                                           
     end                                                                                         
   /* verilator lint_on UNSIGNED */
 
             
   /* verilator lint_off UNSIGNED */                                          
   12'h105:                                                               
     begin                                                                    
       stvec_li = rv64_stvec_s'(csr_data_li);             
       csr_data_lo        = dword_width_p'(stvec_lo);               
                                                                              
       illegal_instr_o = (priv_mode_r < 2'b01);                        
     end                                                                      
   /* verilator lint_on UNSIGNED */
 
             
   /* verilator lint_off UNSIGNED */                                          
   12'h106:                                                               
     begin                                                                    
       scounteren_li = rv64_scounteren_s'(csr_data_li);             
       csr_data_lo        = dword_width_p'(scounteren_lo);               
                                                                              
       illegal_instr_o = (priv_mode_r < 2'b01);                        
     end                                                                      
   /* verilator lint_on UNSIGNED */
 
             
   /* verilator lint_off UNSIGNED */                                          
   12'h140:                                                               
     begin                                                                    
       sscratch_li = rv64_sscratch_s'(csr_data_li);             
       csr_data_lo        = dword_width_p'(sscratch_lo);               
                                                                              
       illegal_instr_o = (priv_mode_r < 2'b01);                        
     end                                                                      
   /* verilator lint_on UNSIGNED */
 
             
   /* verilator lint_off UNSIGNED */                                          
   12'h141:                                                               
     begin                                                                    
       sepc_li = rv64_sepc_s'(csr_data_li);             
       csr_data_lo        = dword_width_p'(sepc_lo);               
                                                                              
       illegal_instr_o = (priv_mode_r < 2'b01);                        
     end                                                                      
   /* verilator lint_on UNSIGNED */
 
             
   /* verilator lint_off UNSIGNED */                                          
   12'h142:                                                               
     begin                                                                    
       scause_li = rv64_scause_s'(csr_data_li);             
       csr_data_lo        = dword_width_p'(scause_lo);               
                                                                              
       illegal_instr_o = (priv_mode_r < 2'b01);                        
     end                                                                      
   /* verilator lint_on UNSIGNED */
 
             
   /* verilator lint_off UNSIGNED */                                          
   12'h143:                                                               
     begin                                                                    
       stval_li = rv64_stval_s'(csr_data_li);             
       csr_data_lo        = dword_width_p'(stval_lo);               
                                                                              
       illegal_instr_o = (priv_mode_r < 2'b01);                        
     end                                                                      
   /* verilator lint_on UNSIGNED */
 
             // SIP subset of MIP
             
   /* verilator lint_off UNSIGNED */                                                             
   12'h144:                                                                                  
     begin                                                                                       
       mip_li = (mip_lo & ~sip_wmask_li) | (csr_data_li & sip_wmask_li); 
       csr_data_lo        = dword_width_p'(mip_lo & sip_rmask_li);                   
                                                                                                 
       illegal_instr_o = (priv_mode_r < 2'b01);                                           
     end                                                                                         
   /* verilator lint_on UNSIGNED */
 
             
   /* verilator lint_off UNSIGNED */                                          
   12'h180:                                                               
     begin                                                                    
       satp_li = rv64_satp_s'(csr_data_li);             
       csr_data_lo        = dword_width_p'(satp_lo);               
                                                                              
       illegal_instr_o = (priv_mode_r < 2'b01);                        
     end                                                                      
   /* verilator lint_on UNSIGNED */
 
             // We havr no vendorid currently
             
   /* verilator lint_off UNSIGNED */                   
   12'hf11:                                        
     begin                                             
       csr_data_lo = dword_width_p'('0);       
                                                       
       illegal_instr_o = (priv_mode_r < 2'b11); 
     end                                               
   /* verilator lint_on UNSIGNED */
 
             // https://github.com/riscv/riscv-isa-manual/blob/master/marchid.md
             //   Lucky 13 (*v*)
             
   /* verilator lint_off UNSIGNED */                   
   12'hf12:                                        
     begin                                             
       csr_data_lo = dword_width_p'(13);       
                                                       
       illegal_instr_o = (priv_mode_r < 2'b11); 
     end                                               
   /* verilator lint_on UNSIGNED */
 
             // 0: Tapeout 0, July 2019
             // 1: Current
             
   /* verilator lint_off UNSIGNED */                   
   12'hf13:                                        
     begin                                             
       csr_data_lo = dword_width_p'(1);       
                                                       
       illegal_instr_o = (priv_mode_r < 2'b11); 
     end                                               
   /* verilator lint_on UNSIGNED */
 
             
   /* verilator lint_off UNSIGNED */                   
   12'hf14:                                        
     begin                                             
       csr_data_lo = dword_width_p'(hartid_i);       
                                                       
       illegal_instr_o = (priv_mode_r < 2'b11); 
     end                                               
   /* verilator lint_on UNSIGNED */
 
             
   /* verilator lint_off UNSIGNED */                                          
   12'h300:                                                               
     begin                                                                    
       mstatus_li = rv64_mstatus_s'(csr_data_li);             
       csr_data_lo        = dword_width_p'(mstatus_lo);               
                                                                              
       illegal_instr_o = (priv_mode_r < 2'b11);                        
     end                                                                      
   /* verilator lint_on UNSIGNED */
 
             // MISA is optionally read-write, but all fields are read-only in BlackParrot
             //   64 bit MXLEN, AISU extensions
             
   /* verilator lint_off UNSIGNED */                   
   12'h301:                                        
     begin                                             
       csr_data_lo = dword_width_p'({2'b10, 36'b0, 26'h140101});       
                                                       
       illegal_instr_o = (priv_mode_r < 2'b11); 
     end                                               
   /* verilator lint_on UNSIGNED */
 
             
   /* verilator lint_off UNSIGNED */                                          
   12'h302:                                                               
     begin                                                                    
       medeleg_li = rv64_medeleg_s'(csr_data_li);             
       csr_data_lo        = dword_width_p'(medeleg_lo);               
                                                                              
       illegal_instr_o = (priv_mode_r < 2'b11);                        
     end                                                                      
   /* verilator lint_on UNSIGNED */
 
             
   /* verilator lint_off UNSIGNED */                                          
   12'h303:                                                               
     begin                                                                    
       mideleg_li = rv64_mideleg_s'(csr_data_li);             
       csr_data_lo        = dword_width_p'(mideleg_lo);               
                                                                              
       illegal_instr_o = (priv_mode_r < 2'b11);                        
     end                                                                      
   /* verilator lint_on UNSIGNED */
 
             
   /* verilator lint_off UNSIGNED */                                          
   12'h304:                                                               
     begin                                                                    
       mie_li = rv64_mie_s'(csr_data_li);             
       csr_data_lo        = dword_width_p'(mie_lo);               
                                                                              
       illegal_instr_o = (priv_mode_r < 2'b11);                        
     end                                                                      
   /* verilator lint_on UNSIGNED */
 
             
   /* verilator lint_off UNSIGNED */                                          
   12'h305:                                                               
     begin                                                                    
       mtvec_li = rv64_mtvec_s'(csr_data_li);             
       csr_data_lo        = dword_width_p'(mtvec_lo);               
                                                                              
       illegal_instr_o = (priv_mode_r < 2'b11);                        
     end                                                                      
   /* verilator lint_on UNSIGNED */
 
             
   /* verilator lint_off UNSIGNED */                                          
   12'h306:                                                               
     begin                                                                    
       mcounteren_li = rv64_mcounteren_s'(csr_data_li);             
       csr_data_lo        = dword_width_p'(mcounteren_lo);               
                                                                              
       illegal_instr_o = (priv_mode_r < 2'b11);                        
     end                                                                      
   /* verilator lint_on UNSIGNED */
 
             
   /* verilator lint_off UNSIGNED */                                          
   12'h344:                                                               
     begin                                                                    
       mip_li = rv64_mip_s'(csr_data_li);             
       csr_data_lo        = dword_width_p'(mip_lo);               
                                                                              
       illegal_instr_o = (priv_mode_r < 2'b11);                        
     end                                                                      
   /* verilator lint_on UNSIGNED */
 
             
   /* verilator lint_off UNSIGNED */                                          
   12'h340:                                                               
     begin                                                                    
       mscratch_li = rv64_mscratch_s'(csr_data_li);             
       csr_data_lo        = dword_width_p'(mscratch_lo);               
                                                                              
       illegal_instr_o = (priv_mode_r < 2'b11);                        
     end                                                                      
   /* verilator lint_on UNSIGNED */
 
             
   /* verilator lint_off UNSIGNED */                                          
   12'h341:                                                               
     begin                                                                    
       mepc_li = rv64_mepc_s'(csr_data_li);             
       csr_data_lo        = dword_width_p'(mepc_lo);               
                                                                              
       illegal_instr_o = (priv_mode_r < 2'b11);                        
     end                                                                      
   /* verilator lint_on UNSIGNED */
 
             
   /* verilator lint_off UNSIGNED */                                          
   12'h342:                                                               
     begin                                                                    
       mcause_li = rv64_mcause_s'(csr_data_li);             
       csr_data_lo        = dword_width_p'(mcause_lo);               
                                                                              
       illegal_instr_o = (priv_mode_r < 2'b11);                        
     end                                                                      
   /* verilator lint_on UNSIGNED */
 
             
   /* verilator lint_off UNSIGNED */                                          
   12'h343:                                                               
     begin                                                                    
       mtval_li = rv64_mtval_s'(csr_data_li);             
       csr_data_lo        = dword_width_p'(mtval_lo);               
                                                                              
       illegal_instr_o = (priv_mode_r < 2'b11);                        
     end                                                                      
   /* verilator lint_on UNSIGNED */
 
             
   /* verilator lint_off UNSIGNED */                                          
   12'h3a0:                                                               
     begin                                                                    
       pmpcfg0_li = rv64_pmpcfg0_s'(csr_data_li);             
       csr_data_lo        = dword_width_p'(pmpcfg0_lo);               
                                                                              
       illegal_instr_o = (priv_mode_r < 2'b11);                        
     end                                                                      
   /* verilator lint_on UNSIGNED */
 
             
   /* verilator lint_off UNSIGNED */                                          
   12'h3b0:                                                               
     begin                                                                    
       pmpaddr0_li = rv64_pmpaddr0_s'(csr_data_li);             
       csr_data_lo        = dword_width_p'(pmpaddr0_lo);               
                                                                              
       illegal_instr_o = (priv_mode_r < 2'b11);                        
     end                                                                      
   /* verilator lint_on UNSIGNED */
 
             
   /* verilator lint_off UNSIGNED */                                          
   12'h3b1:                                                               
     begin                                                                    
       pmpaddr1_li = rv64_pmpaddr1_s'(csr_data_li);             
       csr_data_lo        = dword_width_p'(pmpaddr1_lo);               
                                                                              
       illegal_instr_o = (priv_mode_r < 2'b11);                        
     end                                                                      
   /* verilator lint_on UNSIGNED */
 
             
   /* verilator lint_off UNSIGNED */                                          
   12'h3b2:                                                               
     begin                                                                    
       pmpaddr2_li = rv64_pmpaddr2_s'(csr_data_li);             
       csr_data_lo        = dword_width_p'(pmpaddr2_lo);               
                                                                              
       illegal_instr_o = (priv_mode_r < 2'b11);                        
     end                                                                      
                                      
   12'h3b3:                                                               
     begin                                                                    
       pmpaddr3_li = rv64_pmpaddr3_s'(csr_data_li);             
       csr_data_lo        = dword_width_p'(pmpaddr3_lo);               
                                                                              
       illegal_instr_o = (priv_mode_r < 2'b11);                        
     end                                                                      
   /* verilator lint_on UNSIGNED */
 
             
   /* verilator lint_off UNSIGNED */                                          
   12'hb00:                                                               
     begin                                                                    
       mcycle_li = rv64_mcycle_s'(csr_data_li);             
       csr_data_lo        = dword_width_p'(mcycle_lo);               
                                                                              
       illegal_instr_o = (priv_mode_r < 2'b11);                        
     end                                                                      
   /* verilator lint_on UNSIGNED */
 
             
   /* verilator lint_off UNSIGNED */                                          
   12'hb02:                                                               
     begin                                                                    
       minstret_li = rv64_minstret_s'(csr_data_li);             
       csr_data_lo        = dword_width_p'(minstret_lo);               
                                                                              
       illegal_instr_o = (priv_mode_r < 2'b11);                        
     end                                                                      
                                 
   12'h320:                                                               
     begin                                                                    
       mcountinhibit_li = rv64_mcountinhibit_s'(csr_data_li);             
       csr_data_lo        = dword_width_p'(mcountinhibit_lo);               
                                                                              
       illegal_instr_o = (priv_mode_r < 2'b11);                        
     end                                                                      
  
             default: illegal_instr_o = 1'b1;
           endcase
         end
 
     // Check for access violations
     if (is_s_mode & (csr_cmd.csr_addr == 12'hc00) & ~mcounteren_lo.cy)
       illegal_instr_o = 1'b1;
     if (is_u_mode & (csr_cmd.csr_addr == 12'hc00) & ~scounteren_lo.cy)
       illegal_instr_o = 1'b1;
     if (is_s_mode & (csr_cmd.csr_addr == 12'hc02) & ~mcounteren_lo.ir)
       illegal_instr_o = 1'b1;
     if (is_u_mode & (csr_cmd.csr_addr == 12'hc02) & ~scounteren_lo.ir)
       illegal_instr_o = 1'b1;
 
     if (timer_int_i)
         mip_li.mtip = 1'b1;
 
     if (software_int_i)
         mip_li.msip = 1'b1;
 
     if (external_int_i)
         mip_li.meip = 1'b1;
 
     if (exception_v_i & exception_ecode_v_li) 
       if (medeleg_lo[exception_ecode_li] & ~is_m_mode)
         begin
           priv_mode_n          = 2'b01;
 
           mstatus_li.spp       = priv_mode_r;
           mstatus_li.spie      = mstatus_lo.sie;
           mstatus_li.sie       = 1'b0;
 
           sepc_li              = paddr_width_p'($signed(exception_pc_i));
           stval_li             = exception_ecode_dec_cast_i.illegal_instr 
                                 ? exception_instr_i 
                                 : paddr_width_p'($signed(exception_vaddr_i));
 
           scause_li._interrupt = 1'b0;
           scause_li.ecode      = exception_ecode_li;
 
           trap_v_o            = 1'b1;
         end
       else
         begin
           priv_mode_n          = 2'b11;
 
           mstatus_li.mpp       = priv_mode_r;
           mstatus_li.mpie      = mstatus_lo.mie;
           mstatus_li.mie       = 1'b0;
 
           mepc_li              = paddr_width_p'($signed(exception_pc_i));
           mtval_li             = exception_ecode_dec_cast_i.illegal_instr 
                                 ? exception_instr_i 
                                 : paddr_width_p'($signed(exception_vaddr_i));
 
           mcause_li._interrupt = 1'b0;
           mcause_li.ecode      = exception_ecode_li;
 
           trap_v_o             = 1'b1;
         end
 
     if (exception_icode_v_li)
       if (mideleg_lo[exception_icode_li] & ~is_m_mode)
         begin
           priv_mode_n          = 2'b01;
 
           mstatus_li.spp       = priv_mode_r;
           mstatus_li.spie      = mstatus_lo.sie;
           mstatus_li.sie       = 1'b0;
 
           sepc_li              = (exception_v_i & exception_ecode_v_li) 
                                 ? paddr_width_p'($signed(exception_pc_i))
                                 : paddr_width_p'($signed(interrupt_pc_i));
           stval_li             = '0;
           scause_li._interrupt = 1'b1;
           scause_li.ecode      = exception_icode_li;
 
           trap_v_o             = 1'b1;
         end
       else
         begin
           priv_mode_n          = 2'b11;
 
           mstatus_li.mpp       = priv_mode_r;
           mstatus_li.mpie      = mstatus_lo.mie;
           mstatus_li.mie       = 1'b0;
 
           mepc_li              = (exception_v_i & exception_ecode_v_li) 
                                 ? paddr_width_p'($signed(exception_pc_i))
                                 : paddr_width_p'($signed(interrupt_pc_i));
           mtval_li             = '0;
           mcause_li._interrupt = 1'b1;
           mcause_li.ecode      = exception_icode_li;
 
           trap_v_o            = 1'b1;
         end
   end
 
 // CSR slow paths
 assign epc_o           = (csr_cmd.csr_op == e_sret) ? sepc_r : mepc_r;
 assign tvec_o          = (priv_mode_n == 2'b01) ? stvec_r : mtvec_r;
 assign satp_o          = satp_r;
 // We only support SV39 so the mode can either be 0(off) or 1(SV39)
 assign translation_en_o = ((priv_mode_r < 2'b11) & (satp_r.mode == 1'b1))
                           | (mstatus_lo.mprv & (mstatus_lo.mpp < 2'b11) & (satp_r.mode == 1'b1));
 
 assign csr_cmd_ready_o = 1'b1;
 assign data_o          = dword_width_p'(csr_data_lo);
 assign v_o             = csr_cmd_v_i;
 
 endmodule: bp_be_csr
 
 */

  /* 


interface mem_interface(input bit clock);

   parameter setup_time = 5ns;
   parameter hold_time = 3ns;

   wire [7:0] mem_data;
   wire [1:0] mem_add;
   wire       mem_en;
   wire       mem_rd_wr;
   
   clocking cb@(posedge clock);
      default input #setup_time output #hold_time;
      output     mem_data;
      output      mem_add;
      output mem_en;
      output mem_rd_wr;
   endclocking:cb
   
   modport MEM(clocking cb,input clock);

endinterface :mem_interface


*/

/*

`include "vscale_ctrl_constants.vh"
`include "vscale_csr_addr_map.vh"

module vscale_hex_tb();

   localparam hexfile_words = 8192;

   reg clk;
   reg reset;

   wire htif_pcr_resp_valid;
   wire [`HTIF_PCR_WIDTH-1:0] htif_pcr_resp_data;

   reg [255:0]                reason = 0;
   reg [1023:0]               loadmem = 0;
   reg [1023:0]               vpdfile = 0;
   reg [  63:0]               max_cycles = 0;
   reg [  63:0]               trace_count = 0;
   integer                    stderr = 32'h80000002;

   reg [127:0]                hexfile [hexfile_words-1:0];

   vscale_sim_top DUT(
                      .clk(clk),
                      .reset(reset),
                      .htif_pcr_req_valid(1'b1),
                      .htif_pcr_req_ready(),
                      .htif_pcr_req_rw(1'b0),
                      .htif_pcr_req_addr(`CSR_ADDR_TO_HOST),
                      .htif_pcr_req_data(`HTIF_PCR_WIDTH'b0),
                      .htif_pcr_resp_valid(htif_pcr_resp_valid),
                      .htif_pcr_resp_ready(1'b1),
                      .htif_pcr_resp_data(htif_pcr_resp_data)
                      );

   initial begin
      clk = 0;
      reset = 1;
   end

   always #5 clk = !clk;

   integer i = 0;
   integer j = 0;

   initial begin
      $value$plusargs("max-cycles=%d", max_cycles);
      $value$plusargs("loadmem=%s", loadmem);
      $value$plusargs("vpdfile=%s", vpdfile);
      if (loadmem) begin
         $readmemh(loadmem, hexfile);
         for (i = 0; i < hexfile_words; i = i + 1) begin
            for (j = 0; j < 4; j = j + 1) begin
               DUT.hasti_mem.mem[4*i+j] = hexfile[i][32*j+:32];
            end
         end
      end
      $vcdplusfile(vpdfile);
      $vcdpluson();
      // $vcdplusmemon();
      #100 reset = 0;
   end // initial begin

   always @(posedge clk) begin
      trace_count = trace_count + 1;

      if (max_cycles > 0 && trace_count > max_cycles)
        reason = "timeout";

      if (!reset) begin
         if (htif_pcr_resp_valid && htif_pcr_resp_data != 0) begin
            if (htif_pcr_resp_data == 1) begin
               $vcdplusclose;
               $finish;
            end else begin
               $vcdplusclose;
               $sformat(reason, "tohost = %d", htif_pcr_resp_data >> 1);
            end
         end
      end


      if (reason) begin
         $fdisplay(stderr, "*** FAILED *** (%s) after %d simulation cycles", reason, trace_count);
         $vcdplusclose;
         $finish;
      end
   end

endmodule // vscale_hex_tb

*/
