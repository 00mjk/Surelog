[INFO :CM0023] Creating log file ../../build/tests/UnitTest/slpp_unit/surelog.log.

[INFO :CM0020] Separate compilation-unit mode is on.

PP PREPROCESS FILE: top.v
PP TOKENS: 
[@0,0:0='\n',<78>,1:0]
[@1,1:9='interface',<55>,2:0]
[@2,10:10=' ',<71>,2:9]
[@3,11:17='AXI_BUS',<70>,2:10]
[@4,18:18=' ',<71>,2:17]
[@5,19:19='#',<92>,2:18]
[@6,20:20='(',<82>,2:19]
[@7,21:21='\n',<78>,2:20]
[@8,22:22=' ',<71>,3:0]
[@9,23:31='parameter',<70>,3:1]
[@10,32:32=' ',<71>,3:10]
[@11,33:44='AXI_ID_WIDTH',<70>,3:11]
[@12,45:47='   ',<71>,3:23]
[@13,48:48='=',<85>,3:26]
[@14,49:49=' ',<71>,3:27]
[@15,50:50='-',<92>,3:28]
[@16,51:51='1',<74>,3:29]
[@17,52:52='\n',<78>,3:30]
[@18,53:53=')',<83>,4:0]
[@19,54:54=';',<92>,4:1]
[@20,55:55='\n',<78>,4:2]
[@21,56:56='\n',<78>,5:0]
[@22,57:58='  ',<71>,6:0]
[@23,59:65='typedef',<70>,6:2]
[@24,66:66=' ',<71>,6:9]
[@25,67:71='logic',<70>,6:10]
[@26,72:72=' ',<71>,6:15]
[@27,73:73='[',<90>,6:16]
[@28,74:85='AXI_ID_WIDTH',<70>,6:17]
[@29,86:86='-',<92>,6:29]
[@30,87:87='1',<74>,6:30]
[@31,88:88=':',<92>,6:31]
[@32,89:89='0',<74>,6:32]
[@33,90:90=']',<91>,6:33]
[@34,91:93='   ',<71>,6:34]
[@35,94:97='id_t',<70>,6:37]
[@36,98:98=';',<92>,6:41]
[@37,99:99='\n',<78>,6:42]
[@38,100:101='  ',<71>,7:0]
[@39,102:102='\n',<78>,7:2]
[@40,103:104='  ',<71>,8:0]
[@41,105:109='id_t1',<70>,8:2]
[@42,110:116='       ',<71>,8:7]
[@43,117:121='aw_id',<70>,8:14]
[@44,122:122=';',<92>,8:19]
[@45,123:123='\n',<78>,8:20]
[@46,124:126='   ',<71>,9:0]
[@47,127:127='\n',<78>,9:3]
[@48,128:129='  ',<71>,10:0]
[@49,130:136='modport',<70>,10:2]
[@50,137:137=' ',<71>,10:9]
[@51,138:143='Master',<70>,10:10]
[@52,144:144=' ',<71>,10:16]
[@53,145:145='(',<82>,10:17]
[@54,146:146='\n',<78>,10:18]
[@55,147:150='    ',<71>,11:0]
[@56,151:156='output',<70>,11:4]
[@57,157:157=' ',<71>,11:10]
[@58,158:162='aw_id',<70>,11:11]
[@59,163:163='\n',<78>,11:16]
[@60,164:165='  ',<71>,12:0]
[@61,166:166=')',<83>,12:2]
[@62,167:167=';',<92>,12:3]
[@63,168:168='\n',<78>,12:4]
[@64,169:169='\n',<78>,13:0]
[@65,170:171='  ',<71>,14:0]
[@66,172:175='id_t',<70>,14:2]
[@67,176:182='       ',<71>,14:6]
[@68,183:187='rw_id',<70>,14:13]
[@69,188:188=';',<92>,14:18]
[@70,189:189='\n',<78>,14:19]
[@71,190:192='   ',<71>,15:0]
[@72,193:193='\n',<78>,15:3]
[@73,194:195='  ',<71>,16:0]
[@74,196:202='modport',<70>,16:2]
[@75,203:203=' ',<71>,16:9]
[@76,204:208='Slave',<70>,16:10]
[@77,209:209=' ',<71>,16:15]
[@78,210:210='(',<82>,16:16]
[@79,211:211='\n',<78>,16:17]
[@80,212:215='    ',<71>,17:0]
[@81,216:221='output',<70>,17:4]
[@82,222:222=' ',<71>,17:10]
[@83,223:227='ww_id',<70>,17:11]
[@84,228:228='\n',<78>,17:16]
[@85,229:230='  ',<71>,18:0]
[@86,231:231=')',<83>,18:2]
[@87,232:232=';',<92>,18:3]
[@88,233:233='\n',<78>,18:4]
[@89,234:234='\n',<78>,19:0]
[@90,235:246='endinterface',<56>,20:0]
[@91,247:247='\n',<78>,20:12]
[@92,248:248='\n',<78>,21:0]
[@93,249:249='\n',<78>,22:0]
[@94,250:258='interface',<55>,23:0]
[@95,259:259=' ',<71>,23:9]
[@96,260:265='mem_if',<70>,23:10]
[@97,266:266=' ',<71>,23:16]
[@98,267:267='(',<82>,23:17]
[@99,268:272='input',<70>,23:18]
[@100,273:273=' ',<71>,23:23]
[@101,274:277='wire',<70>,23:24]
[@102,278:278=' ',<71>,23:28]
[@103,279:281='clk',<70>,23:29]
[@104,282:282=')',<83>,23:32]
[@105,283:283=';',<92>,23:33]
[@106,284:284='\n',<78>,23:34]
[@107,285:285='\n',<78>,24:0]
[@108,286:287='  ',<71>,25:0]
[@109,288:294='modport',<70>,25:2]
[@110,295:296='  ',<71>,25:9]
[@111,297:302='system',<70>,25:11]
[@112,303:303=' ',<71>,25:17]
[@113,304:304='(',<82>,25:18]
[@114,305:309='input',<70>,25:19]
[@115,310:310=' ',<71>,25:24]
[@116,311:313='clk',<70>,25:25]
[@117,314:314=')',<83>,25:28]
[@118,315:315=';',<92>,25:29]
[@119,316:316='\n',<78>,25:30]
[@120,317:318='  ',<71>,26:0]
[@121,319:325='modport',<70>,26:2]
[@122,326:327='  ',<71>,26:9]
[@123,328:333='memory',<70>,26:11]
[@124,334:334=' ',<71>,26:17]
[@125,335:335='(',<82>,26:18]
[@126,336:340='input',<70>,26:19]
[@127,341:341=' ',<71>,26:24]
[@128,342:344='clk',<70>,26:25]
[@129,345:345=')',<83>,26:28]
[@130,346:346=';',<92>,26:29]
[@131,347:347='\n',<78>,26:30]
[@132,348:348=' ',<71>,27:0]
[@133,349:349='\n',<78>,27:1]
[@134,350:361='endinterface',<56>,28:0]
[@135,362:362='\n',<78>,28:12]
[@136,363:363='\n',<78>,29:0]
[@137,364:369='module',<53>,30:0]
[@138,370:370=' ',<71>,30:6]
[@139,371:382='memory_ctrl1',<70>,30:7]
[@140,383:383=' ',<71>,30:19]
[@141,384:384='(',<82>,30:20]
[@142,385:390='mem_if',<70>,30:21]
[@143,391:391='.',<92>,30:27]
[@144,392:398='system1',<70>,30:28]
[@145,399:399=' ',<71>,30:35]
[@146,400:402='sif',<70>,30:36]
[@147,403:403=')',<83>,30:39]
[@148,404:404=';',<92>,30:40]
[@149,405:405='\n',<78>,30:41]
[@150,406:406='\n',<78>,31:0]
[@151,407:413='typedef',<70>,32:0]
[@152,414:415='  ',<71>,32:7]
[@153,416:419='enum',<70>,32:9]
[@154,420:420=' ',<71>,32:13]
[@155,421:421='{',<88>,32:14]
[@156,422:425='IDLE',<70>,32:15]
[@157,426:426=',',<84>,32:19]
[@158,427:431='WRITE',<70>,32:20]
[@159,432:432=',',<84>,32:25]
[@160,433:436='READ',<70>,32:26]
[@161,437:437=',',<84>,32:30]
[@162,438:441='DONE',<70>,32:31]
[@163,442:442='}',<89>,32:35]
[@164,443:443=' ',<71>,32:36]
[@165,444:448='fsm_t',<70>,32:37]
[@166,449:449=';',<92>,32:42]
[@167,450:450='\n',<78>,32:43]
[@168,451:451='\n',<78>,33:0]
[@169,452:456='fsm_t',<70>,34:0]
[@170,457:457=' ',<71>,34:5]
[@171,458:462='state',<70>,34:6]
[@172,463:463=';',<92>,34:11]
[@173,464:464='\n',<78>,34:12]
[@174,465:465='\n',<78>,35:0]
[@175,466:466='\n',<78>,36:0]
[@176,467:475='endmodule',<54>,37:0]
[@177,476:476='\n',<78>,37:9]
[@178,477:477='\n',<78>,38:0]
[@179,478:483='module',<53>,39:0]
[@180,484:484=' ',<71>,39:6]
[@181,485:496='memory_ctrl2',<70>,39:7]
[@182,497:497=' ',<71>,39:19]
[@183,498:498='(',<82>,39:20]
[@184,499:504='mem_if',<70>,39:21]
[@185,505:505='.',<92>,39:27]
[@186,506:511='system',<70>,39:28]
[@187,512:512=' ',<71>,39:34]
[@188,513:515='sif',<70>,39:35]
[@189,516:516=')',<83>,39:38]
[@190,517:517=';',<92>,39:39]
[@191,518:518='\n',<78>,39:40]
[@192,519:519='\n',<78>,40:0]
[@193,520:526='typedef',<70>,41:0]
[@194,527:528='  ',<71>,41:7]
[@195,529:532='enum',<70>,41:9]
[@196,533:533=' ',<71>,41:13]
[@197,534:534='{',<88>,41:14]
[@198,535:538='IDLE',<70>,41:15]
[@199,539:539=',',<84>,41:19]
[@200,540:544='WRITE',<70>,41:20]
[@201,545:545=',',<84>,41:25]
[@202,546:549='READ',<70>,41:26]
[@203,550:550=',',<84>,41:30]
[@204,551:554='DONE',<70>,41:31]
[@205,555:555='}',<89>,41:35]
[@206,556:556=' ',<71>,41:36]
[@207,557:561='fsm_t',<70>,41:37]
[@208,562:562=';',<92>,41:42]
[@209,563:563='\n',<78>,41:43]
[@210,564:564='\n',<78>,42:0]
[@211,565:569='fsm_t',<70>,43:0]
[@212,570:570=' ',<71>,43:5]
[@213,571:575='state',<70>,43:6]
[@214,576:576=';',<92>,43:11]
[@215,577:577='\n',<78>,43:12]
[@216,578:578='\n',<78>,44:0]
[@217,579:580='DD',<70>,45:0]
[@218,581:581=' ',<71>,45:2]
[@219,582:582='t',<70>,45:3]
[@220,583:583=';',<92>,45:4]
[@221,584:584='\n',<78>,45:5]
[@222,585:585='\n',<78>,46:0]
[@223,586:594='endmodule',<54>,47:0]
[@224,595:595='\n',<78>,47:9]
[@225,596:596='\n',<78>,48:0]
[@226,597:597='\n',<78>,49:0]
[@227,598:597='<EOF>',<-1>,50:0]
PP TREE: (top_level_rule null_rule (source_text (description (text_blob \n)) (description (sv_interface interface)) (description (text_blob  )) (description (text_blob AXI_BUS)) (description (text_blob  )) (description (text_blob #)) (description (text_blob ()) (description (text_blob \n)) (description (text_blob  )) (description (text_blob parameter)) (description (text_blob  )) (description (text_blob AXI_ID_WIDTH)) (description (text_blob    )) (description (text_blob =)) (description (text_blob  )) (description (text_blob -)) (description (number 1)) (description (text_blob \n)) (description (text_blob ))) (description (text_blob ;)) (description (text_blob \n)) (description (text_blob \n)) (description (text_blob   )) (description (text_blob typedef)) (description (text_blob  )) (description (text_blob logic)) (description (text_blob  )) (description (text_blob [)) (description (text_blob AXI_ID_WIDTH)) (description (text_blob -)) (description (number 1)) (description (text_blob :)) (description (number 0)) (description (text_blob ])) (description (text_blob    )) (description (text_blob id_t)) (description (text_blob ;)) (description (text_blob \n)) (description (text_blob   )) (description (text_blob \n)) (description (text_blob   )) (description (text_blob id_t1)) (description (text_blob        )) (description (text_blob aw_id)) (description (text_blob ;)) (description (text_blob \n)) (description (text_blob    )) (description (text_blob \n)) (description (text_blob   )) (description (text_blob modport)) (description (text_blob  )) (description (text_blob Master)) (description (text_blob  )) (description (text_blob ()) (description (text_blob \n)) (description (text_blob     )) (description (text_blob output)) (description (text_blob  )) (description (text_blob aw_id)) (description (text_blob \n)) (description (text_blob   )) (description (text_blob ))) (description (text_blob ;)) (description (text_blob \n)) (description (text_blob \n)) (description (text_blob   )) (description (text_blob id_t)) (description (text_blob        )) (description (text_blob rw_id)) (description (text_blob ;)) (description (text_blob \n)) (description (text_blob    )) (description (text_blob \n)) (description (text_blob   )) (description (text_blob modport)) (description (text_blob  )) (description (text_blob Slave)) (description (text_blob  )) (description (text_blob ()) (description (text_blob \n)) (description (text_blob     )) (description (text_blob output)) (description (text_blob  )) (description (text_blob ww_id)) (description (text_blob \n)) (description (text_blob   )) (description (text_blob ))) (description (text_blob ;)) (description (text_blob \n)) (description (text_blob \n)) (description (endinterface endinterface)) (description (text_blob \n)) (description (text_blob \n)) (description (text_blob \n)) (description (sv_interface interface)) (description (text_blob  )) (description (text_blob mem_if)) (description (text_blob  )) (description (text_blob ()) (description (text_blob input)) (description (text_blob  )) (description (text_blob wire)) (description (text_blob  )) (description (text_blob clk)) (description (text_blob ))) (description (text_blob ;)) (description (text_blob \n)) (description (text_blob \n)) (description (text_blob   )) (description (text_blob modport)) (description (text_blob   )) (description (text_blob system)) (description (text_blob  )) (description (text_blob ()) (description (text_blob input)) (description (text_blob  )) (description (text_blob clk)) (description (text_blob ))) (description (text_blob ;)) (description (text_blob \n)) (description (text_blob   )) (description (text_blob modport)) (description (text_blob   )) (description (text_blob memory)) (description (text_blob  )) (description (text_blob ()) (description (text_blob input)) (description (text_blob  )) (description (text_blob clk)) (description (text_blob ))) (description (text_blob ;)) (description (text_blob \n)) (description (text_blob  )) (description (text_blob \n)) (description (endinterface endinterface)) (description (text_blob \n)) (description (text_blob \n)) (description (module module)) (description (text_blob  )) (description (text_blob memory_ctrl1)) (description (text_blob  )) (description (text_blob ()) (description (text_blob mem_if)) (description (text_blob .)) (description (text_blob system1)) (description (text_blob  )) (description (text_blob sif)) (description (text_blob ))) (description (text_blob ;)) (description (text_blob \n)) (description (text_blob \n)) (description (text_blob typedef)) (description (text_blob   )) (description (text_blob enum)) (description (text_blob  )) (description (text_blob {)) (description (text_blob IDLE)) (description (text_blob ,)) (description (text_blob WRITE)) (description (text_blob ,)) (description (text_blob READ)) (description (text_blob ,)) (description (text_blob DONE)) (description (text_blob })) (description (text_blob  )) (description (text_blob fsm_t)) (description (text_blob ;)) (description (text_blob \n)) (description (text_blob \n)) (description (text_blob fsm_t)) (description (text_blob  )) (description (text_blob state)) (description (text_blob ;)) (description (text_blob \n)) (description (text_blob \n)) (description (text_blob \n)) (description (endmodule endmodule)) (description (text_blob \n)) (description (text_blob \n)) (description (module module)) (description (text_blob  )) (description (text_blob memory_ctrl2)) (description (text_blob  )) (description (text_blob ()) (description (text_blob mem_if)) (description (text_blob .)) (description (text_blob system)) (description (text_blob  )) (description (text_blob sif)) (description (text_blob ))) (description (text_blob ;)) (description (text_blob \n)) (description (text_blob \n)) (description (text_blob typedef)) (description (text_blob   )) (description (text_blob enum)) (description (text_blob  )) (description (text_blob {)) (description (text_blob IDLE)) (description (text_blob ,)) (description (text_blob WRITE)) (description (text_blob ,)) (description (text_blob READ)) (description (text_blob ,)) (description (text_blob DONE)) (description (text_blob })) (description (text_blob  )) (description (text_blob fsm_t)) (description (text_blob ;)) (description (text_blob \n)) (description (text_blob \n)) (description (text_blob fsm_t)) (description (text_blob  )) (description (text_blob state)) (description (text_blob ;)) (description (text_blob \n)) (description (text_blob \n)) (description (text_blob DD)) (description (text_blob  )) (description (text_blob t)) (description (text_blob ;)) (description (text_blob \n)) (description (text_blob \n)) (description (endmodule endmodule)) (description (text_blob \n)) (description (text_blob \n)) (description (text_blob \n))) <EOF>)

[WARNI:PA0205] top.v:2 No timescale set for "AXI_BUS".

[WARNI:PA0205] top.v:23 No timescale set for "mem_if".

[WARNI:PA0205] top.v:30 No timescale set for "memory_ctrl1".

[WARNI:PA0205] top.v:39 No timescale set for "memory_ctrl2".

[INFO :CP0300] Compilation...

[INFO :CP0304] top.v:2 Compile interface "work@AXI_BUS".

[INFO :CP0304] top.v:23 Compile interface "work@mem_if".

[INFO :CP0303] top.v:30 Compile module "work@memory_ctrl1".

[INFO :CP0303] top.v:39 Compile module "work@memory_ctrl2".

[ERROR:CP0311] top.v:17 Undefined port used in modport: "ww_id".

[INFO :EL0526] Design Elaboration...

[NOTE :EL0503] top.v:30 Top level module "work@memory_ctrl1".

[NOTE :EL0503] top.v:39 Top level module "work@memory_ctrl2".

[NOTE :EL0504] Multiple top level modules in design.

[ERROR:CP0317] top.v:8 Undefined type "id_t1".

[ERROR:CP0317] top.v:30 Undefined type "mem_if.system1".

[ERROR:CP0317] top.v:45 Undefined type "DD".

[NOTE :EL0508] Nb Top level modules: 2.

[NOTE :EL0509] Max instance depth: 1.

[NOTE :EL0510] Nb instances: 2.

[NOTE :EL0511] Nb leaf instances: 2.

[  FATAL] : 0
[ SYNTAX] : 0
[  ERROR] : 4
[WARNING] : 4
[   NOTE] : 7

