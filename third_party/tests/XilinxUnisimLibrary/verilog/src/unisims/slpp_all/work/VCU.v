///////////////////////////////////////////////////////////////////////////////
//     Copyright (c) 1995/2017 Xilinx, Inc.
// 
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
// 
//        http://www.apache.org/licenses/LICENSE-2.0
// 
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
///////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /     Vendor      : Xilinx
// \   \   \/      Version     : 2017.1
//  \   \          Description : Xilinx Unified Simulation Library Component
//  /   /                        VCU
// /___/   /\      Filename    : VCU.v
// \   \  /  \
//  \___\/\___\
//
///////////////////////////////////////////////////////////////////////////////
//  Revision:
//
//  End Revision:
///////////////////////////////////////////////////////////////////////////////

`timescale 1 ps / 1 ps

`celldefine

module VCU #(



  parameter integer CORECLKREQ = 667,
  parameter integer DECHORRESOLUTION = 3840,
  parameter DECODERCHROMAFORMAT = "4_2_2",
  parameter DECODERCODING = "H.265",
  parameter integer DECODERCOLORDEPTH = 10,
  parameter integer DECODERNUMCORES = 2,
  parameter integer DECVERTRESOLUTION = 2160,
  parameter ENABLEDECODER = "TRUE",
  parameter ENABLEENCODER = "TRUE",
  parameter integer ENCHORRESOLUTION = 3840,
  parameter ENCODERCHROMAFORMAT = "4_2_2",
  parameter ENCODERCODING = "H.265",
  parameter integer ENCODERCOLORDEPTH = 10,
  parameter integer ENCODERNUMCORES = 4,
  parameter integer ENCVERTRESOLUTION = 2160
)(
  output VCUPLARREADYAXILITEAPB,
  output VCUPLAWREADYAXILITEAPB,
  output [1:0] VCUPLBRESPAXILITEAPB,
  output VCUPLBVALIDAXILITEAPB,
  output VCUPLCORESTATUSCLKPLL,
  output [43:0] VCUPLDECARADDR0,
  output [43:0] VCUPLDECARADDR1,
  output [1:0] VCUPLDECARBURST0,
  output [1:0] VCUPLDECARBURST1,
  output [3:0] VCUPLDECARCACHE0,
  output [3:0] VCUPLDECARCACHE1,
  output [3:0] VCUPLDECARID0,
  output [3:0] VCUPLDECARID1,
  output [7:0] VCUPLDECARLEN0,
  output [7:0] VCUPLDECARLEN1,
  output VCUPLDECARPROT0,
  output VCUPLDECARPROT1,
  output [3:0] VCUPLDECARQOS0,
  output [3:0] VCUPLDECARQOS1,
  output [2:0] VCUPLDECARSIZE0,
  output [2:0] VCUPLDECARSIZE1,
  output VCUPLDECARVALID0,
  output VCUPLDECARVALID1,
  output [43:0] VCUPLDECAWADDR0,
  output [43:0] VCUPLDECAWADDR1,
  output [1:0] VCUPLDECAWBURST0,
  output [1:0] VCUPLDECAWBURST1,
  output [3:0] VCUPLDECAWCACHE0,
  output [3:0] VCUPLDECAWCACHE1,
  output [3:0] VCUPLDECAWID0,
  output [3:0] VCUPLDECAWID1,
  output [7:0] VCUPLDECAWLEN0,
  output [7:0] VCUPLDECAWLEN1,
  output VCUPLDECAWPROT0,
  output VCUPLDECAWPROT1,
  output [3:0] VCUPLDECAWQOS0,
  output [3:0] VCUPLDECAWQOS1,
  output [2:0] VCUPLDECAWSIZE0,
  output [2:0] VCUPLDECAWSIZE1,
  output VCUPLDECAWVALID0,
  output VCUPLDECAWVALID1,
  output VCUPLDECBREADY0,
  output VCUPLDECBREADY1,
  output VCUPLDECRREADY0,
  output VCUPLDECRREADY1,
  output [127:0] VCUPLDECWDATA0,
  output [127:0] VCUPLDECWDATA1,
  output VCUPLDECWLAST0,
  output VCUPLDECWLAST1,
  output VCUPLDECWVALID0,
  output VCUPLDECWVALID1,
  output [16:0] VCUPLENCALL2CADDR,
  output VCUPLENCALL2CRVALID,
  output [319:0] VCUPLENCALL2CWDATA,
  output VCUPLENCALL2CWVALID,
  output [43:0] VCUPLENCARADDR0,
  output [43:0] VCUPLENCARADDR1,
  output [1:0] VCUPLENCARBURST0,
  output [1:0] VCUPLENCARBURST1,
  output [3:0] VCUPLENCARCACHE0,
  output [3:0] VCUPLENCARCACHE1,
  output [3:0] VCUPLENCARID0,
  output [3:0] VCUPLENCARID1,
  output [7:0] VCUPLENCARLEN0,
  output [7:0] VCUPLENCARLEN1,
  output VCUPLENCARPROT0,
  output VCUPLENCARPROT1,
  output [3:0] VCUPLENCARQOS0,
  output [3:0] VCUPLENCARQOS1,
  output [2:0] VCUPLENCARSIZE0,
  output [2:0] VCUPLENCARSIZE1,
  output VCUPLENCARVALID0,
  output VCUPLENCARVALID1,
  output [43:0] VCUPLENCAWADDR0,
  output [43:0] VCUPLENCAWADDR1,
  output [1:0] VCUPLENCAWBURST0,
  output [1:0] VCUPLENCAWBURST1,
  output [3:0] VCUPLENCAWCACHE0,
  output [3:0] VCUPLENCAWCACHE1,
  output [3:0] VCUPLENCAWID0,
  output [3:0] VCUPLENCAWID1,
  output [7:0] VCUPLENCAWLEN0,
  output [7:0] VCUPLENCAWLEN1,
  output VCUPLENCAWPROT0,
  output VCUPLENCAWPROT1,
  output [3:0] VCUPLENCAWQOS0,
  output [3:0] VCUPLENCAWQOS1,
  output [2:0] VCUPLENCAWSIZE0,
  output [2:0] VCUPLENCAWSIZE1,
  output VCUPLENCAWVALID0,
  output VCUPLENCAWVALID1,
  output VCUPLENCBREADY0,
  output VCUPLENCBREADY1,
  output VCUPLENCRREADY0,
  output VCUPLENCRREADY1,
  output [127:0] VCUPLENCWDATA0,
  output [127:0] VCUPLENCWDATA1,
  output VCUPLENCWLAST0,
  output VCUPLENCWLAST1,
  output VCUPLENCWVALID0,
  output VCUPLENCWVALID1,
  output [43:0] VCUPLMCUMAXIICDCARADDR,
  output [1:0] VCUPLMCUMAXIICDCARBURST,
  output [3:0] VCUPLMCUMAXIICDCARCACHE,
  output [2:0] VCUPLMCUMAXIICDCARID,
  output [7:0] VCUPLMCUMAXIICDCARLEN,
  output VCUPLMCUMAXIICDCARLOCK,
  output [2:0] VCUPLMCUMAXIICDCARPROT,
  output [3:0] VCUPLMCUMAXIICDCARQOS,
  output [2:0] VCUPLMCUMAXIICDCARSIZE,
  output VCUPLMCUMAXIICDCARVALID,
  output [43:0] VCUPLMCUMAXIICDCAWADDR,
  output [1:0] VCUPLMCUMAXIICDCAWBURST,
  output [3:0] VCUPLMCUMAXIICDCAWCACHE,
  output [2:0] VCUPLMCUMAXIICDCAWID,
  output [7:0] VCUPLMCUMAXIICDCAWLEN,
  output VCUPLMCUMAXIICDCAWLOCK,
  output [2:0] VCUPLMCUMAXIICDCAWPROT,
  output [3:0] VCUPLMCUMAXIICDCAWQOS,
  output [2:0] VCUPLMCUMAXIICDCAWSIZE,
  output VCUPLMCUMAXIICDCAWVALID,
  output VCUPLMCUMAXIICDCBREADY,
  output VCUPLMCUMAXIICDCRREADY,
  output [31:0] VCUPLMCUMAXIICDCWDATA,
  output VCUPLMCUMAXIICDCWLAST,
  output [3:0] VCUPLMCUMAXIICDCWSTRB,
  output VCUPLMCUMAXIICDCWVALID,
  output VCUPLMCUSTATUSCLKPLL,
  output VCUPLPINTREQ,
  output VCUPLPLLSTATUSPLLLOCK,
  output VCUPLPWRSUPPLYSTATUSVCCAUX,
  output VCUPLPWRSUPPLYSTATUSVCUINT,
  output [31:0] VCUPLRDATAAXILITEAPB,
  output [1:0] VCUPLRRESPAXILITEAPB,
  output VCUPLRVALIDAXILITEAPB,
  output VCUPLWREADYAXILITEAPB,

  input INITPLVCUGASKETCLAMPCONTROLLVLSHVCCINTD,
  input [19:0] PLVCUARADDRAXILITEAPB,
  input [2:0] PLVCUARPROTAXILITEAPB,
  input PLVCUARVALIDAXILITEAPB,
  input [19:0] PLVCUAWADDRAXILITEAPB,
  input [2:0] PLVCUAWPROTAXILITEAPB,
  input PLVCUAWVALIDAXILITEAPB,
  input PLVCUAXIDECCLK,
  input PLVCUAXIENCCLK,
  input PLVCUAXILITECLK,
  input PLVCUAXIMCUCLK,
  input PLVCUBREADYAXILITEAPB,
  input PLVCUCORECLK,
  input PLVCUDECARREADY0,
  input PLVCUDECARREADY1,
  input PLVCUDECAWREADY0,
  input PLVCUDECAWREADY1,
  input [3:0] PLVCUDECBID0,
  input [3:0] PLVCUDECBID1,
  input [1:0] PLVCUDECBRESP0,
  input [1:0] PLVCUDECBRESP1,
  input PLVCUDECBVALID0,
  input PLVCUDECBVALID1,
  input [127:0] PLVCUDECRDATA0,
  input [127:0] PLVCUDECRDATA1,
  input [3:0] PLVCUDECRID0,
  input [3:0] PLVCUDECRID1,
  input PLVCUDECRLAST0,
  input PLVCUDECRLAST1,
  input [1:0] PLVCUDECRRESP0,
  input [1:0] PLVCUDECRRESP1,
  input PLVCUDECRVALID0,
  input PLVCUDECRVALID1,
  input PLVCUDECWREADY0,
  input PLVCUDECWREADY1,
  input [319:0] PLVCUENCALL2CRDATA,
  input PLVCUENCALL2CRREADY,
  input PLVCUENCARREADY0,
  input PLVCUENCARREADY1,
  input PLVCUENCAWREADY0,
  input PLVCUENCAWREADY1,
  input [3:0] PLVCUENCBID0,
  input [3:0] PLVCUENCBID1,
  input [1:0] PLVCUENCBRESP0,
  input [1:0] PLVCUENCBRESP1,
  input PLVCUENCBVALID0,
  input PLVCUENCBVALID1,
  input PLVCUENCL2CCLK,
  input [127:0] PLVCUENCRDATA0,
  input [127:0] PLVCUENCRDATA1,
  input [3:0] PLVCUENCRID0,
  input [3:0] PLVCUENCRID1,
  input PLVCUENCRLAST0,
  input PLVCUENCRLAST1,
  input [1:0] PLVCUENCRRESP0,
  input [1:0] PLVCUENCRRESP1,
  input PLVCUENCRVALID0,
  input PLVCUENCRVALID1,
  input PLVCUENCWREADY0,
  input PLVCUENCWREADY1,
  input PLVCUMCUCLK,
  input PLVCUMCUMAXIICDCARREADY,
  input PLVCUMCUMAXIICDCAWREADY,
  input [2:0] PLVCUMCUMAXIICDCBID,
  input [1:0] PLVCUMCUMAXIICDCBRESP,
  input PLVCUMCUMAXIICDCBVALID,
  input [31:0] PLVCUMCUMAXIICDCRDATA,
  input [2:0] PLVCUMCUMAXIICDCRID,
  input PLVCUMCUMAXIICDCRLAST,
  input [1:0] PLVCUMCUMAXIICDCRRESP,
  input PLVCUMCUMAXIICDCRVALID,
  input PLVCUMCUMAXIICDCWREADY,
  input PLVCUPLLREFCLKPL,
  input PLVCURAWRSTN,
  input PLVCURREADYAXILITEAPB,
  input [31:0] PLVCUWDATAAXILITEAPB,
  input [3:0] PLVCUWSTRBAXILITEAPB,
  input PLVCUWVALIDAXILITEAPB
);

// define constants
  localparam MODULE_NAME = "VCU";
  
// Parameter encodings and registers
  localparam DECODERCHROMAFORMAT_4_2_0 = 1;
  localparam DECODERCHROMAFORMAT_4_2_2 = 0;
  localparam DECODERCODING_H_264 = 1;
  localparam DECODERCODING_H_265 = 0;
  localparam ENABLEDECODER_FALSE = 1;
  localparam ENABLEDECODER_TRUE = 0;
  localparam ENABLEENCODER_FALSE = 1;
  localparam ENABLEENCODER_TRUE = 0;
  localparam ENCODERCHROMAFORMAT_4_2_0 = 1;
  localparam ENCODERCHROMAFORMAT_4_2_2 = 0;
  localparam ENCODERCODING_H_264 = 1;
  localparam ENCODERCODING_H_265 = 0;

  reg trig_attr = 1'b0;
// include dynamic registers - XILINX test only



  reg [31:0] CORECLKREQ_REG = CORECLKREQ;
  reg [31:0] DECHORRESOLUTION_REG = DECHORRESOLUTION;
  reg [40:1] DECODERCHROMAFORMAT_REG = DECODERCHROMAFORMAT;
  reg [40:1] DECODERCODING_REG = DECODERCODING;
  reg [31:0] DECODERCOLORDEPTH_REG = DECODERCOLORDEPTH;
  reg [31:0] DECODERNUMCORES_REG = DECODERNUMCORES;
  reg [31:0] DECVERTRESOLUTION_REG = DECVERTRESOLUTION;
  reg [40:1] ENABLEDECODER_REG = ENABLEDECODER;
  reg [40:1] ENABLEENCODER_REG = ENABLEENCODER;
  reg [31:0] ENCHORRESOLUTION_REG = ENCHORRESOLUTION;
  reg [40:1] ENCODERCHROMAFORMAT_REG = ENCODERCHROMAFORMAT;
  reg [40:1] ENCODERCODING_REG = ENCODERCODING;
  reg [31:0] ENCODERCOLORDEPTH_REG = ENCODERCOLORDEPTH;
  reg [31:0] ENCODERNUMCORES_REG = ENCODERNUMCORES;
  reg [31:0] ENCVERTRESOLUTION_REG = ENCVERTRESOLUTION;



















  reg [9:0] CORECLKREQ_BIN;
  reg [13:0] DECHORRESOLUTION_BIN;
  reg DECODERCHROMAFORMAT_BIN;
  reg DECODERCODING_BIN;
  reg [3:0] DECODERCOLORDEPTH_BIN;
  reg [1:0] DECODERNUMCORES_BIN;
  reg [12:0] DECVERTRESOLUTION_BIN;
  reg ENABLEDECODER_BIN;
  reg ENABLEENCODER_BIN;
  reg [13:0] ENCHORRESOLUTION_BIN;
  reg ENCODERCHROMAFORMAT_BIN;
  reg ENCODERCODING_BIN;
  reg [3:0] ENCODERCOLORDEPTH_BIN;
  reg [2:0] ENCODERNUMCORES_BIN;
  reg [12:0] ENCVERTRESOLUTION_BIN;





  reg attr_test = 1'b0;


  reg attr_err = 1'b0;
  tri0 glblGSR = glbl.GSR;

//  reg VCUPLCORESTATUSCLKPLL_out;
//  reg VCUPLMCUSTATUSCLKPLL_out;
  reg VCUPLARREADYAXILITEAPB_out;
  reg VCUPLAWREADYAXILITEAPB_out;
  reg [1:0] VCUPLBRESPAXILITEAPB_out;
  reg VCUPLBVALIDAXILITEAPB_out;
  reg VCUPLCORESTATUSCLKPLL_out;
  reg [43:0] VCUPLDECARADDR0_out;
  reg [43:0] VCUPLDECARADDR1_out;
  reg [1:0] VCUPLDECARBURST0_out;
  reg [1:0] VCUPLDECARBURST1_out;
  reg [3:0] VCUPLDECARCACHE0_out;
  reg [3:0] VCUPLDECARCACHE1_out;
  reg [3:0] VCUPLDECARID0_out;
  reg [3:0] VCUPLDECARID1_out;
  reg [7:0] VCUPLDECARLEN0_out;
  reg [7:0] VCUPLDECARLEN1_out;
  reg VCUPLDECARPROT0_out;
  reg VCUPLDECARPROT1_out;
  reg [3:0] VCUPLDECARQOS0_out;
  reg [3:0] VCUPLDECARQOS1_out;
  reg [2:0] VCUPLDECARSIZE0_out;
  reg [2:0] VCUPLDECARSIZE1_out;
  reg VCUPLDECARVALID0_out;
  reg VCUPLDECARVALID1_out;
  reg [43:0] VCUPLDECAWADDR0_out;
  reg [43:0] VCUPLDECAWADDR1_out;
  reg [1:0] VCUPLDECAWBURST0_out;
  reg [1:0] VCUPLDECAWBURST1_out;
  reg [3:0] VCUPLDECAWCACHE0_out;
  reg [3:0] VCUPLDECAWCACHE1_out;
  reg [3:0] VCUPLDECAWID0_out;
  reg [3:0] VCUPLDECAWID1_out;
  reg [7:0] VCUPLDECAWLEN0_out;
  reg [7:0] VCUPLDECAWLEN1_out;
  reg VCUPLDECAWPROT0_out;
  reg VCUPLDECAWPROT1_out;
  reg [3:0] VCUPLDECAWQOS0_out;
  reg [3:0] VCUPLDECAWQOS1_out;
  reg [2:0] VCUPLDECAWSIZE0_out;
  reg [2:0] VCUPLDECAWSIZE1_out;
  reg VCUPLDECAWVALID0_out;
  reg VCUPLDECAWVALID1_out;
  reg VCUPLDECBREADY0_out;
  reg VCUPLDECBREADY1_out;
  reg VCUPLDECRREADY0_out;
  reg VCUPLDECRREADY1_out;
  reg [127:0] VCUPLDECWDATA0_out;
  reg [127:0] VCUPLDECWDATA1_out;
  reg VCUPLDECWLAST0_out;
  reg VCUPLDECWLAST1_out;
  reg VCUPLDECWVALID0_out;
  reg VCUPLDECWVALID1_out;
  reg [16:0] VCUPLENCALL2CADDR_out;
  reg VCUPLENCALL2CRVALID_out;
  reg [319:0] VCUPLENCALL2CWDATA_out;
  reg VCUPLENCALL2CWVALID_out;
  reg [43:0] VCUPLENCARADDR0_out;
  reg [43:0] VCUPLENCARADDR1_out;
  reg [1:0] VCUPLENCARBURST0_out;
  reg [1:0] VCUPLENCARBURST1_out;
  reg [3:0] VCUPLENCARCACHE0_out;
  reg [3:0] VCUPLENCARCACHE1_out;
  reg [3:0] VCUPLENCARID0_out;
  reg [3:0] VCUPLENCARID1_out;
  reg [7:0] VCUPLENCARLEN0_out;
  reg [7:0] VCUPLENCARLEN1_out;
  reg VCUPLENCARPROT0_out;
  reg VCUPLENCARPROT1_out;
  reg [3:0] VCUPLENCARQOS0_out;
  reg [3:0] VCUPLENCARQOS1_out;
  reg [2:0] VCUPLENCARSIZE0_out;
  reg [2:0] VCUPLENCARSIZE1_out;
  reg VCUPLENCARVALID0_out;
  reg VCUPLENCARVALID1_out;
  reg [43:0] VCUPLENCAWADDR0_out;
  reg [43:0] VCUPLENCAWADDR1_out;
  reg [1:0] VCUPLENCAWBURST0_out;
  reg [1:0] VCUPLENCAWBURST1_out;
  reg [3:0] VCUPLENCAWCACHE0_out;
  reg [3:0] VCUPLENCAWCACHE1_out;
  reg [3:0] VCUPLENCAWID0_out;
  reg [3:0] VCUPLENCAWID1_out;
  reg [7:0] VCUPLENCAWLEN0_out;
  reg [7:0] VCUPLENCAWLEN1_out;
  reg VCUPLENCAWPROT0_out;
  reg VCUPLENCAWPROT1_out;
  reg [3:0] VCUPLENCAWQOS0_out;
  reg [3:0] VCUPLENCAWQOS1_out;
  reg [2:0] VCUPLENCAWSIZE0_out;
  reg [2:0] VCUPLENCAWSIZE1_out;
  reg VCUPLENCAWVALID0_out;
  reg VCUPLENCAWVALID1_out;
  reg VCUPLENCBREADY0_out;
  reg VCUPLENCBREADY1_out;
  reg VCUPLENCRREADY0_out;
  reg VCUPLENCRREADY1_out;
  reg [127:0] VCUPLENCWDATA0_out;
  reg [127:0] VCUPLENCWDATA1_out;
  reg VCUPLENCWLAST0_out;
  reg VCUPLENCWLAST1_out;
  reg VCUPLENCWVALID0_out;
  reg VCUPLENCWVALID1_out;
  reg [43:0] VCUPLMCUMAXIICDCARADDR_out;
  reg [1:0] VCUPLMCUMAXIICDCARBURST_out;
  reg [3:0] VCUPLMCUMAXIICDCARCACHE_out;
  reg [2:0] VCUPLMCUMAXIICDCARID_out;
  reg [7:0] VCUPLMCUMAXIICDCARLEN_out;
  reg VCUPLMCUMAXIICDCARLOCK_out;
  reg [2:0] VCUPLMCUMAXIICDCARPROT_out;
  reg [3:0] VCUPLMCUMAXIICDCARQOS_out;
  reg [2:0] VCUPLMCUMAXIICDCARSIZE_out;
  reg VCUPLMCUMAXIICDCARVALID_out;
  reg [43:0] VCUPLMCUMAXIICDCAWADDR_out;
  reg [1:0] VCUPLMCUMAXIICDCAWBURST_out;
  reg [3:0] VCUPLMCUMAXIICDCAWCACHE_out;
  reg [2:0] VCUPLMCUMAXIICDCAWID_out;
  reg [7:0] VCUPLMCUMAXIICDCAWLEN_out;
  reg VCUPLMCUMAXIICDCAWLOCK_out;
  reg [2:0] VCUPLMCUMAXIICDCAWPROT_out;
  reg [3:0] VCUPLMCUMAXIICDCAWQOS_out;
  reg [2:0] VCUPLMCUMAXIICDCAWSIZE_out;
  reg VCUPLMCUMAXIICDCAWVALID_out;
  reg VCUPLMCUMAXIICDCBREADY_out;
  reg VCUPLMCUMAXIICDCRREADY_out;
  reg [31:0] VCUPLMCUMAXIICDCWDATA_out;
  reg VCUPLMCUMAXIICDCWLAST_out;
  reg [3:0] VCUPLMCUMAXIICDCWSTRB_out;
  reg VCUPLMCUMAXIICDCWVALID_out;
  reg VCUPLMCUSTATUSCLKPLL_out;
  reg VCUPLPINTREQ_out;
  reg VCUPLPLLSTATUSPLLLOCK_out;
  reg VCUPLPWRSUPPLYSTATUSVCCAUX_out;
  reg VCUPLPWRSUPPLYSTATUSVCUINT_out;
  reg [31:0] VCUPLRDATAAXILITEAPB_out;
  reg [1:0] VCUPLRRESPAXILITEAPB_out;
  reg VCUPLRVALIDAXILITEAPB_out;
  reg VCUPLWREADYAXILITEAPB_out;

  wire INITPLVCUGASKETCLAMPCONTROLLVLSHVCCINTD_in;
  wire PLVCUARVALIDAXILITEAPB_in;
  wire PLVCUAWVALIDAXILITEAPB_in;
  wire PLVCUAXIDECCLK_in;
  wire PLVCUAXIENCCLK_in;
  wire PLVCUAXILITECLK_in;
  wire PLVCUAXIMCUCLK_in;
  wire PLVCUBREADYAXILITEAPB_in;
  wire PLVCUCORECLK_in;
  wire PLVCUDECARREADY0_in;
  wire PLVCUDECARREADY1_in;
  wire PLVCUDECAWREADY0_in;
  wire PLVCUDECAWREADY1_in;
  wire PLVCUDECBVALID0_in;
  wire PLVCUDECBVALID1_in;
  wire PLVCUDECRLAST0_in;
  wire PLVCUDECRLAST1_in;
  wire PLVCUDECRVALID0_in;
  wire PLVCUDECRVALID1_in;
  wire PLVCUDECWREADY0_in;
  wire PLVCUDECWREADY1_in;
  wire PLVCUENCALL2CRREADY_in;
  wire PLVCUENCARREADY0_in;
  wire PLVCUENCARREADY1_in;
  wire PLVCUENCAWREADY0_in;
  wire PLVCUENCAWREADY1_in;
  wire PLVCUENCBVALID0_in;
  wire PLVCUENCBVALID1_in;
  wire PLVCUENCL2CCLK_in;
  wire PLVCUENCRLAST0_in;
  wire PLVCUENCRLAST1_in;
  wire PLVCUENCRVALID0_in;
  wire PLVCUENCRVALID1_in;
  wire PLVCUENCWREADY0_in;
  wire PLVCUENCWREADY1_in;
  wire PLVCUMCUCLK_in;
  wire PLVCUMCUMAXIICDCARREADY_in;
  wire PLVCUMCUMAXIICDCAWREADY_in;
  wire PLVCUMCUMAXIICDCBVALID_in;
  wire PLVCUMCUMAXIICDCRLAST_in;
  wire PLVCUMCUMAXIICDCRVALID_in;
  wire PLVCUMCUMAXIICDCWREADY_in;
  wire PLVCUPLLREFCLKPL_in;
  wire PLVCURAWRSTN_in;
  wire PLVCURREADYAXILITEAPB_in;
  wire PLVCUWVALIDAXILITEAPB_in;
  wire [127:0] PLVCUDECRDATA0_in;
  wire [127:0] PLVCUDECRDATA1_in;
  wire [127:0] PLVCUENCRDATA0_in;
  wire [127:0] PLVCUENCRDATA1_in;
  wire [19:0] PLVCUARADDRAXILITEAPB_in;
  wire [19:0] PLVCUAWADDRAXILITEAPB_in;
  wire [1:0] PLVCUDECBRESP0_in;
  wire [1:0] PLVCUDECBRESP1_in;
  wire [1:0] PLVCUDECRRESP0_in;
  wire [1:0] PLVCUDECRRESP1_in;
  wire [1:0] PLVCUENCBRESP0_in;
  wire [1:0] PLVCUENCBRESP1_in;
  wire [1:0] PLVCUENCRRESP0_in;
  wire [1:0] PLVCUENCRRESP1_in;
  wire [1:0] PLVCUMCUMAXIICDCBRESP_in;
  wire [1:0] PLVCUMCUMAXIICDCRRESP_in;
  wire [2:0] PLVCUARPROTAXILITEAPB_in;
  wire [2:0] PLVCUAWPROTAXILITEAPB_in;
  wire [2:0] PLVCUMCUMAXIICDCBID_in;
  wire [2:0] PLVCUMCUMAXIICDCRID_in;
  wire [319:0] PLVCUENCALL2CRDATA_in;
  wire [31:0] PLVCUMCUMAXIICDCRDATA_in;
  wire [31:0] PLVCUWDATAAXILITEAPB_in;
  wire [3:0] PLVCUDECBID0_in;
  wire [3:0] PLVCUDECBID1_in;
  wire [3:0] PLVCUDECRID0_in;
  wire [3:0] PLVCUDECRID1_in;
  wire [3:0] PLVCUENCBID0_in;
  wire [3:0] PLVCUENCBID1_in;
  wire [3:0] PLVCUENCRID0_in;
  wire [3:0] PLVCUENCRID1_in;
  wire [3:0] PLVCUWSTRBAXILITEAPB_in;













































































//  assign VCUPLCORESTATUSCLKPLL = VCUPLCORESTATUSCLKPLL_out;
//  assign VCUPLMCUSTATUSCLKPLL = VCUPLMCUSTATUSCLKPLL_out;
  assign VCUPLARREADYAXILITEAPB = VCUPLARREADYAXILITEAPB_out;
  assign VCUPLAWREADYAXILITEAPB = VCUPLAWREADYAXILITEAPB_out;
  assign VCUPLBRESPAXILITEAPB = VCUPLBRESPAXILITEAPB_out;
  assign VCUPLBVALIDAXILITEAPB = VCUPLBVALIDAXILITEAPB_out;
  assign VCUPLCORESTATUSCLKPLL = VCUPLCORESTATUSCLKPLL_out;
  assign VCUPLDECARADDR0 = VCUPLDECARADDR0_out;
  assign VCUPLDECARADDR1 = VCUPLDECARADDR1_out;
  assign VCUPLDECARBURST0 = VCUPLDECARBURST0_out;
  assign VCUPLDECARBURST1 = VCUPLDECARBURST1_out;
  assign VCUPLDECARCACHE0 = VCUPLDECARCACHE0_out;
  assign VCUPLDECARCACHE1 = VCUPLDECARCACHE1_out;
  assign VCUPLDECARID0 = VCUPLDECARID0_out;
  assign VCUPLDECARID1 = VCUPLDECARID1_out;
  assign VCUPLDECARLEN0 = VCUPLDECARLEN0_out;
  assign VCUPLDECARLEN1 = VCUPLDECARLEN1_out;
  assign VCUPLDECARPROT0 = VCUPLDECARPROT0_out;
  assign VCUPLDECARPROT1 = VCUPLDECARPROT1_out;
  assign VCUPLDECARQOS0 = VCUPLDECARQOS0_out;
  assign VCUPLDECARQOS1 = VCUPLDECARQOS1_out;
  assign VCUPLDECARSIZE0 = VCUPLDECARSIZE0_out;
  assign VCUPLDECARSIZE1 = VCUPLDECARSIZE1_out;
  assign VCUPLDECARVALID0 = VCUPLDECARVALID0_out;
  assign VCUPLDECARVALID1 = VCUPLDECARVALID1_out;
  assign VCUPLDECAWADDR0 = VCUPLDECAWADDR0_out;
  assign VCUPLDECAWADDR1 = VCUPLDECAWADDR1_out;
  assign VCUPLDECAWBURST0 = VCUPLDECAWBURST0_out;
  assign VCUPLDECAWBURST1 = VCUPLDECAWBURST1_out;
  assign VCUPLDECAWCACHE0 = VCUPLDECAWCACHE0_out;
  assign VCUPLDECAWCACHE1 = VCUPLDECAWCACHE1_out;
  assign VCUPLDECAWID0 = VCUPLDECAWID0_out;
  assign VCUPLDECAWID1 = VCUPLDECAWID1_out;
  assign VCUPLDECAWLEN0 = VCUPLDECAWLEN0_out;
  assign VCUPLDECAWLEN1 = VCUPLDECAWLEN1_out;
  assign VCUPLDECAWPROT0 = VCUPLDECAWPROT0_out;
  assign VCUPLDECAWPROT1 = VCUPLDECAWPROT1_out;
  assign VCUPLDECAWQOS0 = VCUPLDECAWQOS0_out;
  assign VCUPLDECAWQOS1 = VCUPLDECAWQOS1_out;
  assign VCUPLDECAWSIZE0 = VCUPLDECAWSIZE0_out;
  assign VCUPLDECAWSIZE1 = VCUPLDECAWSIZE1_out;
  assign VCUPLDECAWVALID0 = VCUPLDECAWVALID0_out;
  assign VCUPLDECAWVALID1 = VCUPLDECAWVALID1_out;
  assign VCUPLDECBREADY0 = VCUPLDECBREADY0_out;
  assign VCUPLDECBREADY1 = VCUPLDECBREADY1_out;
  assign VCUPLDECRREADY0 = VCUPLDECRREADY0_out;
  assign VCUPLDECRREADY1 = VCUPLDECRREADY1_out;
  assign VCUPLDECWDATA0 = VCUPLDECWDATA0_out;
  assign VCUPLDECWDATA1 = VCUPLDECWDATA1_out;
  assign VCUPLDECWLAST0 = VCUPLDECWLAST0_out;
  assign VCUPLDECWLAST1 = VCUPLDECWLAST1_out;
  assign VCUPLDECWVALID0 = VCUPLDECWVALID0_out;
  assign VCUPLDECWVALID1 = VCUPLDECWVALID1_out;
  assign VCUPLENCALL2CADDR = VCUPLENCALL2CADDR_out;
  assign VCUPLENCALL2CRVALID = VCUPLENCALL2CRVALID_out;
  assign VCUPLENCALL2CWDATA = VCUPLENCALL2CWDATA_out;
  assign VCUPLENCALL2CWVALID = VCUPLENCALL2CWVALID_out;
  assign VCUPLENCARADDR0 = VCUPLENCARADDR0_out;
  assign VCUPLENCARADDR1 = VCUPLENCARADDR1_out;
  assign VCUPLENCARBURST0 = VCUPLENCARBURST0_out;
  assign VCUPLENCARBURST1 = VCUPLENCARBURST1_out;
  assign VCUPLENCARCACHE0 = VCUPLENCARCACHE0_out;
  assign VCUPLENCARCACHE1 = VCUPLENCARCACHE1_out;
  assign VCUPLENCARID0 = VCUPLENCARID0_out;
  assign VCUPLENCARID1 = VCUPLENCARID1_out;
  assign VCUPLENCARLEN0 = VCUPLENCARLEN0_out;
  assign VCUPLENCARLEN1 = VCUPLENCARLEN1_out;
  assign VCUPLENCARPROT0 = VCUPLENCARPROT0_out;
  assign VCUPLENCARPROT1 = VCUPLENCARPROT1_out;
  assign VCUPLENCARQOS0 = VCUPLENCARQOS0_out;
  assign VCUPLENCARQOS1 = VCUPLENCARQOS1_out;
  assign VCUPLENCARSIZE0 = VCUPLENCARSIZE0_out;
  assign VCUPLENCARSIZE1 = VCUPLENCARSIZE1_out;
  assign VCUPLENCARVALID0 = VCUPLENCARVALID0_out;
  assign VCUPLENCARVALID1 = VCUPLENCARVALID1_out;
  assign VCUPLENCAWADDR0 = VCUPLENCAWADDR0_out;
  assign VCUPLENCAWADDR1 = VCUPLENCAWADDR1_out;
  assign VCUPLENCAWBURST0 = VCUPLENCAWBURST0_out;
  assign VCUPLENCAWBURST1 = VCUPLENCAWBURST1_out;
  assign VCUPLENCAWCACHE0 = VCUPLENCAWCACHE0_out;
  assign VCUPLENCAWCACHE1 = VCUPLENCAWCACHE1_out;
  assign VCUPLENCAWID0 = VCUPLENCAWID0_out;
  assign VCUPLENCAWID1 = VCUPLENCAWID1_out;
  assign VCUPLENCAWLEN0 = VCUPLENCAWLEN0_out;
  assign VCUPLENCAWLEN1 = VCUPLENCAWLEN1_out;
  assign VCUPLENCAWPROT0 = VCUPLENCAWPROT0_out;
  assign VCUPLENCAWPROT1 = VCUPLENCAWPROT1_out;
  assign VCUPLENCAWQOS0 = VCUPLENCAWQOS0_out;
  assign VCUPLENCAWQOS1 = VCUPLENCAWQOS1_out;
  assign VCUPLENCAWSIZE0 = VCUPLENCAWSIZE0_out;
  assign VCUPLENCAWSIZE1 = VCUPLENCAWSIZE1_out;
  assign VCUPLENCAWVALID0 = VCUPLENCAWVALID0_out;
  assign VCUPLENCAWVALID1 = VCUPLENCAWVALID1_out;
  assign VCUPLENCBREADY0 = VCUPLENCBREADY0_out;
  assign VCUPLENCBREADY1 = VCUPLENCBREADY1_out;
  assign VCUPLENCRREADY0 = VCUPLENCRREADY0_out;
  assign VCUPLENCRREADY1 = VCUPLENCRREADY1_out;
  assign VCUPLENCWDATA0 = VCUPLENCWDATA0_out;
  assign VCUPLENCWDATA1 = VCUPLENCWDATA1_out;
  assign VCUPLENCWLAST0 = VCUPLENCWLAST0_out;
  assign VCUPLENCWLAST1 = VCUPLENCWLAST1_out;
  assign VCUPLENCWVALID0 = VCUPLENCWVALID0_out;
  assign VCUPLENCWVALID1 = VCUPLENCWVALID1_out;
  assign VCUPLMCUMAXIICDCARADDR = VCUPLMCUMAXIICDCARADDR_out;
  assign VCUPLMCUMAXIICDCARBURST = VCUPLMCUMAXIICDCARBURST_out;
  assign VCUPLMCUMAXIICDCARCACHE = VCUPLMCUMAXIICDCARCACHE_out;
  assign VCUPLMCUMAXIICDCARID = VCUPLMCUMAXIICDCARID_out;
  assign VCUPLMCUMAXIICDCARLEN = VCUPLMCUMAXIICDCARLEN_out;
  assign VCUPLMCUMAXIICDCARLOCK = VCUPLMCUMAXIICDCARLOCK_out;
  assign VCUPLMCUMAXIICDCARPROT = VCUPLMCUMAXIICDCARPROT_out;
  assign VCUPLMCUMAXIICDCARQOS = VCUPLMCUMAXIICDCARQOS_out;
  assign VCUPLMCUMAXIICDCARSIZE = VCUPLMCUMAXIICDCARSIZE_out;
  assign VCUPLMCUMAXIICDCARVALID = VCUPLMCUMAXIICDCARVALID_out;
  assign VCUPLMCUMAXIICDCAWADDR = VCUPLMCUMAXIICDCAWADDR_out;
  assign VCUPLMCUMAXIICDCAWBURST = VCUPLMCUMAXIICDCAWBURST_out;
  assign VCUPLMCUMAXIICDCAWCACHE = VCUPLMCUMAXIICDCAWCACHE_out;
  assign VCUPLMCUMAXIICDCAWID = VCUPLMCUMAXIICDCAWID_out;
  assign VCUPLMCUMAXIICDCAWLEN = VCUPLMCUMAXIICDCAWLEN_out;
  assign VCUPLMCUMAXIICDCAWLOCK = VCUPLMCUMAXIICDCAWLOCK_out;
  assign VCUPLMCUMAXIICDCAWPROT = VCUPLMCUMAXIICDCAWPROT_out;
  assign VCUPLMCUMAXIICDCAWQOS = VCUPLMCUMAXIICDCAWQOS_out;
  assign VCUPLMCUMAXIICDCAWSIZE = VCUPLMCUMAXIICDCAWSIZE_out;
  assign VCUPLMCUMAXIICDCAWVALID = VCUPLMCUMAXIICDCAWVALID_out;
  assign VCUPLMCUMAXIICDCBREADY = VCUPLMCUMAXIICDCBREADY_out;
  assign VCUPLMCUMAXIICDCRREADY = VCUPLMCUMAXIICDCRREADY_out;
  assign VCUPLMCUMAXIICDCWDATA = VCUPLMCUMAXIICDCWDATA_out;
  assign VCUPLMCUMAXIICDCWLAST = VCUPLMCUMAXIICDCWLAST_out;
  assign VCUPLMCUMAXIICDCWSTRB = VCUPLMCUMAXIICDCWSTRB_out;
  assign VCUPLMCUMAXIICDCWVALID = VCUPLMCUMAXIICDCWVALID_out;
  assign VCUPLMCUSTATUSCLKPLL = VCUPLMCUSTATUSCLKPLL_out;
  assign VCUPLPINTREQ = VCUPLPINTREQ_out;
  assign VCUPLPLLSTATUSPLLLOCK = VCUPLPLLSTATUSPLLLOCK_out;
  assign VCUPLPWRSUPPLYSTATUSVCCAUX = VCUPLPWRSUPPLYSTATUSVCCAUX_out;
  assign VCUPLPWRSUPPLYSTATUSVCUINT = VCUPLPWRSUPPLYSTATUSVCUINT_out;
  assign VCUPLRDATAAXILITEAPB = VCUPLRDATAAXILITEAPB_out;
  assign VCUPLRRESPAXILITEAPB = VCUPLRRESPAXILITEAPB_out;
  assign VCUPLRVALIDAXILITEAPB = VCUPLRVALIDAXILITEAPB_out;
  assign VCUPLWREADYAXILITEAPB = VCUPLWREADYAXILITEAPB_out;











































































  assign PLVCUARADDRAXILITEAPB_in = PLVCUARADDRAXILITEAPB;
  assign PLVCUARPROTAXILITEAPB_in = PLVCUARPROTAXILITEAPB;
  assign PLVCUARVALIDAXILITEAPB_in = PLVCUARVALIDAXILITEAPB;
  assign PLVCUAWADDRAXILITEAPB_in = PLVCUAWADDRAXILITEAPB;
  assign PLVCUAWPROTAXILITEAPB_in = PLVCUAWPROTAXILITEAPB;
  assign PLVCUAWVALIDAXILITEAPB_in = PLVCUAWVALIDAXILITEAPB;
  assign PLVCUAXIDECCLK_in = PLVCUAXIDECCLK;
  assign PLVCUAXIENCCLK_in = PLVCUAXIENCCLK;
  assign PLVCUAXILITECLK_in = PLVCUAXILITECLK;
  assign PLVCUAXIMCUCLK_in = PLVCUAXIMCUCLK;
  assign PLVCUBREADYAXILITEAPB_in = PLVCUBREADYAXILITEAPB;
  assign PLVCUDECARREADY0_in = PLVCUDECARREADY0;
  assign PLVCUDECARREADY1_in = PLVCUDECARREADY1;
  assign PLVCUDECAWREADY0_in = PLVCUDECAWREADY0;
  assign PLVCUDECAWREADY1_in = PLVCUDECAWREADY1;
  assign PLVCUDECBID0_in = PLVCUDECBID0;
  assign PLVCUDECBID1_in = PLVCUDECBID1;
  assign PLVCUDECBRESP0_in = PLVCUDECBRESP0;
  assign PLVCUDECBRESP1_in = PLVCUDECBRESP1;
  assign PLVCUDECBVALID0_in = PLVCUDECBVALID0;
  assign PLVCUDECBVALID1_in = PLVCUDECBVALID1;
  assign PLVCUDECRDATA0_in = PLVCUDECRDATA0;
  assign PLVCUDECRDATA1_in = PLVCUDECRDATA1;
  assign PLVCUDECRID0_in = PLVCUDECRID0;
  assign PLVCUDECRID1_in = PLVCUDECRID1;
  assign PLVCUDECRLAST0_in = PLVCUDECRLAST0;
  assign PLVCUDECRLAST1_in = PLVCUDECRLAST1;
  assign PLVCUDECRRESP0_in = PLVCUDECRRESP0;
  assign PLVCUDECRRESP1_in = PLVCUDECRRESP1;
  assign PLVCUDECRVALID0_in = PLVCUDECRVALID0;
  assign PLVCUDECRVALID1_in = PLVCUDECRVALID1;
  assign PLVCUDECWREADY0_in = PLVCUDECWREADY0;
  assign PLVCUDECWREADY1_in = PLVCUDECWREADY1;
  assign PLVCUENCALL2CRDATA_in = PLVCUENCALL2CRDATA;
  assign PLVCUENCALL2CRREADY_in = (PLVCUENCALL2CRREADY === 1'bz) || PLVCUENCALL2CRREADY; // rv 1
  assign PLVCUENCARREADY0_in = PLVCUENCARREADY0;
  assign PLVCUENCARREADY1_in = PLVCUENCARREADY1;
  assign PLVCUENCAWREADY0_in = PLVCUENCAWREADY0;
  assign PLVCUENCAWREADY1_in = PLVCUENCAWREADY1;
  assign PLVCUENCBID0_in = PLVCUENCBID0;
  assign PLVCUENCBID1_in = PLVCUENCBID1;
  assign PLVCUENCBRESP0_in = PLVCUENCBRESP0;
  assign PLVCUENCBRESP1_in = PLVCUENCBRESP1;
  assign PLVCUENCBVALID0_in = PLVCUENCBVALID0;
  assign PLVCUENCBVALID1_in = PLVCUENCBVALID1;
  assign PLVCUENCL2CCLK_in = PLVCUENCL2CCLK;
  assign PLVCUENCRDATA0_in = PLVCUENCRDATA0;
  assign PLVCUENCRDATA1_in = PLVCUENCRDATA1;
  assign PLVCUENCRID0_in = PLVCUENCRID0;
  assign PLVCUENCRID1_in = PLVCUENCRID1;
  assign PLVCUENCRLAST0_in = PLVCUENCRLAST0;
  assign PLVCUENCRLAST1_in = PLVCUENCRLAST1;
  assign PLVCUENCRRESP0_in = PLVCUENCRRESP0;
  assign PLVCUENCRRESP1_in = PLVCUENCRRESP1;
  assign PLVCUENCRVALID0_in = PLVCUENCRVALID0;
  assign PLVCUENCRVALID1_in = PLVCUENCRVALID1;
  assign PLVCUENCWREADY0_in = PLVCUENCWREADY0;
  assign PLVCUENCWREADY1_in = PLVCUENCWREADY1;
  assign PLVCUMCUMAXIICDCARREADY_in = PLVCUMCUMAXIICDCARREADY;
  assign PLVCUMCUMAXIICDCAWREADY_in = PLVCUMCUMAXIICDCAWREADY;
  assign PLVCUMCUMAXIICDCBID_in = PLVCUMCUMAXIICDCBID;
  assign PLVCUMCUMAXIICDCBRESP_in = PLVCUMCUMAXIICDCBRESP;
  assign PLVCUMCUMAXIICDCBVALID_in = PLVCUMCUMAXIICDCBVALID;
  assign PLVCUMCUMAXIICDCRDATA_in = PLVCUMCUMAXIICDCRDATA;
  assign PLVCUMCUMAXIICDCRID_in = PLVCUMCUMAXIICDCRID;
  assign PLVCUMCUMAXIICDCRLAST_in = PLVCUMCUMAXIICDCRLAST;
  assign PLVCUMCUMAXIICDCRRESP_in = PLVCUMCUMAXIICDCRRESP;
  assign PLVCUMCUMAXIICDCRVALID_in = PLVCUMCUMAXIICDCRVALID;
  assign PLVCUMCUMAXIICDCWREADY_in = PLVCUMCUMAXIICDCWREADY;
  assign PLVCURREADYAXILITEAPB_in = PLVCURREADYAXILITEAPB;
  assign PLVCUWDATAAXILITEAPB_in = PLVCUWDATAAXILITEAPB;
  assign PLVCUWSTRBAXILITEAPB_in = PLVCUWSTRBAXILITEAPB;
  assign PLVCUWVALIDAXILITEAPB_in = PLVCUWVALIDAXILITEAPB;


  assign INITPLVCUGASKETCLAMPCONTROLLVLSHVCCINTD_in = INITPLVCUGASKETCLAMPCONTROLLVLSHVCCINTD;
  assign PLVCUCORECLK_in = PLVCUCORECLK;
  assign PLVCUMCUCLK_in = PLVCUMCUCLK;
  assign PLVCUPLLREFCLKPL_in = PLVCUPLLREFCLKPL;
  assign PLVCURAWRSTN_in = PLVCURAWRSTN;


  initial begin
    #1;
    trig_attr = ~trig_attr;
  end




















































  always @ (trig_attr) begin
  #1;
  CORECLKREQ_BIN = CORECLKREQ_REG[9:0];
  
  DECHORRESOLUTION_BIN = DECHORRESOLUTION_REG[13:0];
  
  DECODERCHROMAFORMAT_BIN =
      (DECODERCHROMAFORMAT_REG == "4_2_2") ? DECODERCHROMAFORMAT_4_2_2 :
      (DECODERCHROMAFORMAT_REG == "4_2_0") ? DECODERCHROMAFORMAT_4_2_0 :
       DECODERCHROMAFORMAT_4_2_2;
  
  DECODERCODING_BIN =
      (DECODERCODING_REG == "H.265") ? DECODERCODING_H_265 :
      (DECODERCODING_REG == "H.264") ? DECODERCODING_H_264 :
       DECODERCODING_H_265;
  
  DECODERCOLORDEPTH_BIN = DECODERCOLORDEPTH_REG[3:0];
  
  DECODERNUMCORES_BIN = DECODERNUMCORES_REG[1:0];
  
  DECVERTRESOLUTION_BIN = DECVERTRESOLUTION_REG[12:0];
  
  ENABLEDECODER_BIN =
      (ENABLEDECODER_REG == "TRUE") ? ENABLEDECODER_TRUE :
      (ENABLEDECODER_REG == "FALSE") ? ENABLEDECODER_FALSE :
       ENABLEDECODER_TRUE;
  
  ENABLEENCODER_BIN =
      (ENABLEENCODER_REG == "TRUE") ? ENABLEENCODER_TRUE :
      (ENABLEENCODER_REG == "FALSE") ? ENABLEENCODER_FALSE :
       ENABLEENCODER_TRUE;
  
  ENCHORRESOLUTION_BIN = ENCHORRESOLUTION_REG[13:0];
  
  ENCODERCHROMAFORMAT_BIN =
      (ENCODERCHROMAFORMAT_REG == "4_2_2") ? ENCODERCHROMAFORMAT_4_2_2 :
      (ENCODERCHROMAFORMAT_REG == "4_2_0") ? ENCODERCHROMAFORMAT_4_2_0 :
       ENCODERCHROMAFORMAT_4_2_2;
  
  ENCODERCODING_BIN =
      (ENCODERCODING_REG == "H.265") ? ENCODERCODING_H_265 :
      (ENCODERCODING_REG == "H.264") ? ENCODERCODING_H_264 :
       ENCODERCODING_H_265;
  
  ENCODERCOLORDEPTH_BIN = ENCODERCOLORDEPTH_REG[3:0];
  
  ENCODERNUMCORES_BIN = ENCODERNUMCORES_REG[2:0];
  
  ENCVERTRESOLUTION_BIN = ENCVERTRESOLUTION_REG[12:0];
  
  end



always @ (trig_attr) begin
  #1;
  if ((attr_test == 1'b1) ||
      ((CORECLKREQ_REG < 0) || (CORECLKREQ_REG > 667))) begin
    $display("Error: [Unisim %s-101] CORECLKREQ attribute is set to %d.  Legal values for this attribute are 0 to 667. Instance: %m", MODULE_NAME, CORECLKREQ_REG);
    attr_err = 1'b1;
  end
  
  if ((attr_test == 1'b1) ||
      ((DECHORRESOLUTION_REG < 320) || (DECHORRESOLUTION_REG > 8192))) begin
    $display("Error: [Unisim %s-102] DECHORRESOLUTION attribute is set to %d.  Legal values for this attribute are 320 to 8192. Instance: %m", MODULE_NAME, DECHORRESOLUTION_REG);
    attr_err = 1'b1;
  end
  
  if ((attr_test == 1'b1) ||
      ((DECODERCHROMAFORMAT_REG != "4_2_2") &&
       (DECODERCHROMAFORMAT_REG != "4_2_0"))) begin
    $display("Error: [Unisim %s-103] DECODERCHROMAFORMAT attribute is set to %s.  Legal values for this attribute are 4_2_2 or 4_2_0. Instance: %m", MODULE_NAME, DECODERCHROMAFORMAT_REG);
    attr_err = 1'b1;
  end
  
  if ((attr_test == 1'b1) ||
      ((DECODERCODING_REG != "H.265") &&
       (DECODERCODING_REG != "H.264"))) begin
    $display("Error: [Unisim %s-104] DECODERCODING attribute is set to %s.  Legal values for this attribute are H.265 or H.264. Instance: %m", MODULE_NAME, DECODERCODING_REG);
    attr_err = 1'b1;
  end
  
  if ((attr_test == 1'b1) ||
      ((DECODERCOLORDEPTH_REG != 10) &&
       (DECODERCOLORDEPTH_REG != 8))) begin
    $display("Error: [Unisim %s-105] DECODERCOLORDEPTH attribute is set to %d.  Legal values for this attribute are 10 or 8. Instance: %m", MODULE_NAME, DECODERCOLORDEPTH_REG);
    attr_err = 1'b1;
  end
  
  if ((attr_test == 1'b1) ||
      ((DECODERNUMCORES_REG < 1) || (DECODERNUMCORES_REG > 2))) begin
    $display("Error: [Unisim %s-106] DECODERNUMCORES attribute is set to %d.  Legal values for this attribute are 1 to 2. Instance: %m", MODULE_NAME, DECODERNUMCORES_REG);
    attr_err = 1'b1;
  end
  
  if ((attr_test == 1'b1) ||
      ((DECVERTRESOLUTION_REG < 240) || (DECVERTRESOLUTION_REG > 4352))) begin
    $display("Error: [Unisim %s-107] DECVERTRESOLUTION attribute is set to %d.  Legal values for this attribute are 240 to 4352. Instance: %m", MODULE_NAME, DECVERTRESOLUTION_REG);
    attr_err = 1'b1;
  end
  
  if ((attr_test == 1'b1) ||
      ((ENABLEDECODER_REG != "TRUE") &&
       (ENABLEDECODER_REG != "FALSE"))) begin
    $display("Error: [Unisim %s-108] ENABLEDECODER attribute is set to %s.  Legal values for this attribute are TRUE or FALSE. Instance: %m", MODULE_NAME, ENABLEDECODER_REG);
    attr_err = 1'b1;
  end
  
  if ((attr_test == 1'b1) ||
      ((ENABLEENCODER_REG != "TRUE") &&
       (ENABLEENCODER_REG != "FALSE"))) begin
    $display("Error: [Unisim %s-109] ENABLEENCODER attribute is set to %s.  Legal values for this attribute are TRUE or FALSE. Instance: %m", MODULE_NAME, ENABLEENCODER_REG);
    attr_err = 1'b1;
  end
  
  if ((attr_test == 1'b1) ||
      ((ENCHORRESOLUTION_REG < 320) || (ENCHORRESOLUTION_REG > 8192))) begin
    $display("Error: [Unisim %s-110] ENCHORRESOLUTION attribute is set to %d.  Legal values for this attribute are 320 to 8192. Instance: %m", MODULE_NAME, ENCHORRESOLUTION_REG);
    attr_err = 1'b1;
  end
  
  if ((attr_test == 1'b1) ||
      ((ENCODERCHROMAFORMAT_REG != "4_2_2") &&
       (ENCODERCHROMAFORMAT_REG != "4_2_0"))) begin
    $display("Error: [Unisim %s-111] ENCODERCHROMAFORMAT attribute is set to %s.  Legal values for this attribute are 4_2_2 or 4_2_0. Instance: %m", MODULE_NAME, ENCODERCHROMAFORMAT_REG);
    attr_err = 1'b1;
  end
  
  if ((attr_test == 1'b1) ||
      ((ENCODERCODING_REG != "H.265") &&
       (ENCODERCODING_REG != "H.264"))) begin
    $display("Error: [Unisim %s-112] ENCODERCODING attribute is set to %s.  Legal values for this attribute are H.265 or H.264. Instance: %m", MODULE_NAME, ENCODERCODING_REG);
    attr_err = 1'b1;
  end
  
  if ((attr_test == 1'b1) ||
      ((ENCODERCOLORDEPTH_REG != 10) &&
       (ENCODERCOLORDEPTH_REG != 8))) begin
    $display("Error: [Unisim %s-113] ENCODERCOLORDEPTH attribute is set to %d.  Legal values for this attribute are 10 or 8. Instance: %m", MODULE_NAME, ENCODERCOLORDEPTH_REG);
    attr_err = 1'b1;
  end
  
  if ((attr_test == 1'b1) ||
      ((ENCODERNUMCORES_REG < 1) || (ENCODERNUMCORES_REG > 4))) begin
    $display("Error: [Unisim %s-114] ENCODERNUMCORES attribute is set to %d.  Legal values for this attribute are 1 to 4. Instance: %m", MODULE_NAME, ENCODERNUMCORES_REG);
    attr_err = 1'b1;
  end
  
  if ((attr_test == 1'b1) ||
      ((ENCVERTRESOLUTION_REG < 240) || (ENCVERTRESOLUTION_REG > 4352))) begin
    $display("Error: [Unisim %s-115] ENCVERTRESOLUTION attribute is set to %d.  Legal values for this attribute are 240 to 4352. Instance: %m", MODULE_NAME, ENCVERTRESOLUTION_REG);
    attr_err = 1'b1;
  end
  
  if (attr_err == 1'b1) #1 $finish;
end








  specify
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[10]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[11]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[12]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[13]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[14]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[15]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[16]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[17]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[18]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[19]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[20]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[21]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[22]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[23]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[24]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[25]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[26]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[27]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[28]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[29]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[30]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[31]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[32]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[33]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[34]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[35]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[36]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[37]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[38]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[39]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[40]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[41]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[42]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[43]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[4]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[5]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[6]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[7]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[8]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR0[9]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[10]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[11]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[12]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[13]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[14]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[15]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[16]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[17]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[18]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[19]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[20]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[21]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[22]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[23]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[24]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[25]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[26]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[27]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[28]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[29]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[30]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[31]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[32]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[33]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[34]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[35]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[36]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[37]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[38]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[39]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[40]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[41]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[42]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[43]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[4]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[5]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[6]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[7]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[8]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARADDR1[9]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARBURST0[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARBURST0[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARBURST1[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARBURST1[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARCACHE0[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARCACHE0[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARCACHE0[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARCACHE0[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARCACHE1[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARCACHE1[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARCACHE1[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARCACHE1[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARID0[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARID0[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARID0[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARID0[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARID1[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARID1[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARID1[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARID1[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARLEN0[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARLEN0[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARLEN0[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARLEN0[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARLEN0[4]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARLEN0[5]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARLEN0[6]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARLEN0[7]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARLEN1[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARLEN1[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARLEN1[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARLEN1[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARLEN1[4]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARLEN1[5]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARLEN1[6]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARLEN1[7]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARPROT0) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARPROT1) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARQOS0[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARQOS0[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARQOS0[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARQOS0[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARQOS1[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARQOS1[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARQOS1[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARQOS1[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARSIZE0[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARSIZE0[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARSIZE0[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARSIZE1[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARSIZE1[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARSIZE1[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARVALID0) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECARVALID1) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[10]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[11]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[12]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[13]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[14]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[15]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[16]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[17]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[18]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[19]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[20]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[21]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[22]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[23]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[24]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[25]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[26]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[27]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[28]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[29]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[30]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[31]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[32]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[33]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[34]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[35]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[36]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[37]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[38]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[39]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[40]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[41]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[42]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[43]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[4]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[5]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[6]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[7]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[8]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR0[9]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[10]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[11]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[12]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[13]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[14]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[15]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[16]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[17]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[18]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[19]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[20]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[21]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[22]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[23]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[24]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[25]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[26]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[27]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[28]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[29]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[30]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[31]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[32]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[33]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[34]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[35]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[36]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[37]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[38]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[39]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[40]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[41]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[42]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[43]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[4]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[5]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[6]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[7]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[8]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWADDR1[9]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWBURST0[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWBURST0[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWBURST1[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWBURST1[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWCACHE0[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWCACHE0[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWCACHE0[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWCACHE0[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWCACHE1[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWCACHE1[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWCACHE1[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWCACHE1[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWID0[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWID0[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWID0[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWID0[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWID1[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWID1[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWID1[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWID1[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWLEN0[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWLEN0[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWLEN0[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWLEN0[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWLEN0[4]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWLEN0[5]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWLEN0[6]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWLEN0[7]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWLEN1[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWLEN1[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWLEN1[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWLEN1[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWLEN1[4]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWLEN1[5]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWLEN1[6]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWLEN1[7]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWPROT0) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWPROT1) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWQOS0[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWQOS0[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWQOS0[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWQOS0[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWQOS1[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWQOS1[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWQOS1[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWQOS1[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWSIZE0[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWSIZE0[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWSIZE0[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWSIZE1[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWSIZE1[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWSIZE1[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWVALID0) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECAWVALID1) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECBREADY0) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECBREADY1) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECRREADY0) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECRREADY1) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[100]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[101]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[102]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[103]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[104]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[105]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[106]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[107]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[108]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[109]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[10]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[110]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[111]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[112]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[113]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[114]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[115]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[116]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[117]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[118]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[119]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[11]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[120]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[121]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[122]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[123]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[124]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[125]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[126]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[127]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[12]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[13]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[14]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[15]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[16]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[17]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[18]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[19]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[20]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[21]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[22]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[23]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[24]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[25]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[26]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[27]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[28]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[29]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[30]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[31]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[32]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[33]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[34]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[35]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[36]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[37]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[38]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[39]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[40]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[41]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[42]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[43]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[44]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[45]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[46]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[47]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[48]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[49]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[4]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[50]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[51]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[52]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[53]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[54]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[55]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[56]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[57]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[58]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[59]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[5]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[60]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[61]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[62]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[63]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[64]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[65]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[66]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[67]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[68]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[69]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[6]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[70]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[71]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[72]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[73]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[74]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[75]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[76]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[77]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[78]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[79]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[7]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[80]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[81]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[82]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[83]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[84]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[85]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[86]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[87]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[88]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[89]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[8]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[90]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[91]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[92]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[93]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[94]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[95]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[96]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[97]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[98]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[99]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA0[9]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[100]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[101]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[102]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[103]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[104]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[105]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[106]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[107]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[108]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[109]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[10]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[110]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[111]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[112]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[113]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[114]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[115]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[116]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[117]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[118]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[119]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[11]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[120]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[121]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[122]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[123]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[124]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[125]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[126]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[127]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[12]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[13]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[14]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[15]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[16]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[17]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[18]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[19]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[20]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[21]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[22]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[23]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[24]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[25]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[26]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[27]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[28]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[29]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[30]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[31]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[32]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[33]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[34]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[35]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[36]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[37]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[38]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[39]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[40]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[41]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[42]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[43]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[44]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[45]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[46]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[47]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[48]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[49]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[4]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[50]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[51]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[52]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[53]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[54]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[55]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[56]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[57]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[58]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[59]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[5]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[60]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[61]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[62]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[63]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[64]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[65]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[66]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[67]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[68]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[69]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[6]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[70]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[71]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[72]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[73]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[74]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[75]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[76]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[77]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[78]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[79]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[7]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[80]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[81]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[82]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[83]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[84]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[85]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[86]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[87]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[88]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[89]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[8]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[90]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[91]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[92]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[93]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[94]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[95]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[96]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[97]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[98]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[99]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWDATA1[9]) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWLAST0) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWLAST1) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWVALID0) = (100:100:100, 100:100:100);
    (PLVCUAXIDECCLK => VCUPLDECWVALID1) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[10]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[11]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[12]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[13]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[14]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[15]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[16]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[17]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[18]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[19]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[20]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[21]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[22]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[23]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[24]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[25]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[26]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[27]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[28]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[29]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[30]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[31]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[32]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[33]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[34]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[35]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[36]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[37]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[38]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[39]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[40]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[41]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[42]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[43]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[4]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[5]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[6]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[7]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[8]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR0[9]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[10]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[11]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[12]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[13]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[14]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[15]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[16]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[17]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[18]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[19]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[20]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[21]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[22]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[23]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[24]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[25]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[26]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[27]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[28]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[29]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[30]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[31]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[32]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[33]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[34]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[35]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[36]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[37]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[38]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[39]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[40]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[41]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[42]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[43]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[4]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[5]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[6]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[7]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[8]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARADDR1[9]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARBURST0[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARBURST0[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARBURST1[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARBURST1[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARCACHE0[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARCACHE0[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARCACHE0[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARCACHE0[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARCACHE1[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARCACHE1[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARCACHE1[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARCACHE1[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARID0[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARID0[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARID0[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARID0[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARID1[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARID1[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARID1[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARID1[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARLEN0[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARLEN0[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARLEN0[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARLEN0[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARLEN0[4]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARLEN0[5]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARLEN0[6]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARLEN0[7]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARLEN1[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARLEN1[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARLEN1[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARLEN1[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARLEN1[4]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARLEN1[5]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARLEN1[6]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARLEN1[7]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARPROT0) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARPROT1) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARQOS0[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARQOS0[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARQOS0[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARQOS0[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARQOS1[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARQOS1[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARQOS1[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARQOS1[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARSIZE0[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARSIZE0[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARSIZE0[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARSIZE1[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARSIZE1[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARSIZE1[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARVALID0) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCARVALID1) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[10]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[11]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[12]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[13]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[14]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[15]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[16]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[17]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[18]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[19]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[20]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[21]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[22]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[23]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[24]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[25]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[26]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[27]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[28]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[29]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[30]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[31]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[32]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[33]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[34]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[35]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[36]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[37]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[38]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[39]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[40]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[41]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[42]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[43]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[4]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[5]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[6]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[7]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[8]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR0[9]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[10]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[11]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[12]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[13]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[14]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[15]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[16]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[17]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[18]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[19]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[20]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[21]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[22]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[23]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[24]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[25]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[26]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[27]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[28]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[29]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[30]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[31]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[32]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[33]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[34]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[35]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[36]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[37]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[38]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[39]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[40]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[41]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[42]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[43]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[4]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[5]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[6]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[7]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[8]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWADDR1[9]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWBURST0[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWBURST0[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWBURST1[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWBURST1[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWCACHE0[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWCACHE0[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWCACHE0[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWCACHE0[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWCACHE1[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWCACHE1[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWCACHE1[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWCACHE1[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWID0[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWID0[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWID0[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWID0[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWID1[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWID1[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWID1[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWID1[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWLEN0[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWLEN0[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWLEN0[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWLEN0[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWLEN0[4]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWLEN0[5]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWLEN0[6]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWLEN0[7]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWLEN1[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWLEN1[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWLEN1[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWLEN1[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWLEN1[4]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWLEN1[5]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWLEN1[6]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWLEN1[7]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWPROT0) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWPROT1) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWQOS0[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWQOS0[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWQOS0[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWQOS0[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWQOS1[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWQOS1[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWQOS1[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWQOS1[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWSIZE0[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWSIZE0[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWSIZE0[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWSIZE1[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWSIZE1[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWSIZE1[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWVALID0) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCAWVALID1) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCBREADY0) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCBREADY1) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCRREADY0) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCRREADY1) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[100]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[101]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[102]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[103]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[104]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[105]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[106]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[107]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[108]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[109]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[10]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[110]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[111]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[112]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[113]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[114]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[115]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[116]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[117]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[118]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[119]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[11]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[120]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[121]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[122]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[123]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[124]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[125]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[126]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[127]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[12]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[13]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[14]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[15]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[16]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[17]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[18]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[19]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[20]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[21]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[22]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[23]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[24]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[25]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[26]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[27]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[28]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[29]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[30]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[31]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[32]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[33]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[34]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[35]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[36]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[37]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[38]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[39]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[40]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[41]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[42]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[43]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[44]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[45]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[46]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[47]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[48]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[49]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[4]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[50]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[51]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[52]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[53]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[54]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[55]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[56]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[57]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[58]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[59]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[5]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[60]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[61]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[62]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[63]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[64]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[65]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[66]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[67]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[68]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[69]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[6]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[70]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[71]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[72]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[73]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[74]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[75]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[76]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[77]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[78]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[79]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[7]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[80]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[81]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[82]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[83]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[84]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[85]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[86]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[87]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[88]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[89]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[8]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[90]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[91]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[92]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[93]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[94]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[95]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[96]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[97]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[98]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[99]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA0[9]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[100]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[101]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[102]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[103]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[104]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[105]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[106]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[107]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[108]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[109]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[10]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[110]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[111]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[112]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[113]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[114]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[115]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[116]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[117]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[118]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[119]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[11]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[120]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[121]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[122]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[123]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[124]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[125]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[126]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[127]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[12]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[13]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[14]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[15]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[16]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[17]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[18]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[19]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[20]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[21]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[22]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[23]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[24]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[25]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[26]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[27]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[28]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[29]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[30]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[31]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[32]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[33]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[34]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[35]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[36]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[37]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[38]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[39]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[40]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[41]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[42]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[43]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[44]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[45]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[46]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[47]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[48]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[49]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[4]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[50]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[51]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[52]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[53]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[54]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[55]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[56]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[57]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[58]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[59]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[5]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[60]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[61]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[62]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[63]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[64]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[65]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[66]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[67]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[68]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[69]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[6]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[70]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[71]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[72]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[73]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[74]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[75]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[76]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[77]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[78]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[79]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[7]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[80]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[81]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[82]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[83]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[84]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[85]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[86]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[87]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[88]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[89]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[8]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[90]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[91]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[92]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[93]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[94]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[95]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[96]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[97]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[98]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[99]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWDATA1[9]) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWLAST0) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWLAST1) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWVALID0) = (100:100:100, 100:100:100);
    (PLVCUAXIENCCLK => VCUPLENCWVALID1) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLARREADYAXILITEAPB) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLAWREADYAXILITEAPB) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLBRESPAXILITEAPB[0]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLBRESPAXILITEAPB[1]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLBVALIDAXILITEAPB) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLPINTREQ) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[0]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[10]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[11]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[12]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[13]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[14]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[15]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[16]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[17]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[18]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[19]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[1]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[20]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[21]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[22]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[23]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[24]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[25]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[26]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[27]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[28]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[29]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[2]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[30]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[31]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[3]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[4]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[5]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[6]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[7]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[8]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[9]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRRESPAXILITEAPB[0]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRRESPAXILITEAPB[1]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRVALIDAXILITEAPB) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLWREADYAXILITEAPB) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[10]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[11]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[12]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[13]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[14]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[15]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[16]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[17]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[18]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[19]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[20]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[21]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[22]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[23]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[24]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[25]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[26]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[27]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[28]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[29]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[30]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[31]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[32]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[33]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[34]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[35]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[36]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[37]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[38]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[39]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[40]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[41]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[42]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[43]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[4]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[5]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[6]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[7]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[8]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARADDR[9]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARBURST[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARBURST[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARCACHE[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARCACHE[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARCACHE[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARCACHE[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARID[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARID[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARID[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARLEN[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARLEN[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARLEN[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARLEN[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARLEN[4]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARLEN[5]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARLEN[6]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARLEN[7]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARLOCK) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARPROT[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARPROT[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARPROT[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARQOS[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARQOS[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARQOS[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARQOS[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARSIZE[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARSIZE[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARSIZE[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCARVALID) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[10]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[11]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[12]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[13]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[14]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[15]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[16]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[17]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[18]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[19]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[20]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[21]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[22]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[23]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[24]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[25]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[26]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[27]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[28]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[29]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[30]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[31]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[32]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[33]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[34]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[35]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[36]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[37]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[38]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[39]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[40]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[41]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[42]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[43]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[4]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[5]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[6]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[7]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[8]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWADDR[9]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWBURST[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWBURST[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWCACHE[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWCACHE[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWCACHE[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWCACHE[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWID[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWID[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWID[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWLEN[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWLEN[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWLEN[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWLEN[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWLEN[4]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWLEN[5]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWLEN[6]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWLEN[7]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWLOCK) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWPROT[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWPROT[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWPROT[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWQOS[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWQOS[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWQOS[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWQOS[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWSIZE[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWSIZE[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWSIZE[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCAWVALID) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCBREADY) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCRREADY) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCWDATA[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCWDATA[10]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCWDATA[11]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCWDATA[12]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCWDATA[13]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCWDATA[14]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCWDATA[15]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCWDATA[16]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCWDATA[17]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCWDATA[18]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCWDATA[19]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCWDATA[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCWDATA[20]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCWDATA[21]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCWDATA[22]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCWDATA[23]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCWDATA[24]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCWDATA[25]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCWDATA[26]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCWDATA[27]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCWDATA[28]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCWDATA[29]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCWDATA[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCWDATA[30]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCWDATA[31]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCWDATA[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCWDATA[4]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCWDATA[5]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCWDATA[6]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCWDATA[7]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCWDATA[8]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCWDATA[9]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCWLAST) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCWSTRB[0]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCWSTRB[1]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCWSTRB[2]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCWSTRB[3]) = (100:100:100, 100:100:100);
    (PLVCUAXIMCUCLK => VCUPLMCUMAXIICDCWVALID) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CADDR[0]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CADDR[10]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CADDR[11]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CADDR[12]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CADDR[13]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CADDR[14]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CADDR[15]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CADDR[16]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CADDR[1]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CADDR[2]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CADDR[3]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CADDR[4]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CADDR[5]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CADDR[6]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CADDR[7]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CADDR[8]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CADDR[9]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CRVALID) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[0]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[100]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[101]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[102]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[103]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[104]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[105]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[106]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[107]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[108]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[109]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[10]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[110]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[111]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[112]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[113]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[114]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[115]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[116]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[117]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[118]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[119]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[11]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[120]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[121]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[122]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[123]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[124]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[125]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[126]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[127]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[128]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[129]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[12]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[130]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[131]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[132]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[133]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[134]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[135]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[136]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[137]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[138]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[139]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[13]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[140]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[141]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[142]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[143]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[144]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[145]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[146]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[147]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[148]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[149]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[14]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[150]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[151]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[152]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[153]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[154]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[155]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[156]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[157]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[158]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[159]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[15]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[160]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[161]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[162]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[163]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[164]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[165]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[166]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[167]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[168]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[169]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[16]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[170]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[171]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[172]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[173]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[174]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[175]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[176]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[177]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[178]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[179]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[17]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[180]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[181]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[182]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[183]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[184]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[185]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[186]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[187]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[188]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[189]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[18]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[190]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[191]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[192]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[193]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[194]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[195]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[196]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[197]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[198]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[199]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[19]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[1]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[200]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[201]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[202]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[203]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[204]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[205]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[206]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[207]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[208]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[209]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[20]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[210]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[211]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[212]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[213]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[214]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[215]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[216]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[217]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[218]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[219]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[21]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[220]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[221]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[222]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[223]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[224]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[225]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[226]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[227]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[228]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[229]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[22]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[230]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[231]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[232]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[233]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[234]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[235]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[236]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[237]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[238]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[239]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[23]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[240]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[241]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[242]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[243]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[244]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[245]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[246]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[247]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[248]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[249]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[24]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[250]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[251]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[252]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[253]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[254]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[255]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[256]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[257]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[258]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[259]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[25]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[260]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[261]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[262]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[263]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[264]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[265]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[266]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[267]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[268]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[269]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[26]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[270]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[271]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[272]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[273]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[274]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[275]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[276]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[277]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[278]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[279]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[27]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[280]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[281]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[282]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[283]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[284]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[285]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[286]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[287]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[288]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[289]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[28]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[290]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[291]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[292]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[293]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[294]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[295]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[296]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[297]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[298]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[299]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[29]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[2]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[300]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[301]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[302]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[303]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[304]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[305]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[306]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[307]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[308]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[309]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[30]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[310]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[311]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[312]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[313]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[314]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[315]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[316]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[317]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[318]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[319]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[31]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[32]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[33]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[34]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[35]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[36]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[37]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[38]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[39]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[3]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[40]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[41]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[42]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[43]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[44]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[45]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[46]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[47]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[48]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[49]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[4]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[50]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[51]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[52]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[53]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[54]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[55]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[56]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[57]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[58]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[59]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[5]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[60]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[61]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[62]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[63]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[64]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[65]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[66]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[67]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[68]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[69]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[6]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[70]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[71]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[72]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[73]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[74]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[75]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[76]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[77]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[78]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[79]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[7]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[80]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[81]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[82]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[83]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[84]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[85]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[86]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[87]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[88]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[89]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[8]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[90]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[91]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[92]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[93]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[94]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[95]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[96]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[97]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[98]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[99]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWDATA[9]) = (100:100:100, 100:100:100);
    (PLVCUENCL2CCLK => VCUPLENCALL2CWVALID) = (100:100:100, 100:100:100);






















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































    specparam PATHPULSE$ = 0;
  endspecify

endmodule

`endcelldefine
