
module usb_rx_phy(clk, rst, fs_ce, rxd, rxdp, rxdn, RxValid_o, RxActive_o, RxError_o, DataIn_o, RxEn_i, LineState);  
  wire [2:0] _000_;
  wire _001_;
  wire _002_;
  wire [1:0] _003_;
  wire [2:0] _004_;
  wire [7:0] _005_;
  wire [2:0] _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  wire _136_;
  wire _137_;
  wire _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  wire _142_;
  wire _143_;
  wire _144_;
  wire _145_;
  wire _146_;
  wire _147_;
  wire _148_;
  wire _149_;
  wire _150_;
  wire _151_;
  wire _152_;
  wire _153_;
  wire _154_;
  wire _155_;
  wire _156_;
  wire _157_;
  wire _158_;
  wire _159_;
  wire _160_;
  wire _161_;
  wire _162_;
  wire _163_;
  wire _164_;
  wire _165_;
  wire _166_;
  wire _167_;
  wire _168_;
  wire _169_;
  wire _170_;
  wire _171_;
  wire _172_;
  wire _173_;
  wire _174_;
  wire _175_;
  wire _176_;
  wire _177_;
  wire _178_;
  wire _179_;
  wire _180_;
  wire _181_;
  output [7:0] DataIn_o;
  reg [7:0] DataIn_o;
  output [1:0] LineState;
  reg [1:0] LineState;
  output RxActive_o;
  reg RxActive_o;
  input RxEn_i;
  output RxError_o;
  output RxValid_o;
  reg RxValid_o;
  reg [2:0] bit_cnt;
  reg bit_stuff_err;
  reg byte_err;
  input clk;
  reg [1:0] dpll_state;
  output fs_ce;
  reg fs_ce;
  wire fs_ce_d;
  reg fs_ce_r1;
  reg fs_ce_r2;
  reg [2:0] fs_state;
  wire [7:0] hold_reg;
  reg lock_en;
  reg [2:0] one_cnt;
  input rst;
  wire rx_active;
  wire rx_en;
  wire rx_valid;
  reg rx_valid1;
  reg rx_valid_r;
  input rxd;
  reg rxd_r;
  reg rxd_s;
  reg rxd_s0;
  reg rxd_s1;
  input rxdn;
  reg rxdn_s;
  reg rxdn_s0;
  wire rxdn_s1;
  reg rxdn_s_r;
  input rxdp;
  reg rxdp_s;
  reg rxdp_s0;
  wire rxdp_s1;
  reg rxdp_s_r;
  reg sd_nrzi;
  reg sd_r;
  wire se0;
  reg se0_r;
  reg se0_s;
  reg shift_en;
  reg sync_err;
  assign _166_ = ~fs_state[0];
  assign _167_ = ~fs_state[1];
  assign _168_ = _167_ & _166_;
  assign _169_ = _168_ & fs_state[2];
  assign _170_ = fs_state[1] & _166_;
  assign _171_ = _170_ | _169_;
  assign _172_ = ~lock_en;
  assign _173_ = ~rxdn_s;
  assign _174_ = rxdp_s | _173_;
  assign _175_ = _174_ | _172_;
  assign _176_ = _175_ & _171_;
  assign _177_ = ~fs_state[2];
  assign _178_ = _167_ & fs_state[0];
  assign _179_ = _178_ & _177_;
  assign _180_ = fs_state[1] & fs_state[0];
  assign _181_ = _180_ & _177_;
  assign _021_ = _181_ | _179_;
  assign _022_ = ~rxdp_s;
  assign _023_ = _022_ | rxdn_s;
  assign _024_ = _023_ | _172_;
  assign _025_ = _024_ & _021_;
  assign _026_ = _178_ & fs_state[2];
  assign _027_ = _026_ & _024_;
  assign _028_ = _027_ & _175_;
  assign _029_ = _028_ | _025_;
  assign _030_ = _029_ | _176_;
  assign _031_ = _026_ | _021_;
  assign _032_ = _031_ | _171_;
  assign _033_ = ~RxActive_o;
  assign _034_ = rxdp_s | rxdn_s;
  assign _035_ = ~se0_s;
  assign _036_ = _033_ & fs_ce;
  assign _037_ = _036_ & _035_;
  assign _038_ = _037_ & _034_;
  assign _039_ = _038_ & _032_;
  assign _020_ = _039_ & _030_;
  assign _015_ = rxdp_s0 & LineState[0];
  assign _013_ = rxdn_s0 & LineState[1];
  assign se0 = ~_034_;
  assign _040_ = ~one_cnt[0];
  assign _041_ = one_cnt[1] & _040_;
  assign _042_ = _041_ & one_cnt[2];
  assign _043_ = fs_ce & sd_nrzi;
  assign _044_ = _043_ & RxActive_o;
  assign _045_ = _044_ & _034_;
  assign _001_ = _045_ & _042_;
  assign _046_ = rx_valid1 & fs_ce;
  assign _047_ = ~_046_;
  assign _048_ = _047_ | _042_;
  assign _009_ = ~_048_;
  assign _049_ = bit_cnt[2] | bit_cnt[1];
  assign _050_ = ~se0_r;
  assign _051_ = _050_ & RxActive_o;
  assign _052_ = _051_ & se0;
  assign _002_ = _052_ & _049_;
  assign _053_ = bit_stuff_err | byte_err;
  assign RxError_o = _053_ | sync_err;
  assign _014_ = _015_ | rxdp_s_r;
  assign _012_ = _013_ | rxdn_s_r;
  assign _054_ = _022_ & rxdn_s;
  assign _055_ = _168_ & _177_;
  assign _056_ = fs_state[2] ? _168_ : _170_;
  assign _057_ = _056_ | _055_;
  assign _058_ = _170_ & fs_state[2];
  assign _059_ = _026_ | _058_;
  assign _060_ = _059_ | _021_;
  assign _061_ = _060_ | _057_;
  assign _062_ = _054_ & lock_en;
  assign _063_ = _027_ & _062_;
  assign _064_ = _061_ ? _063_ : _054_;
  assign _065_ = _064_ & _038_;
  assign _066_ = _065_ & lock_en;
  assign _067_ = ~rx_valid_r;
  assign _068_ = _034_ | _067_;
  assign _069_ = _068_ & RxActive_o;
  assign _070_ = _069_ | _066_;
  assign _007_ = _070_ & rst;
  assign _071_ = ~fs_ce;
  assign _072_ = rx_valid_r & _071_;
  assign _010_ = _072_ | RxValid_o;
  assign _017_ = fs_ce ? rxd_s : sd_r;
  assign _073_ = ~rxd_s;
  assign _074_ = sd_r | _073_;
  assign _075_ = RxActive_o & fs_ce;
  assign _076_ = ~sd_r;
  assign _077_ = _076_ | rxd_s;
  assign _078_ = _077_ & _075_;
  assign _079_ = _078_ & _074_;
  assign _080_ = ~_075_;
  assign _081_ = _080_ & sd_nrzi;
  assign _082_ = _081_ | _079_;
  assign _083_ = _082_ | _033_;
  assign _016_ = _083_ & rst;
  assign _084_ = ~_042_;
  assign _085_ = _084_ & sd_nrzi;
  assign _086_ = fs_ce & _040_;
  assign _087_ = _086_ & _085_;
  assign _088_ = _071_ & one_cnt[0];
  assign _089_ = _088_ | _087_;
  assign _090_ = rst & shift_en;
  assign _006_[0] = _090_ & _089_;
  assign _091_ = one_cnt[1] ^ one_cnt[0];
  assign _092_ = _091_ & fs_ce;
  assign _093_ = _092_ & _085_;
  assign _094_ = _071_ & one_cnt[1];
  assign _095_ = _094_ | _093_;
  assign _006_[1] = _095_ & _090_;
  assign _096_ = one_cnt[1] & one_cnt[0];
  assign _097_ = _096_ ^ one_cnt[2];
  assign _098_ = _085_ & fs_ce;
  assign _099_ = _098_ & _097_;
  assign _100_ = _071_ & one_cnt[2];
  assign _101_ = _100_ | _099_;
  assign _006_[2] = _101_ & _090_;
  assign _102_ = _065_ | RxActive_o;
  assign _019_ = _071_ ? shift_en : _102_;
  assign _103_ = shift_en & fs_ce;
  assign _104_ = _103_ & _084_;
  assign _005_[0] = _104_ ? DataIn_o[1] : DataIn_o[0];
  assign _005_[1] = _104_ ? DataIn_o[2] : DataIn_o[1];
  assign _005_[2] = _104_ ? DataIn_o[3] : DataIn_o[2];
  assign _005_[3] = _104_ ? DataIn_o[4] : DataIn_o[3];
  assign _005_[4] = _104_ ? DataIn_o[5] : DataIn_o[4];
  assign _005_[5] = _104_ ? DataIn_o[6] : DataIn_o[5];
  assign _005_[6] = _104_ ? DataIn_o[7] : DataIn_o[6];
  assign _005_[7] = _104_ ? sd_nrzi : DataIn_o[7];
  assign _105_ = _084_ & fs_ce;
  assign _106_ = _105_ ^ bit_cnt[0];
  assign _000_[0] = _106_ & _090_;
  assign _107_ = bit_cnt[1] ^ bit_cnt[0];
  assign _108_ = _105_ ? _107_ : bit_cnt[1];
  assign _000_[1] = _108_ & _090_;
  assign _109_ = bit_cnt[1] & bit_cnt[0];
  assign _110_ = _109_ ^ bit_cnt[2];
  assign _111_ = _105_ ? _110_ : bit_cnt[2];
  assign _000_[2] = _111_ & _090_;
  assign _112_ = _109_ & bit_cnt[2];
  assign _113_ = _112_ & _105_;
  assign _114_ = _048_ & rx_valid1;
  assign _115_ = _114_ | _113_;
  assign _008_ = _115_ & rst;
  assign _116_ = rxd_s0 & rxd_s1;
  assign _117_ = rxd_s0 | rxd_s1;
  assign _118_ = ~_116_;
  assign _119_ = _118_ & rxd_s;
  assign _120_ = _119_ & _117_;
  assign _011_ = _120_ | _116_;
  assign _018_ = _071_ ? se0_s : se0;
  assign _121_ = ~rst;
  assign _122_ = ~dpll_state[0];
  assign _123_ = _122_ & dpll_state[1];
  assign _124_ = rxd_r ^ rxd_s;
  assign _125_ = _124_ & lock_en;
  assign _126_ = ~_125_;
  assign _127_ = _126_ & _123_;
  assign _128_ = ~dpll_state[1];
  assign _129_ = _122_ & _128_;
  assign fs_ce_d = dpll_state[0] & _128_;
  assign _130_ = _125_ ? fs_ce_d : _129_;
  assign _131_ = _130_ | _127_;
  assign _132_ = _122_ | _128_;
  assign _133_ = _132_ & rst;
  assign _134_ = _133_ & _131_;
  assign _003_[0] = _134_ | _121_;
  assign _135_ = fs_ce_d | _127_;
  assign _003_[1] = _135_ & _133_;
  assign _136_ = _062_ | fs_state[0];
  assign _137_ = _136_ & _055_;
  assign _138_ = _062_ & _058_;
  assign _139_ = _170_ & _177_;
  assign _140_ = _062_ & _139_;
  assign _141_ = _062_ & _169_;
  assign _142_ = _141_ | _140_;
  assign _143_ = _142_ | _138_;
  assign _144_ = _143_ | _137_;
  assign _145_ = _061_ & _038_;
  assign _146_ = _145_ & _144_;
  assign _147_ = ~_038_;
  assign _148_ = _147_ & fs_state[0];
  assign _149_ = _148_ | _146_;
  assign _004_[0] = _149_ & rst;
  assign _150_ = rxdp_s & _173_;
  assign _151_ = _150_ & lock_en;
  assign _152_ = _026_ & _151_;
  assign _153_ = _152_ | _138_;
  assign _154_ = _151_ & _179_;
  assign _155_ = _154_ | _140_;
  assign _156_ = _155_ | _153_;
  assign _157_ = _156_ & _145_;
  assign _158_ = _147_ & fs_state[1];
  assign _159_ = _158_ | _157_;
  assign _004_[1] = _159_ & rst;
  assign _160_ = _151_ & _181_;
  assign _161_ = _160_ | _141_;
  assign _162_ = _161_ | _153_;
  assign _163_ = _162_ & _145_;
  assign _164_ = _147_ & fs_state[2];
  assign _165_ = _164_ | _163_;
  assign _004_[2] = _165_ & rst;
  always @(posedge clk)
      lock_en <= RxEn_i;
  always @(posedge clk)
      sync_err <= _020_;
  always @(posedge clk)
      rxd_s0 <= rxd;
  always @(posedge clk)
      rxd_s1 <= rxd_s0;
  always @(posedge clk)
      rxd_s <= _011_;
  always @(posedge clk)
      rxdp_s0 <= rxdp;
  always @(posedge clk)
      LineState[0] <= rxdp_s0;
  always @(posedge clk)
      rxdp_s_r <= _015_;
  always @(posedge clk)
      rxdp_s <= _014_;
  always @(posedge clk)
      rxdn_s0 <= rxdn;
  always @(posedge clk)
      LineState[1] <= rxdn_s0;
  always @(posedge clk)
      rxdn_s_r <= _013_;
  always @(posedge clk)
      rxdn_s <= _012_;
  always @(posedge clk)
      se0_s <= _018_;
  always @(posedge clk)
      rxd_r <= rxd_s;
  always @(posedge clk)
      dpll_state[0] <= _003_[0];
  always @(posedge clk)
      dpll_state[1] <= _003_[1];
  always @(posedge clk)
      fs_ce_r1 <= fs_ce_d;
  always @(posedge clk)
      fs_ce_r2 <= fs_ce_r1;
  always @(posedge clk)
      fs_ce <= fs_ce_r2;
  always @(posedge clk)
      fs_state[0] <= _004_[0];
  always @(posedge clk)
      fs_state[1] <= _004_[1];
  always @(posedge clk)
      fs_state[2] <= _004_[2];
  always @(posedge clk)
      RxActive_o <= _007_;
  always @(posedge clk)
      rx_valid_r <= _010_;
  always @(posedge clk)
      sd_r <= _017_;
  always @(posedge clk)
      sd_nrzi <= _016_;
  always @(posedge clk)
      one_cnt[0] <= _006_[0];
  always @(posedge clk)
      one_cnt[1] <= _006_[1];
  always @(posedge clk)
      one_cnt[2] <= _006_[2];
  always @(posedge clk)
      bit_stuff_err <= _001_;
  always @(posedge clk)
      shift_en <= _019_;
  always @(posedge clk)
      DataIn_o[0] <= _005_[0];
  always @(posedge clk)
      DataIn_o[1] <= _005_[1];
  always @(posedge clk)
      DataIn_o[2] <= _005_[2];
  always @(posedge clk)
      DataIn_o[3] <= _005_[3];
  always @(posedge clk)
      DataIn_o[4] <= _005_[4];
  always @(posedge clk)
      DataIn_o[5] <= _005_[5];
  always @(posedge clk)
      DataIn_o[6] <= _005_[6];
  always @(posedge clk)
      DataIn_o[7] <= _005_[7];
  always @(posedge clk)
      bit_cnt[0] <= _000_[0];
  always @(posedge clk)
      bit_cnt[1] <= _000_[1];
  always @(posedge clk)
      bit_cnt[2] <= _000_[2];
  always @(posedge clk)
      rx_valid1 <= _008_;
  always @(posedge clk)
      RxValid_o <= _009_;
  always @(posedge clk)
      se0_r <= se0;
  always @(posedge clk)
      byte_err <= _002_;
  assign hold_reg = DataIn_o;
  assign rx_active = RxActive_o;
  assign rx_en = lock_en;
  assign rx_valid = RxValid_o;
  assign rxdn_s1 = LineState[1];
  assign rxdp_s1 = LineState[0];
endmodule  