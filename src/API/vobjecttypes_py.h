
std::vector<std::string> slapi_types = {
"# This file is automatically generated by generate_parser_listener.tcl\n"
"# DO NOT EDIT\n"
"sl0 = 0;\n"
"sl1 = 1;\n"
"slAccelerate_directive = 2;\n"
"slAction_block = 3;\n"
"slActual_arg_expr = 4;\n"
"slActual_arg_list = 5;\n"
"slAlways_construct = 6;\n"
"slAlwaysKeywd_Always = 7;\n"
"slAlwaysKeywd_Comb = 8;\n"
"slAlwaysKeywd_FF = 9;\n"
"slAlwaysKeywd_Latch = 10;\n"
"slAnd_call = 11;\n"
"slAnonymous_program = 12;\n"
"slAnonymous_program_item = 13;\n"
"slAnsi_port_declaration = 14;\n"
"slArray_manipulation_call = 15;\n"
"slArray_member_label = 16;\n"
"slArray_method_name = 17;\n"
"slArray_pattern_key = 18;\n"
"slArray_range_expression = 19;\n"
"slAssert_property_statement = 20;\n"
"slAssertion_item = 21;\n"
"slAssertion_item_declaration = 22;\n"
"slAssertion_variable_declaration = 23;\n"
"slAssign = 24;\n"
"slAssignment_operator = 25;\n"
"slAssignment_pattern = 26;\n"
"slAssignment_pattern_expression = 27;\n"
"slAssignment_pattern_expression_type = 28;\n"
"slAssignment_pattern_key = 29;\n"
"slAssignment_pattern_net_lvalue = 30;\n"
"slAssignment_pattern_variable_lvalue = 31;\n"
"slAssignOp_Add = 32;\n"
"slAssignOp_ArithShiftLeft = 33;\n"
"slAssignOp_ArithShiftRight = 34;\n"
"slAssignOp_Assign = 35;\n"
"slAssignOp_BitwAnd = 36;\n"
"slAssignOp_BitwLeftShift = 37;\n"
"slAssignOp_BitwOr = 38;\n"
"slAssignOp_BitwRightShift = 39;\n"
"slAssignOp_BitwXor = 40;\n"
"slAssignOp_Div = 41;\n"
"slAssignOp_Modulo = 42;\n"
"slAssignOp_Mult = 43;\n"
"slAssignOp_Sub = 44;\n"
"slAssociative_dimension = 45;\n"
"slAssume_property_statement = 46;\n"
"slAttr_name = 47;\n"
"slAttr_spec = 48;\n"
"slAttribute_instance = 49;\n"
"slAutoexpand_vectornets_directive = 50;\n"
"slBegin_keywords_directive = 51;\n"
"slBind_directive = 52;\n"
"slBind_instantiation = 53;\n"
"slBinModOp_BitwAnd = 54;\n"
"slBinModOp_BitwOr = 55;\n"
"slBinModOp_BitwXor = 56;\n"
"slBinModOp_Equiv = 57;\n"
"slBinModOp_LogicAnd = 58;\n"
"slBinModOp_LogicOr = 59;\n"
"slBinModOp_NotEqual = 60;\n"
"slBinModOp_ReductXnor1 = 61;\n"
"slBinModOp_ReductXnor2 = 62;\n"
"slBinOp_ArithShiftLeft = 63;\n"
"slBinOp_ArithShiftRight = 64;\n"
"slBinOp_BitwAnd = 65;\n"
"slBinOp_BitwOr = 66;\n"
"slBinOp_BitwXor = 67;\n"
"slBinOp_Div = 68;\n"
"slBinOp_Equiv = 69;\n"
"slBinOp_Equivalence = 70;\n"
"slBinOp_FourStateLogicEqual = 71;\n"
"slBinOp_FourStateLogicNotEqual = 72;\n"
"slBinOp_Great = 73;\n"
"slBinOp_GreatEqual = 74;\n"
"slBinOp_Imply = 75;\n"
"slBinOp_Less = 76;\n"
"slBinOp_LessEqual = 77;\n"
"slBinOp_LogicAnd = 78;\n"
"slBinOp_LogicOr = 79;\n"
"slBinOp_Minus = 80;\n"
"slBinOp_Mult = 81;\n"
"slBinOp_MultMult = 82;\n"
"slBinOp_Not = 83;\n"
"slBinOp_Percent = 84;\n"
"slBinOp_Plus = 85;\n"
"slBinOp_ReductNand = 86;\n"
"slBinOp_ReductNor = 87;\n"
"slBinOp_ReductXnor1 = 88;\n"
"slBinOp_ReductXnor2 = 89;\n"
"slBinOp_ShiftLeft = 90;\n"
"slBinOp_ShiftRight = 91;\n"
"slBinOp_WildcardEqual = 92;\n"
"slBinOp_WildcardNotEqual = 93;\n"
"slBinOp_WildEqual = 94;\n"
"slBinOp_WildNotEqual = 95;\n"
"slBins_Bins = 96;\n"
"slBins_expression = 97;\n"
"slBins_Ignore = 98;\n"
"slBins_Illegal = 99;\n"
"slBins_or_empty = 100;\n"
"slBins_or_options = 101;\n"
"slBins_selection = 102;\n"
"slBins_selection_or_option = 103;\n"
"slBit_select = 104;\n"
"slBlock_event_expression = 105;\n"
"slBlock_item_declaration = 106;\n"
"slBlocking_assignment = 107;\n"
"slBoolean_abbrev = 108;\n"
"slBreakStmt = 109;\n"
"slBuilt_in_method_call = 110;\n"
"slCase = 111;\n"
"slCase_generate_construct = 112;\n"
"slCase_generate_item = 113;\n"
"slCase_inside_item = 114;\n"
"slCase_item = 115;\n"
"slCase_keyword = 116;\n"
"slCase_pattern_item = 117;\n"
"slCase_statement = 118;\n"
"slCaseX = 119;\n"
"slCaseZ = 120;\n"
"slCast = 121;\n"
"slCasting_type = 122;\n"
"slCell_clause = 123;\n"
"slCelldefine_directive = 124;\n"
"slChandle_type = 125;\n"
"slCharge_strength = 126;\n"
"slChecker = 127;\n"
"slChecker_declaration = 128;\n"
"slChecker_generate_item = 129;\n"
"slChecker_instantiation = 130;\n"
"slChecker_or_generate_item = 131;\n"
"slChecker_or_generate_item_declaration = 132;\n"
"slChecker_port_item = 133;\n"
"slChecker_port_list = 134;\n"
"slClass = 135;\n"
"slClass_constraint = 136;\n"
"slClass_constructor_declaration = 137;\n"
"slClass_constructor_prototype = 138;\n"
"slClass_declaration = 139;\n"
"slClass_item = 140;\n"
"slClass_keyword = 141;\n"
"slClass_method = 142;\n"
"slClass_new = 143;\n"
"slClass_property = 144;\n"
"slClass_scope = 145;\n"
"slClass_type = 146;\n"
"slClassItemQualifier_Local = 147;\n"
"slClassItemQualifier_Protected = 148;\n"
"slClassItemQualifier_Static = 149;\n"
"slClocking_decl_assign = 150;\n"
"slClocking_declaration = 151;\n"
"slClocking_drive = 152;\n"
"slClocking_event = 153;\n"
"slClocking_item = 154;\n"
"slClocking_skew = 155;\n"
"slClockingDir_Inout = 156;\n"
"slClockingDir_Input = 157;\n"
"slClockingDir_InputOutput = 158;\n"
"slClockingDir_Output = 159;\n"
"slClockvar = 160;\n"
"slClockvar_expression = 161;\n"
"slCmos_switch_instance = 162;\n"
"slCmosSwitchType_Cmos = 163;\n"
"slCmosSwitchType_RCmos = 164;\n"
"slColumnPartSelectOp = 165;\n"
"slCombinational_body = 166;\n"
"slCombinational_entry = 167;\n"
"slComma_operator = 168;\n"
"slComments = 169;\n"
"slComplex_func_call = 170;\n"
"slConcatenation = 171;\n"
"slConcurrent_assertion_item = 172;\n"
"slConcurrent_assertion_item_declaration = 173;\n"
"slConcurrent_assertion_statement = 174;\n"
"slCond_predicate = 175;\n"
"slConditional_generate_construct = 176;\n"
"slConditional_operator = 177;\n"
"slConditional_statement = 178;\n"
"slConfig = 179;\n"
"slConfig_declaration = 180;\n"
"slConfig_rule_statement = 181;\n"
"slConsecutive_repetition = 182;\n"
"slConst_or_range_expression = 183;\n"
"slConst_type = 184;\n"
"slConstant_assignment_pattern_expression = 185;\n"
"slConstant_bit_select = 186;\n"
"slConstant_cast = 187;\n"
"slConstant_concatenation = 188;\n"
"slConstant_expression = 189;\n"
"slConstant_indexed_range = 190;\n"
"slConstant_mintypmax_expression = 191;\n"
"slConstant_multiple_concatenation = 192;\n"
"slConstant_param_expression = 193;\n"
"slConstant_part_select_range = 194;\n"
"slConstant_primary = 195;\n"
"slConstant_range = 196;\n"
"slConstant_range_expression = 197;\n"
"slConstant_select = 198;\n"
"slConstantSelect = 199;\n"
"slConstraint_block = 200;\n"
"slConstraint_block_item = 201;\n"
"slConstraint_declaration = 202;\n"
"slConstraint_expression = 203;\n"
"slConstraint_primary = 204;\n"
"slConstraint_prototype = 205;\n"
"slConstraint_set = 206;\n"
"slConstSelect = 207;\n"
"slContext_keyword = 208;\n"
"slContinueStmt = 209;\n"
"slContinuous_assign = 210;\n"
"slControlled_timing_check_event = 211;\n"
"slCover_cross = 212;\n"
"slCover_point = 213;\n"
"slCover_property_statement = 214;\n"
"slCover_sequence_statement = 215;\n"
"slCoverage_event = 216;\n"
"slCoverage_option = 217;\n"
"slCoverage_spec = 218;\n"
"slCoverage_spec_or_option = 219;\n"
"slCovergroup_declaration = 220;\n"
"slCR = 221;\n"
"slCross_body = 222;\n"
"slCross_body_item = 223;\n"
"slCross_item = 224;\n"
"slCycle_delay = 225;\n"
"slCycle_delay_const_range_expression = 226;\n"
"slCycle_delay_range = 227;\n"
"slData_declaration = 228;\n"
"slData_type = 229;\n"
"slData_type_or_implicit = 230;\n"
"slData_type_or_void = 231;\n"
"slDeassign = 232;\n"
"slDecPartSelectOp = 233;\n"
"slDefault_clause = 234;\n"
"slDefault_decay_time_directive = 235;\n"
"slDefault_nettype_directive = 236;\n"
"slDefault_trireg_strenght_directive = 237;\n"
"slDefault_value = 238;\n"
"slDefaultSkew_Intput = 239;\n"
"slDefaultSkew_IntputOutput = 240;\n"
"slDefaultSkew_Output = 241;\n"
"slDeferred_immediate_assert_statement = 242;\n"
"slDeferred_immediate_assertion_item = 243;\n"
"slDeferred_immediate_assertion_statement = 244;\n"
"slDeferred_immediate_assume_statement = 245;\n"
"slDeferred_immediate_cover_statement = 246;\n"
"slDefine_directive = 247;\n"
"slDefparam_assignment = 248;\n"
"slDelay2 = 249;\n"
"slDelay3 = 250;\n"
"slDelay_control = 251;\n"
"slDelay_mode_distributed_directive = 252;\n"
"slDelay_mode_path_directive = 253;\n"
"slDelay_mode_unit_directive = 254;\n"
"slDelay_mode_zero_directive = 255;\n"
"slDelay_or_event_control = 256;\n"
"slDelay_value = 257;\n"
"slDelayed_data = 258;\n"
"slDelayed_reference = 259;\n"
"slDescription = 260;\n"
"slDesign_statement = 261;\n"
"slDirective_in_macro = 262;\n"
"slDisable_portfaults_directive = 263;\n"
"slDisable_statement = 264;\n"
"slDist_item = 265;\n"
"slDist_list = 266;\n"
"slDistWeight_AssignRange = 267;\n"
"slDistWeight_AssignValue = 268;\n"
"slDo = 269;\n"
"slDollar_fullskew_timing_check = 270;\n"
"slDollar_hold_timing_check = 271;\n"
"slDollar_keyword = 272;\n"
"slDollar_nochange_timing_check = 273;\n"
"slDollar_period_timing_check = 274;\n"
"slDollar_recovery_timing_check = 275;\n"
"slDollar_recrem_timing_check = 276;\n"
"slDollar_removal_timing_check = 277;\n"
"slDollar_root_keyword = 278;\n"
"slDollar_setup_timing_check = 279;\n"
"slDollar_setuphold_timing_check = 280;\n"
"slDollar_skew_timing_check = 281;\n"
"slDollar_timeskew_timing_check = 282;\n"
"slDollar_width_timing_check = 283;\n"
"slDotStar = 284;\n"
"slDpi_import_export = 285;\n"
"slDrive_strength = 286;\n"
"slDynamic_array_new = 287;\n"
"slEdge_control_specifier = 288;\n"
"slEdge_descriptor = 289;\n"
"slEdge_Edge = 290;\n"
"slEdge_indicator = 291;\n"
"slEdge_input_list = 292;\n"
"slEdge_Negedge = 293;\n"
"slEdge_Posedge = 294;\n"
"slEdge_sensitive_path_declaration = 295;\n"
"slEdge_symbol = 296;\n"
"slElaboration_system_task = 297;\n"
"slElse = 298;\n"
"slElse_directive = 299;\n"
"slElseif_directive = 300;\n"
"slElseif_directive_in_macro_body = 301;\n"
"slElsif_directive = 302;\n"
"slElsif_directive_in_macro_body = 303;\n"
"slEmpty_queue = 304;\n"
"slEnable_gate_instance = 305;\n"
"slEnable_portfaults_directive = 306;\n"
"slEnableGateType_Bufif0 = 307;\n"
"slEnableGateType_Bufif1 = 308;\n"
"slEnableGateType_Notif0 = 309;\n"
"slEnableGateType_Notif1 = 310;\n"
"slEnd = 311;\n"
"slEnd_edge_offset = 312;\n"
"slEnd_keywords_directive = 313;\n"
"slEndcase = 314;\n"
"slEndcelldefine_directive = 315;\n"
"slEndchecker = 316;\n"
"slEndclass = 317;\n"
"slEndclocking = 318;\n"
"slEndconfig = 319;\n"
"slEndfunction = 320;\n"
"slEndgenerate = 321;\n"
"slEndgroup = 322;\n"
"slEndif_directive = 323;\n"
"slEndinterface = 324;\n"
"slEndmodule = 325;\n"
"slEndpackage = 326;\n"
"slEndprimitive = 327;\n"
"slEndprogram = 328;\n"
"slEndproperty = 329;\n"
"slEndprotect_directive = 330;\n"
"slEndprotected_directive = 331;\n"
"slEndsequence = 332;\n"
"slEndspecify = 333;\n"
"slEndtable = 334;\n"
"slEndtask = 335;\n"
"slEnum_base_type = 336;\n"
"slEnum_keyword = 337;\n"
"slEnum_name_declaration = 338;\n"
"slEscaped_identifier = 339;\n"
"slEscaped_macro_definition_body = 340;\n"
"slEscaped_macro_definition_body_alt1 = 341;\n"
"slEscaped_macro_definition_body_alt2 = 342;\n"
"slEscapedCR = 343;\n"
"slEvent_based_flag = 344;\n"
"slEvent_control = 345;\n"
"slEvent_expression = 346;\n"
"slEvent_trigger = 347;\n"
"slEvent_type = 348;\n"
"slEveryRule = 349;\n"
"slExpand_vectornets_directive = 350;\n"
"slExpect_property_statement = 351;\n"
"slExpression = 352;\n"
"slExpression_or_cond_pattern = 353;\n"
"slExpression_or_dist = 354;\n"
"slExtern_constraint_declaration = 355;\n"
"slExtern_qualifier = 356;\n"
"slExtern_tf_declaration = 357;\n"
"slFile_path_spec = 358;\n"
"slFinal_construct = 359;\n"
"slFor = 360;\n"
"slFor_initialization = 361;\n"
"slFor_step = 362;\n"
"slFor_step_assignment = 363;\n"
"slFor_variable_declaration = 364;\n"
"slForce = 365;\n"
"slForeach = 366;\n"
"slForever = 367;\n"
"slFull_edge_sensitive_path_description = 368;\n"
"slFull_path_description = 369;\n"
"slFunction_body_declaration = 370;\n"
"slFunction_data_type = 371;\n"
"slFunction_data_type_or_implicit = 372;\n"
"slFunction_declaration = 373;\n"
"slFunction_name_decl = 374;\n"
"slFunction_prototype = 375;\n"
"slFunction_statement_or_null = 376;\n"
"slGate_instantiation = 377;\n"
"slGenerate_block = 378;\n"
"slGenerate_interface_block = 379;\n"
"slGenerate_interface_case_statement = 380;\n"
"slGenerate_interface_conditional_statement = 381;\n"
"slGenerate_interface_item = 382;\n"
"slGenerate_interface_loop_statement = 383;\n"
"slGenerate_interface_named_block = 384;\n"
"slGenerate_item = 385;\n"
"slGenerate_module_block = 386;\n"
"slGenerate_module_case_statement = 387;\n"
"slGenerate_module_conditional_statement = 388;\n"
"slGenerate_module_item = 389;\n"
"slGenerate_module_loop_statement = 390;\n"
"slGenerate_module_named_block = 391;\n"
"slGenerate_region = 392;\n"
"slGenerated_interface_instantiation = 393;\n"
"slGenerated_module_instantiation = 394;\n"
"slGenericElementType = 395;\n"
"slGenvar_assignment = 396;\n"
"slGenvar_decl_assignment = 397;\n"
"slGenvar_declaration = 398;\n"
"slGenvar_initialization = 399;\n"
"slGenvar_interface_case_item = 400;\n"
"slGenvar_iteration = 401;\n"
"slGenvar_module_case_item = 402;\n"
"slGoto_repetition = 403;\n"
"slHierarchical_btf_identifier = 404;\n"
"slHierarchical_identifier = 405;\n"
"slHierarchical_instance = 406;\n"
"slHighZ0 = 407;\n"
"slHighZ1 = 408;\n"
"slIdentifier = 409;\n"
"slIdentifier_in_macro_body = 410;\n"
"slIdentifier_list = 411;\n"
"slIf_generate_construct = 412;\n"
"slIfdef_directive = 413;\n"
"slIfdef_directive_in_macro_body = 414;\n"
"slIfndef_directive = 415;\n"
"slIfndef_directive_in_macro_body = 416;\n"
"slImmediate_assertion_statement = 417;\n"
"slImplicit_class_handle = 418;\n"
"slImplicit_data_type = 419;\n"
"slInc_or_dec_expression = 420;\n"
"slIncDec_MinusMinus = 421;\n"
"slIncDec_PlusPlus = 422;\n"
"slInclude_directive = 423;\n"
"slInclude_statement = 424;\n"
"slIncPartSelectOp = 425;\n"
"slIndexed_range = 426;\n"
"slInitial_construct = 427;\n"
"slInitVal_1TickB0 = 428;\n"
"slInitVal_1Tickb0 = 429;\n"
"slInitVal_1TickB1 = 430;\n"
"slInitVal_1Tickb1 = 431;\n"
"slInitVal_1TickBX = 432;\n"
"slInitVal_1TickBx = 433;\n"
"slInitVal_1TickbX = 434;\n"
"slInitVal_1Tickbx = 435;\n"
"slInitVal_Integral = 436;\n"
"slInout_declaration = 437;\n"
"slInput_declaration = 438;\n"
"slInsideOp = 439;\n"
"slInst_clause = 440;\n"
"slInst_name = 441;\n"
"slIntConst = 442;\n"
"slInteger_type = 443;\n"
"slIntegerAtomType_Byte = 444;\n"
"slIntegerAtomType_Int = 445;\n"
"slIntegerAtomType_LongInt = 446;\n"
"slIntegerAtomType_Shortint = 447;\n"
"slIntegerAtomType_Time = 448;\n"
"slInterface = 449;\n"
"slInterface_ansi_header = 450;\n"
"slInterface_class_declaration = 451;\n"
"slInterface_class_item = 452;\n"
"slInterface_class_keyword = 453;\n"
"slInterface_class_method = 454;\n"
"slInterface_class_type = 455;\n"
"slInterface_declaration = 456;\n"
"slInterface_identifier = 457;\n"
"slInterface_instantiation = 458;\n"
"slInterface_item = 459;\n"
"slInterface_nonansi_header = 460;\n"
"slInterface_or_generate_item = 461;\n"
"slInterface_port_declaration = 462;\n"
"slInterface_port_header = 463;\n"
"slIntVec_TypeBit = 464;\n"
"slIntVec_TypeLogic = 465;\n"
"slIntVec_TypeReg = 466;\n"
"slJoin_any_keyword = 467;\n"
"slJoin_keyword = 468;\n"
"slJoin_none_keyword = 469;\n"
"slJump_statement = 470;\n"
"slLarge = 471;\n"
"slLet_declaration = 472;\n"
"slLet_formal_type = 473;\n"
"slLet_port_item = 474;\n"
"slLet_port_list = 475;\n"
"slLevel_input_list = 476;\n"
"slLevel_symbol = 477;\n"
"slLiblist_clause = 478;\n"
"slLibrary_declaration = 479;\n"
"slLibrary_descriptions = 480;\n"
"slLibrary_text = 481;\n"
"slLifetime_Automatic = 482;\n"
"slLifetime_Static = 483;\n"
"slLine_directive = 484;\n"
"slList_of_arguments = 485;\n"
"slList_of_checker_port_connections = 486;\n"
"slList_of_clocking_decl_assign = 487;\n"
"slList_of_cross_items = 488;\n"
"slList_of_defparam_assignments = 489;\n"
"slList_of_interface_identifiers = 490;\n"
"slList_of_net_assignments = 491;\n"
"slList_of_net_decl_assignments = 492;\n"
"slList_of_param_assignments = 493;\n"
"slList_of_parameter_assignments = 494;\n"
"slList_of_path_delay_expressions = 495;\n"
"slList_of_path_inputs = 496;\n"
"slList_of_path_outputs = 497;\n"
"slList_of_port_connections = 498;\n"
"slList_of_port_declarations = 499;\n"
"slList_of_port_identifiers = 500;\n"
"slList_of_ports = 501;\n"
"slList_of_specparam_assignments = 502;\n"
"slList_of_tf_variable_identifiers = 503;\n"
"slList_of_type_assignments = 504;\n"
"slList_of_variable_assignments = 505;\n"
"slList_of_variable_decl_assignments = 506;\n"
"slList_of_variable_identifiers = 507;\n"
"slList_of_variable_port_identifiers = 508;\n"
"slList_of_virtual_interface_decl = 509;\n"
"slLocal_parameter_declaration = 510;\n"
"slLoop_generate_construct = 511;\n"
"slLoop_statement = 512;\n"
"slLoop_variables = 513;\n"
"slMacro_actual_args = 514;\n"
"slMacro_arg = 515;\n"
"slMacro_arguments = 516;\n"
"slMacro_definition = 517;\n"
"slMacroInstanceNoArgs = 518;\n"
"slMacroInstanceWithArgs = 519;\n"
"slMatches = 520;\n"
"slMedium = 521;\n"
"slMethod_call = 522;\n"
"slMethod_call_body = 523;\n"
"slMethod_call_root = 524;\n"
"slMethod_prototype = 525;\n"
"slMethodQualifier_ClassItem = 526;\n"
"slMethodQualifier_Virtual = 527;\n"
"slMintypmax_expression = 528;\n"
"slModport_hierarchical_ports_declaration = 529;\n"
"slModport_item = 530;\n"
"slModport_ports_declaration = 531;\n"
"slModport_simple_port = 532;\n"
"slModport_simple_ports_declaration = 533;\n"
"slModport_tf_port = 534;\n"
"slModport_tf_ports_declaration = 535;\n"
"slModule = 536;\n"
"slModule_ansi_header = 537;\n"
"slModule_common_item = 538;\n"
"slModule_declaration = 539;\n"
"slModule_instantiation = 540;\n"
"slModule_item = 541;\n"
"slModule_keyword = 542;\n"
"slModule_nonansi_header = 543;\n"
"slModule_or_generate_item = 544;\n"
"slModule_or_generate_item_declaration = 545;\n"
"slModule_path_concatenation = 546;\n"
"slModule_path_expression = 547;\n"
"slModule_path_mintypmax_expression = 548;\n"
"slModule_path_multiple_concatenation = 549;\n"
"slModule_path_primary = 550;\n"
"slModuleInstance = 551;\n"
"slMos_switch_instance = 552;\n"
"slMosSwitchType_NMos = 553;\n"
"slMosSwitchType_PMos = 554;\n"
"slMosSwitchType_RNMos = 555;\n"
"slMosSwitchType_RPMos = 556;\n"
"slMultiline_args_macro_definition = 557;\n"
"slMultiline_no_args_macro_definition = 558;\n"
"slMultiple_concatenation = 559;\n"
"slN_input_gate_instance = 560;\n"
"slN_output_gate_instance = 561;\n"
"slName_of_instance = 562;\n"
"slNamed_checker_port_connection = 563;\n"
"slNamed_parameter_assignment = 564;\n"
"slNamed_port_connection = 565;\n"
"slNet_alias = 566;\n"
"slNet_assignment = 567;\n"
"slNet_decl_assignment = 568;\n"
"slNet_declaration = 569;\n"
"slNet_lvalue = 570;\n"
"slNet_port_header = 571;\n"
"slNet_port_type = 572;\n"
"slNet_type = 573;\n"
"slNet_type_declaration = 574;\n"
"slNetType_Supply0 = 575;\n"
"slNetType_Supply1 = 576;\n"
"slNetType_Tri = 577;\n"
"slNetType_Tri0 = 578;\n"
"slNetType_Tri1 = 579;\n"
"slNetType_TriAnd = 580;\n"
"slNetType_TriOr = 581;\n"
"slNetType_TriReg = 582;\n"
"slNetType_Uwire = 583;\n"
"slNetType_Wand = 584;\n"
"slNetType_Wire = 585;\n"
"slNetType_Wor = 586;\n"
"slNext_state = 587;\n"
"slNInpGate_And = 588;\n"
"slNInpGate_Nand = 589;\n"
"slNInpGate_Nor = 590;\n"
"slNInpGate_Or = 591;\n"
"slNInpGate_Xnor = 592;\n"
"slNInpGate_Xor = 593;\n"
"slNoaccelerate_directive = 594;\n"
"slNoexpand_vectornets_directive = 595;\n"
"slNon_consecutive_repetition = 596;\n"
"slNon_port_interface_item = 597;\n"
"slNon_port_module_item = 598;\n"
"slNon_port_program_item = 599;\n"
"slNonblocking_assignment = 600;\n"
"slNonBlockingTriggerEvent = 601;\n"
"slNonIntType_Real = 602;\n"
"slNonIntType_RealTime = 603;\n"
"slNonIntType_ShortReal = 604;\n"
"slNonrange_select = 605;\n"
"slNonrange_variable_lvalue = 606;\n"
"slNoremove_gatenames_directive = 607;\n"
"slNoremove_netnames_directive = 608;\n"
"slNosuppress_faults_directive = 609;\n"
"slNotifier = 610;\n"
"slNoType = 611;\n"
"slNounconnected_drive_directive = 612;\n"
"slNOutGate_Buf = 613;\n"
"slNOutGate_Not = 614;\n"
"slNull_keyword = 615;\n"
"slNull_rule = 616;\n"
"slNumber = 617;\n"
"slNumber_1TickB0 = 618;\n"
"slNumber_1Tickb0 = 619;\n"
"slNumber_1TickB1 = 620;\n"
"slNumber_1Tickb1 = 621;\n"
"slNumber_1TickBX = 622;\n"
"slNumber_1TickBx = 623;\n"
"slNumber_1TickbX = 624;\n"
"slNumber_1Tickbx = 625;\n"
"slNumber_Integral = 626;\n"
"slNumber_Real = 627;\n"
"slNumber_Tick0 = 628;\n"
"slNumber_Tick1 = 629;\n"
"slNumber_TickB0 = 630;\n"
"slNumber_Tickb0 = 631;\n"
"slNumber_TickB1 = 632;\n"
"slNumber_Tickb1 = 633;\n"
"slOpen_range_list = 634;\n"
"slOperator_assignment = 635;\n"
"slOr_call = 636;\n"
"slOr_operator = 637;\n"
"slOrdered_checker_port_connection = 638;\n"
"slOrdered_parameter_assignment = 639;\n"
"slOrdered_port_connection = 640;\n"
"slOutput_declaration = 641;\n"
"slOutput_symbol = 642;\n"
"slOverload_declaration = 643;\n"
"slOverload_proto_formals = 644;\n"
"slOverloadOp_Div = 645;\n"
"slOverloadOp_Equal = 646;\n"
"slOverloadOp_Equiv = 647;\n"
"slOverloadOp_Greater = 648;\n"
"slOverloadOp_GreaterEqual = 649;\n"
"slOverloadOp_Less = 650;\n"
"slOverloadOp_LessEqual = 651;\n"
"slOverloadOp_Minus = 652;\n"
"slOverloadOp_MinusMinus = 653;\n"
"slOverloadOp_Mult = 654;\n"
"slOverloadOp_NotEqual = 655;\n"
"slOverloadOp_Percent = 656;\n"
"slOverloadOp_Plus = 657;\n"
"slOverloadOp_PlusPlus = 658;\n"
"slOverloadOp_StarStar = 659;\n"
"slPackage = 660;\n"
"slPackage_declaration = 661;\n"
"slPackage_export_declaration = 662;\n"
"slPackage_import_declaration = 663;\n"
"slPackage_import_item = 664;\n"
"slPackage_item = 665;\n"
"slPackage_or_generate_item_declaration = 666;\n"
"slPackage_scope = 667;\n"
"slPacked_dimension = 668;\n"
"slPacked_keyword = 669;\n"
"slPaired_parens = 670;\n"
"slPar_block = 671;\n"
"slParallel_edge_sensitive_path_description = 672;\n"
"slParallel_path_description = 673;\n"
"slParam_assignment = 674;\n"
"slParam_expression = 675;\n"
"slParameter_declaration = 676;\n"
"slParameter_override = 677;\n"
"slParameter_port_declaration = 678;\n"
"slParameter_port_list = 679;\n"
"slParameter_value_assignment = 680;\n"
"slPart_select_op = 681;\n"
"slPart_select_op_column = 682;\n"
"slPart_select_range = 683;\n"
"slPass_enable_switch_instance = 684;\n"
"slPass_switch_instance = 685;\n"
"slPassEnSwitch_RTranif0 = 686;\n"
"slPassEnSwitch_RTranif1 = 687;\n"
"slPassEnSwitch_Tranif0 = 688;\n"
"slPassEnSwitch_Tranif1 = 689;\n"
"slPassSwitch_RTran = 690;\n"
"slPassSwitch_Tran = 691;\n"
"slPath_declaration = 692;\n"
"slPath_delay_expression = 693;\n"
"slPath_delay_value = 694;\n"
"slPattern = 695;\n"
"slPort = 696;\n"
"slPort_declaration = 697;\n"
"slPort_expression = 698;\n"
"slPort_reference = 699;\n"
"slPortDir_Inout = 700;\n"
"slPortDir_Inp = 701;\n"
"slPortDir_Out = 702;\n"
"slPortDir_Ref = 703;\n"
"slPortInst = 704;\n"
"slPound_delay = 705;\n"
"slPound_delay_value = 706;\n"
"slPragma_directive = 707;\n"
"slPragma_expression = 708;\n"
"slPragma_value = 709;\n"
"slPrimary = 710;\n"
"slPrimary_literal = 711;\n"
"slPrimitive = 712;\n"
"slPrimitiveInstance = 713;\n"
"slPriority = 714;\n"
"slProcedural_assertion_statement = 715;\n"
"slProcedural_continuous_assignment = 716;\n"
"slProcedural_timing_control = 717;\n"
"slProcedural_timing_control_statement = 718;\n"
"slProduction = 719;\n"
"slProduction_item = 720;\n"
"slProgram = 721;\n"
"slProgram_ansi_header = 722;\n"
"slProgram_declaration = 723;\n"
"slProgram_generate_item = 724;\n"
"slProgram_instantiation = 725;\n"
"slProgram_item = 726;\n"
"slProgram_nonansi_header = 727;\n"
"slProperty_actual_arg = 728;\n"
"slProperty_case_item = 729;\n"
"slProperty_declaration = 730;\n"
"slProperty_expr = 731;\n"
"slProperty_formal_type = 732;\n"
"slProperty_instance = 733;\n"
"slProperty_lvar_port_direction = 734;\n"
"slProperty_port_item = 735;\n"
"slProperty_port_list = 736;\n"
"slProperty_spec = 737;\n"
"slPropQualifier_ClassItem = 738;\n"
"slPropQualifier_Rand = 739;\n"
"slPropQualifier_Randc = 740;\n"
"slProtect_directive = 741;\n"
"slProtected_directive = 742;\n"
"slPs_identifier = 743;\n"
"slPs_or_hierarchical_array_identifier = 744;\n"
"slPs_or_hierarchical_identifier = 745;\n"
"slPs_or_hierarchical_sequence_identifier = 746;\n"
"slPs_type_identifier = 747;\n"
"slPull0 = 748;\n"
"slPull1 = 749;\n"
"slPull_gate_instance = 750;\n"
"slPulldown_strength = 751;\n"
"slPullup_strength = 752;\n"
"slPulse_control_specparam = 753;\n"
"slPulsestyle_declaration = 754;\n"
"slPure_keyword = 755;\n"
"slPure_virtual_qualifier = 756;\n"
"slQueue_dimension = 757;\n"
"slRandcase_item = 758;\n"
"slRandcase_statement = 759;\n"
"slRandomize_call = 760;\n"
"slRandomQualifier_Rand = 761;\n"
"slRandomQualifier_RandC = 762;\n"
"slRandsequence_statement = 763;\n"
"slRange_expression = 764;\n"
"slRange_list = 765;\n"
"slRealConst = 766;\n"
"slRef_declaration = 767;\n"
"slReference_event = 768;\n"
"slRelease = 769;\n"
"slRemain_active_flag = 770;\n"
"slRemove_gatename_directive = 771;\n"
"slRemove_netname_directive = 772;\n"
"slRepeat = 773;\n"
"slRepeat_range = 774;\n"
"slResetall_directive = 775;\n"
"slRestrict_property_statement = 776;\n"
"slReturnStmt = 777;\n"
"slRs_case = 778;\n"
"slRs_case_item = 779;\n"
"slRs_code_block = 780;\n"
"slRs_if_else = 781;\n"
"slRs_prod = 782;\n"
"slRs_production_list = 783;\n"
"slRs_repeat = 784;\n"
"slRs_rule = 785;\n"
"slScalar_1TickB0 = 786;\n"
"slScalar_1Tickb0 = 787;\n"
"slScalar_1TickB1 = 788;\n"
"slScalar_1Tickb1 = 789;\n"
"slScalar_Integral = 790;\n"
"slScalar_TickB0 = 791;\n"
"slScalar_Tickb0 = 792;\n"
"slScalar_TickB1 = 793;\n"
"slScalar_Tickb1 = 794;\n"
"slScalar_timing_check_condition = 795;\n"
"slSelect = 796;\n"
"slSelect_condition = 797;\n"
"slSelect_expression = 798;\n"
"slSeq_block = 799;\n"
"slSeq_input_list = 800;\n"
"slSeqFormatType_Data = 801;\n"
"slSeqFormatType_Sequence = 802;\n"
"slSeqFormatType_Untyped = 803;\n"
"slSeqLvarPortDir_Inout = 804;\n"
"slSeqLvarPortDir_Input = 805;\n"
"slSeqLvarPortDir_Output = 806;\n"
"slSequence_actual_arg = 807;\n"
"slSequence_declaration = 808;\n"
"slSequence_expr = 809;\n"
"slSequence_instance = 810;\n"
"slSequence_list_of_arguments = 811;\n"
"slSequence_match_item = 812;\n"
"slSequence_method_call = 813;\n"
"slSequence_port_item = 814;\n"
"slSequence_port_list = 815;\n"
"slSequential_body = 816;\n"
"slSequential_entry = 817;\n"
"slShowcancelled_declaration = 818;\n"
"slSigned_directive = 819;\n"
"slSigning_Signed = 820;\n"
"slSigning_Unsigned = 821;\n"
"slSimple_args_macro_definition = 822;\n"
"slSimple_args_macro_definition_in_macro_body = 823;\n"
"slSimple_immediate_assert_statement = 824;\n"
"slSimple_immediate_assertion_statement = 825;\n"
"slSimple_immediate_assume_statement = 826;\n"
"slSimple_immediate_cover_statement = 827;\n"
"slSimple_macro_definition_body = 828;\n"
"slSimple_macro_definition_body_in_macro_body = 829;\n"
"slSimple_no_args_macro_definition = 830;\n"
"slSimple_no_args_macro_definition_in_macro_body = 831;\n"
"slSimple_path_declaration = 832;\n"
"slSimple_type = 833;\n"
"slSlice_size = 834;\n"
"slSlline = 835;\n"
"slSmall = 836;\n"
"slSolve_before_list = 837;\n"
"slSource_text = 838;\n"
"slSpaces = 839;\n"
"slSpecify_block = 840;\n"
"slSpecify_input_terminal_descriptor = 841;\n"
"slSpecify_item = 842;\n"
"slSpecify_output_terminal_descriptor = 843;\n"
"slSpecify_terminal_descriptor = 844;\n"
"slSpecparam_assignment = 845;\n"
"slSpecparam_declaration = 846;\n"
"slStamptime_condition = 847;\n"
"slStart_edge_offset = 848;\n"
"slState_dependent_path_declaration = 849;\n"
"slStatement = 850;\n"
"slStatement_item = 851;\n"
"slStatement_or_null = 852;\n"
"slStream_concatenation = 853;\n"
"slStream_expression = 854;\n"
"slStream_operator = 855;\n"
"slStreaming_concatenation = 856;\n"
"slStrength0 = 857;\n"
"slStrength1 = 858;\n"
"slString = 859;\n"
"slString_blob = 860;\n"
"slString_type = 861;\n"
"slString_value = 862;\n"
"slStringConst = 863;\n"
"slStringLiteral = 864;\n"
"slStrong0 = 865;\n"
"slStrong1 = 866;\n"
"slStruct_keyword = 867;\n"
"slStruct_union = 868;\n"
"slStruct_union_member = 869;\n"
"slStructure_pattern_key = 870;\n"
"slSubroutine_call = 871;\n"
"slSubroutine_call_statement = 872;\n"
"slSuper_dot_new = 873;\n"
"slSuper_keyword = 874;\n"
"slSupply0 = 875;\n"
"slSupply1 = 876;\n"
"slSuppress_faults_directive = 877;\n"
"slSurelog_macro_not_defined = 878;\n"
"slSv_file_directive = 879;\n"
"slSv_interface = 880;\n"
"slSv_line_directive = 881;\n"
"slSv_package = 882;\n"
"slSystem_task = 883;\n"
"slSystem_task_names = 884;\n"
"slSystem_timing_check = 885;\n"
"slT0x_path_delay_expression = 886;\n"
"slT0z_path_delay_expression = 887;\n"
"slT01_path_delay_expression = 888;\n"
"slT1x_path_delay_expression = 889;\n"
"slT1z_path_delay_expression = 890;\n"
"slT10_path_delay_expression = 891;\n"
"slT_path_delay_expression = 892;\n"
"slTagged_keyword = 893;\n"
"slTagged_union_expression = 894;\n"
"slTask_body_declaration = 895;\n"
"slTask_declaration = 896;\n"
"slTask_name_decl = 897;\n"
"slTask_prototype = 898;\n"
"slText_blob = 899;\n"
"slTf_item_declaration = 900;\n"
"slTf_port_declaration = 901;\n"
"slTf_port_item = 902;\n"
"slTf_port_list = 903;\n"
"slTfall_path_delay_expression = 904;\n"
"slTfPortDir_ConstRef = 905;\n"
"slTfPortDir_Inout = 906;\n"
"slTfPortDir_Inp = 907;\n"
"slTfPortDir_Out = 908;\n"
"slTfPortDir_Ref = 909;\n"
"slThis = 910;\n"
"slThis_dot_super = 911;\n"
"slThis_keyword = 912;\n"
"slThreshold = 913;\n"
"slTime_literal = 914;\n"
"slTime_unit = 915;\n"
"slTimescale_directive = 916;\n"
"slTimeUnitsDecl_TimePrecision = 917;\n"
"slTimeUnitsDecl_TimePrecisionTimeUnit = 918;\n"
"slTimeUnitsDecl_TimeUnit = 919;\n"
"slTimeUnitsDecl_TimeUnitDiv = 920;\n"
"slTimeUnitsDecl_TimeUnitTimePrecision = 921;\n"
"slTiming_check_condition = 922;\n"
"slTiming_check_event = 923;\n"
"slTiming_check_limit = 924;\n"
"slTimingCheckEventControl_Edge = 925;\n"
"slTimingCheckEventControl_Negedge = 926;\n"
"slTimingCheckEventControl_Posedge = 927;\n"
"slTop_directives = 928;\n"
"slTop_level_library_rule = 929;\n"
"slTop_level_rule = 930;\n"
"slTrans_list = 931;\n"
"slTrans_range_list = 932;\n"
"slTrans_set = 933;\n"
"slTrise_path_delay_expression = 934;\n"
"slTx0_path_delay_expression = 935;\n"
"slTx1_path_delay_expression = 936;\n"
"slTxz_path_delay_expression = 937;\n"
"slType_declaration = 938;\n"
"slType_reference = 939;\n"
"slTz0_path_delay_expression = 940;\n"
"slTz1_path_delay_expression = 941;\n"
"slTz_path_delay_expression = 942;\n"
"slTzx_path_delay_expression = 943;\n"
"slUdp_ansi_declaration = 944;\n"
"slUdp_body = 945;\n"
"slUdp_declaration = 946;\n"
"slUdp_declaration_port_list = 947;\n"
"slUdp_initial_statement = 948;\n"
"slUdp_input_declaration = 949;\n"
"slUdp_instance = 950;\n"
"slUdp_instantiation = 951;\n"
"slUdp_nonansi_declaration = 952;\n"
"slUdp_output_declaration = 953;\n"
"slUdp_port_declaration = 954;\n"
"slUdp_port_list = 955;\n"
"slUdp_reg_declaration = 956;\n"
"slUnary_BitwAnd = 957;\n"
"slUnary_BitwOr = 958;\n"
"slUnary_BitwXor = 959;\n"
"slUnary_Minus = 960;\n"
"slUnary_Not = 961;\n"
"slUnary_Plus = 962;\n"
"slUnary_ReductNand = 963;\n"
"slUnary_ReductNor = 964;\n"
"slUnary_ReductXnor1 = 965;\n"
"slUnary_ReductXnor2 = 966;\n"
"slUnary_Tilda = 967;\n"
"slUnaryModOp_BitwAnd = 968;\n"
"slUnaryModOp_BitwOr = 969;\n"
"slUnaryModOp_BitwXor = 970;\n"
"slUnaryModOp_Not = 971;\n"
"slUnaryModOp_ReductNand = 972;\n"
"slUnaryModOp_ReductNor = 973;\n"
"slUnaryModOp_ReductXNor1 = 974;\n"
"slUnaryModOp_ReductXnor2 = 975;\n"
"slUnaryModOp_Tilda = 976;\n"
"slUnbased_unsized_literal = 977;\n"
"slUnconnected_drive_directive = 978;\n"
"slUndef_directive = 979;\n"
"slUndefineall_directive = 980;\n"
"slUnion_keyword = 981;\n"
"slUnique = 982;\n"
"slUnique0 = 983;\n"
"slUnique_call = 984;\n"
"slUnique_priority = 985;\n"
"slUniqueness_constraint = 986;\n"
"slUnpacked_dimension = 987;\n"
"slUnsigned_directive = 988;\n"
"slUnsized_dimension = 989;\n"
"slUnterminated_string = 990;\n"
"slUse_clause = 991;\n"
"slUse_clause_config = 992;\n"
"slUselib_directive = 993;\n"
"slValue_range = 994;\n"
"slVar_data_type = 995;\n"
"slVar_type = 996;\n"
"slVariable_assignment = 997;\n"
"slVariable_decl_assignment = 998;\n"
"slVariable_declaration = 999;\n"
"slVariable_dimension = 1000;\n"
"slVariable_lvalue = 1001;\n"
"slVariable_port_header = 1002;\n"
"slVariable_port_type = 1003;\n"
"slVirtual_interface_declaration = 1004;\n"
"slWait_statement = 1005;\n"
"slWeak0 = 1006;\n"
"slWeak1 = 1007;\n"
"slWhile = 1008;\n"
"slX = 1009;\n"
"slXor_call = 1010;\n"
"slZ = 1011;\n"
};
