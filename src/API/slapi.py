# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _slapi
else:
    import _slapi

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _slapi.delete_SwigPyIterator

    def value(self):
        return _slapi.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _slapi.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _slapi.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _slapi.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _slapi.SwigPyIterator_equal(self, x)

    def copy(self):
        return _slapi.SwigPyIterator_copy(self)

    def next(self):
        return _slapi.SwigPyIterator_next(self)

    def __next__(self):
        return _slapi.SwigPyIterator___next__(self)

    def previous(self):
        return _slapi.SwigPyIterator_previous(self)

    def advance(self, n):
        return _slapi.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _slapi.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _slapi.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _slapi.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _slapi.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _slapi.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _slapi.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _slapi:
_slapi.SwigPyIterator_swigregister(SwigPyIterator)

class UIntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _slapi.UIntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _slapi.UIntVector___nonzero__(self)

    def __bool__(self):
        return _slapi.UIntVector___bool__(self)

    def __len__(self):
        return _slapi.UIntVector___len__(self)

    def __getslice__(self, i, j):
        return _slapi.UIntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _slapi.UIntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _slapi.UIntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _slapi.UIntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _slapi.UIntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _slapi.UIntVector___setitem__(self, *args)

    def pop(self):
        return _slapi.UIntVector_pop(self)

    def append(self, x):
        return _slapi.UIntVector_append(self, x)

    def empty(self):
        return _slapi.UIntVector_empty(self)

    def size(self):
        return _slapi.UIntVector_size(self)

    def swap(self, v):
        return _slapi.UIntVector_swap(self, v)

    def begin(self):
        return _slapi.UIntVector_begin(self)

    def end(self):
        return _slapi.UIntVector_end(self)

    def rbegin(self):
        return _slapi.UIntVector_rbegin(self)

    def rend(self):
        return _slapi.UIntVector_rend(self)

    def clear(self):
        return _slapi.UIntVector_clear(self)

    def get_allocator(self):
        return _slapi.UIntVector_get_allocator(self)

    def pop_back(self):
        return _slapi.UIntVector_pop_back(self)

    def erase(self, *args):
        return _slapi.UIntVector_erase(self, *args)

    def __init__(self, *args):
        _slapi.UIntVector_swiginit(self, _slapi.new_UIntVector(*args))

    def push_back(self, x):
        return _slapi.UIntVector_push_back(self, x)

    def front(self):
        return _slapi.UIntVector_front(self)

    def back(self):
        return _slapi.UIntVector_back(self)

    def assign(self, n, x):
        return _slapi.UIntVector_assign(self, n, x)

    def resize(self, *args):
        return _slapi.UIntVector_resize(self, *args)

    def insert(self, *args):
        return _slapi.UIntVector_insert(self, *args)

    def reserve(self, n):
        return _slapi.UIntVector_reserve(self, n)

    def capacity(self):
        return _slapi.UIntVector_capacity(self)
    __swig_destroy__ = _slapi.delete_UIntVector

# Register UIntVector in _slapi:
_slapi.UIntVector_swigregister(UIntVector)


def SLsetWaiver(messageId, fileName=None, line=0, objectName=None):
    return _slapi.SLsetWaiver(messageId, fileName, line, objectName)

def SLoverrideSeverity(messageId, severity):
    return _slapi.SLoverrideSeverity(messageId, severity)

def SLregisterNewErrorType(messageId, text, secondLine):
    return _slapi.SLregisterNewErrorType(messageId, text, secondLine)

def SLaddError(container, messageId, fileName, line, col, objectName):
    return _slapi.SLaddError(container, messageId, fileName, line, col, objectName)

def SLaddErrorContext(prog, context, messageId, objectName, printColumn=False):
    return _slapi.SLaddErrorContext(prog, context, messageId, objectName, printColumn)

def SLaddMLErrorContext(prog, context1, context2, messageId, objectName1, objectName2, printColumn=False):
    return _slapi.SLaddMLErrorContext(prog, context1, context2, messageId, objectName1, objectName2, printColumn)

def SLaddMLError(container, messageId, fileName1, line1, col1, objectName1, fileName2, line2, col2, objectName2):
    return _slapi.SLaddMLError(container, messageId, fileName1, line1, col1, objectName1, fileName2, line2, col2, objectName2)

def SLgetColumn(prog, context):
    return _slapi.SLgetColumn(prog, context)

def SLgetText(prog, context):
    return _slapi.SLgetText(prog, context)

def SLgetTokens(prog, context):
    return _slapi.SLgetTokens(prog, context)

def SLgetParentContext(prog, context):
    return _slapi.SLgetParentContext(prog, context)

def SLgetChildrenContext(prog, context):
    return _slapi.SLgetChildrenContext(prog, context)

def SLgetRootNode(fC):
    return _slapi.SLgetRootNode(fC)

def SLgetFile(*args):
    return _slapi.SLgetFile(*args)

def SLgetSibling(fC, index):
    return _slapi.SLgetSibling(fC, index)

def SLgetLine(*args):
    return _slapi.SLgetLine(*args)

def SLgetName(fC, index):
    return _slapi.SLgetName(fC, index)

def SLgetType(fC, index):
    return _slapi.SLgetType(fC, index)

def SLgetChild(*args):
    return _slapi.SLgetChild(*args)

def SLgetParent(*args):
    return _slapi.SLgetParent(*args)

def SLgetAll(*args):
    return _slapi.SLgetAll(*args)

def SLcollect(fC, parent, type):
    return _slapi.SLcollect(fC, parent, type)

def SLcollectAll(*args):
    return _slapi.SLcollectAll(*args)

def SLgetnModuleDefinition(design):
    return _slapi.SLgetnModuleDefinition(design)

def SLgetnProgramDefinition(design):
    return _slapi.SLgetnProgramDefinition(design)

def SLgetnPackageDefinition(design):
    return _slapi.SLgetnPackageDefinition(design)

def SLgetnClassDefinition(design):
    return _slapi.SLgetnClassDefinition(design)

def SLgetnTopModuleInstance(design):
    return _slapi.SLgetnTopModuleInstance(design)

def SLgetModuleDefinition(design, index):
    return _slapi.SLgetModuleDefinition(design, index)

def SLgetProgramDefinition(design, index):
    return _slapi.SLgetProgramDefinition(design, index)

def SLgetPackageDefinition(design, index):
    return _slapi.SLgetPackageDefinition(design, index)

def SLgetClassDefinition(design, index):
    return _slapi.SLgetClassDefinition(design, index)

def SLgetTopModuleInstance(design, index):
    return _slapi.SLgetTopModuleInstance(design, index)

def SLgetModuleName(module):
    return _slapi.SLgetModuleName(module)

def SLgetModuleFile(module):
    return _slapi.SLgetModuleFile(module)

def SLgetModuleType(module):
    return _slapi.SLgetModuleType(module)

def SLgetModuleLine(module):
    return _slapi.SLgetModuleLine(module)

def SLgetModuleFileContent(module):
    return _slapi.SLgetModuleFileContent(module)

def SLgetModuleRootNode(module):
    return _slapi.SLgetModuleRootNode(module)

def SLgetClassName(_def):
    return _slapi.SLgetClassName(_def)

def SLgetClassFile(_def):
    return _slapi.SLgetClassFile(_def)

def SLgetClassType(_def):
    return _slapi.SLgetClassType(_def)

def SLgetClassLine(_def):
    return _slapi.SLgetClassLine(_def)

def SLgetClassFileContent(_def):
    return _slapi.SLgetClassFileContent(_def)

def SLgetClassRootNode(_def):
    return _slapi.SLgetClassRootNode(_def)

def SLgetPackageName(_def):
    return _slapi.SLgetPackageName(_def)

def SLgetPackageFile(_def):
    return _slapi.SLgetPackageFile(_def)

def SLgetPackageType(_def):
    return _slapi.SLgetPackageType(_def)

def SLgetPackageLine(_def):
    return _slapi.SLgetPackageLine(_def)

def SLgetPackageFileContent(_def):
    return _slapi.SLgetPackageFileContent(_def)

def SLgetPackageRootNode(_def):
    return _slapi.SLgetPackageRootNode(_def)

def SLgetProgramName(_def):
    return _slapi.SLgetProgramName(_def)

def SLgetProgramFile(_def):
    return _slapi.SLgetProgramFile(_def)

def SLgetProgramType(_def):
    return _slapi.SLgetProgramType(_def)

def SLgetProgramLine(_def):
    return _slapi.SLgetProgramLine(_def)

def SLgetProgramFileContent(_def):
    return _slapi.SLgetProgramFileContent(_def)

def SLgetProgramRootNode(_def):
    return _slapi.SLgetProgramRootNode(_def)

def SLgetInstanceType(instance):
    return _slapi.SLgetInstanceType(instance)

def SLgetInstanceModuleType(instance):
    return _slapi.SLgetInstanceModuleType(instance)

def SLgetInstanceName(instance):
    return _slapi.SLgetInstanceName(instance)

def SLgetInstanceFullPathName(instance):
    return _slapi.SLgetInstanceFullPathName(instance)

def SLgetInstanceModuleName(instance):
    return _slapi.SLgetInstanceModuleName(instance)

def SLgetInstanceDefinition(instance):
    return _slapi.SLgetInstanceDefinition(instance)

def SLgetInstanceFileName(instance):
    return _slapi.SLgetInstanceFileName(instance)

def SLgetInstanceFileContent(instance):
    return _slapi.SLgetInstanceFileContent(instance)

def SLgetInstanceNodeId(instance):
    return _slapi.SLgetInstanceNodeId(instance)

def SLgetInstanceLine(instance):
    return _slapi.SLgetInstanceLine(instance)

def SLgetnInstanceChildren(instance):
    return _slapi.SLgetnInstanceChildren(instance)

def SLgetInstanceChildren(instance, i):
    return _slapi.SLgetInstanceChildren(instance, i)

def SLgetInstanceParent(instance):
    return _slapi.SLgetInstanceParent(instance)


